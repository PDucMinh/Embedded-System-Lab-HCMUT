
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003048  08009090  08009090  0000a090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0d8  0800c0d8  0000e064  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0d8  0800c0d8  0000d0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0e0  0800c0e0  0000e064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0e0  0800c0e0  0000d0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0e4  0800c0e4  0000d0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800c0e8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e064  2**0
                  CONTENTS
 10 .bss          00000540  20000064  20000064  0000e064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005a4  200005a4  0000e064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a4db  00000000  00000000  0000e094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047e7  00000000  00000000  0002856f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0002cd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001221  00000000  00000000  0002e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c52  00000000  00000000  0002f6d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002190e  00000000  00000000  0005632b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e020e  00000000  00000000  00077c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00157e47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000651c  00000000  00000000  00157e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0015e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009078 	.word	0x08009078

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08009078 	.word	0x08009078

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dae:	4b3d      	ldr	r3, [pc, #244]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000db0:	4a3d      	ldr	r2, [pc, #244]	@ (8000ea8 <MX_ADC1_Init+0x10c>)
 8000db2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000db4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dba:	4b3a      	ldr	r3, [pc, #232]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dc0:	4b38      	ldr	r3, [pc, #224]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc6:	4b37      	ldr	r3, [pc, #220]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dcc:	4b35      	ldr	r3, [pc, #212]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd4:	4b33      	ldr	r3, [pc, #204]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dda:	4b32      	ldr	r3, [pc, #200]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000ddc:	4a33      	ldr	r2, [pc, #204]	@ (8000eac <MX_ADC1_Init+0x110>)
 8000dde:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de0:	4b30      	ldr	r3, [pc, #192]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000de6:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000de8:	2205      	movs	r2, #5
 8000dea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df4:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dfa:	482a      	ldr	r0, [pc, #168]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000dfc:	f002 fbf6 	bl	80035ec <HAL_ADC_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e06:	f001 fd6b 	bl	80028e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e0a:	2308      	movs	r3, #8
 8000e0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e16:	463b      	mov	r3, r7
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4822      	ldr	r0, [pc, #136]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000e1c:	f002 fd58 	bl	80038d0 <HAL_ADC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e26:	f001 fd5b 	bl	80028e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e2a:	2309      	movs	r3, #9
 8000e2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	4619      	mov	r1, r3
 8000e36:	481b      	ldr	r0, [pc, #108]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000e38:	f002 fd4a 	bl	80038d0 <HAL_ADC_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e42:	f001 fd4d 	bl	80028e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e46:	230a      	movs	r3, #10
 8000e48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4619      	mov	r1, r3
 8000e52:	4814      	ldr	r0, [pc, #80]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000e54:	f002 fd3c 	bl	80038d0 <HAL_ADC_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e5e:	f001 fd3f 	bl	80028e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e62:	230b      	movs	r3, #11
 8000e64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e66:	2304      	movs	r3, #4
 8000e68:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480d      	ldr	r0, [pc, #52]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000e70:	f002 fd2e 	bl	80038d0 <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e7a:	f001 fd31 	bl	80028e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e7e:	230c      	movs	r3, #12
 8000e80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e82:	2305      	movs	r3, #5
 8000e84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	@ (8000ea4 <MX_ADC1_Init+0x108>)
 8000e8c:	f002 fd20 	bl	80038d0 <HAL_ADC_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e96:	f001 fd23 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000080 	.word	0x20000080
 8000ea8:	40012000 	.word	0x40012000
 8000eac:	0f000001 	.word	0x0f000001

08000eb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8000fc0 <HAL_ADC_MspInit+0x110>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d171      	bne.n	8000fb6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc4 <HAL_ADC_MspInit+0x114>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eda:	4a3a      	ldr	r2, [pc, #232]	@ (8000fc4 <HAL_ADC_MspInit+0x114>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee2:	4b38      	ldr	r3, [pc, #224]	@ (8000fc4 <HAL_ADC_MspInit+0x114>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b34      	ldr	r3, [pc, #208]	@ (8000fc4 <HAL_ADC_MspInit+0x114>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a33      	ldr	r2, [pc, #204]	@ (8000fc4 <HAL_ADC_MspInit+0x114>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b31      	ldr	r3, [pc, #196]	@ (8000fc4 <HAL_ADC_MspInit+0x114>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc4 <HAL_ADC_MspInit+0x114>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a2c      	ldr	r2, [pc, #176]	@ (8000fc4 <HAL_ADC_MspInit+0x114>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc4 <HAL_ADC_MspInit+0x114>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f26:	2307      	movs	r3, #7
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4823      	ldr	r0, [pc, #140]	@ (8000fc8 <HAL_ADC_MspInit+0x118>)
 8000f3a:	f003 fc7d 	bl	8004838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f42:	2303      	movs	r3, #3
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481e      	ldr	r0, [pc, #120]	@ (8000fcc <HAL_ADC_MspInit+0x11c>)
 8000f52:	f003 fc71 	bl	8004838 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <HAL_ADC_MspInit+0x120>)
 8000f58:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd4 <HAL_ADC_MspInit+0x124>)
 8000f5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_ADC_MspInit+0x120>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <HAL_ADC_MspInit+0x120>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f68:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <HAL_ADC_MspInit+0x120>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <HAL_ADC_MspInit+0x120>)
 8000f70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <HAL_ADC_MspInit+0x120>)
 8000f78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <HAL_ADC_MspInit+0x120>)
 8000f80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f86:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <HAL_ADC_MspInit+0x120>)
 8000f88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <HAL_ADC_MspInit+0x120>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <HAL_ADC_MspInit+0x120>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <HAL_ADC_MspInit+0x120>)
 8000f9c:	f003 f84a 	bl	8004034 <HAL_DMA_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fa6:	f001 fc9b 	bl	80028e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a08      	ldr	r2, [pc, #32]	@ (8000fd0 <HAL_ADC_MspInit+0x120>)
 8000fae:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fb0:	4a07      	ldr	r2, [pc, #28]	@ (8000fd0 <HAL_ADC_MspInit+0x120>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	@ 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40012000 	.word	0x40012000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	200000c8 	.word	0x200000c8
 8000fd4:	40026410 	.word	0x40026410

08000fd8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2108      	movs	r1, #8
 8000fe0:	4802      	ldr	r0, [pc, #8]	@ (8000fec <button_init+0x14>)
 8000fe2:	f003 fdc5 	bl	8004b70 <HAL_GPIO_WritePin>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40020c00 	.word	0x40020c00

08000ff0 <button_Scan>:

void button_Scan(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	482f      	ldr	r0, [pc, #188]	@ (80010b8 <button_Scan+0xc8>)
 8000ffc:	f003 fdb8 	bl	8004b70 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001000:	2201      	movs	r2, #1
 8001002:	2108      	movs	r1, #8
 8001004:	482c      	ldr	r0, [pc, #176]	@ (80010b8 <button_Scan+0xc8>)
 8001006:	f003 fdb3 	bl	8004b70 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800100a:	230a      	movs	r3, #10
 800100c:	2202      	movs	r2, #2
 800100e:	492b      	ldr	r1, [pc, #172]	@ (80010bc <button_Scan+0xcc>)
 8001010:	482b      	ldr	r0, [pc, #172]	@ (80010c0 <button_Scan+0xd0>)
 8001012:	f004 fd82 	bl	8005b1a <HAL_SPI_Receive>
	  int button_index = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800101a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800101e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	e03f      	b.n	80010a6 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db06      	blt.n	800103a <button_Scan+0x4a>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b03      	cmp	r3, #3
 8001030:	dc03      	bgt.n	800103a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3304      	adds	r3, #4
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	e018      	b.n	800106c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b03      	cmp	r3, #3
 800103e:	dd07      	ble.n	8001050 <button_Scan+0x60>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b07      	cmp	r3, #7
 8001044:	dc04      	bgt.n	8001050 <button_Scan+0x60>
			  button_index = 7 - i;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f1c3 0307 	rsb	r3, r3, #7
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e00d      	b.n	800106c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b07      	cmp	r3, #7
 8001054:	dd06      	ble.n	8001064 <button_Scan+0x74>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0b      	cmp	r3, #11
 800105a:	dc03      	bgt.n	8001064 <button_Scan+0x74>
			  button_index = i + 4;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3304      	adds	r3, #4
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	e003      	b.n	800106c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f1c3 0317 	rsb	r3, r3, #23
 800106a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <button_Scan+0xcc>)
 800106e:	881a      	ldrh	r2, [r3, #0]
 8001070:	897b      	ldrh	r3, [r7, #10]
 8001072:	4013      	ands	r3, r2
 8001074:	b29b      	uxth	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <button_Scan+0x96>
 800107a:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <button_Scan+0xd4>)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2100      	movs	r1, #0
 8001080:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001084:	e009      	b.n	800109a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8001086:	4a0f      	ldr	r2, [pc, #60]	@ (80010c4 <button_Scan+0xd4>)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800108e:	3301      	adds	r3, #1
 8001090:	b299      	uxth	r1, r3
 8001092:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <button_Scan+0xd4>)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800109a:	897b      	ldrh	r3, [r7, #10]
 800109c:	085b      	lsrs	r3, r3, #1
 800109e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	ddbc      	ble.n	8001026 <button_Scan+0x36>
	  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40020c00 	.word	0x40020c00
 80010bc:	20000148 	.word	0x20000148
 80010c0:	20000234 	.word	0x20000234
 80010c4:	20000128 	.word	0x20000128

080010c8 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80010cc:	2100      	movs	r1, #0
 80010ce:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <buzzer_init+0x10>)
 80010d0:	f005 facc 	bl	800666c <HAL_TIM_PWM_Start>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000320 	.word	0x20000320

080010dc <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80010e6:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <buzzer_SetVolume+0x28>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <buzzer_SetVolume+0x28>)
 80010ee:	781a      	ldrb	r2, [r3, #0]
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <buzzer_SetVolume+0x2c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000014a 	.word	0x2000014a
 8001108:	20000320 	.word	0x20000320

0800110c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_DMA_Init+0x3c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a0b      	ldr	r2, [pc, #44]	@ (8001148 <MX_DMA_Init+0x3c>)
 800111c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_DMA_Init+0x3c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2038      	movs	r0, #56	@ 0x38
 8001134:	f002 ff47 	bl	8003fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001138:	2038      	movs	r0, #56	@ 0x38
 800113a:	f002 ff60 	bl	8003ffe <HAL_NVIC_EnableIRQ>

}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800

0800114c <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8001150:	201e      	movs	r0, #30
 8001152:	f002 f967 	bl	8003424 <DEC2BCD>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <ds3231_init+0x6c>)
 800115c:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 800115e:	2016      	movs	r0, #22
 8001160:	f002 f960 	bl	8003424 <DEC2BCD>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <ds3231_init+0x6c>)
 800116a:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 800116c:	2015      	movs	r0, #21
 800116e:	f002 f959 	bl	8003424 <DEC2BCD>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <ds3231_init+0x6c>)
 8001178:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800117a:	2006      	movs	r0, #6
 800117c:	f002 f952 	bl	8003424 <DEC2BCD>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <ds3231_init+0x6c>)
 8001186:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8001188:	200f      	movs	r0, #15
 800118a:	f002 f94b 	bl	8003424 <DEC2BCD>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <ds3231_init+0x6c>)
 8001194:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8001196:	2009      	movs	r0, #9
 8001198:	f002 f944 	bl	8003424 <DEC2BCD>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <ds3231_init+0x6c>)
 80011a2:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80011a4:	2017      	movs	r0, #23
 80011a6:	f002 f93d 	bl	8003424 <DEC2BCD>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b02      	ldr	r3, [pc, #8]	@ (80011b8 <ds3231_init+0x6c>)
 80011b0:	719a      	strb	r2, [r3, #6]
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000014c 	.word	0x2000014c

080011bc <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08e      	sub	sp, #56	@ 0x38
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
 80011d2:	615a      	str	r2, [r3, #20]
 80011d4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80011e8:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <MX_FSMC_Init+0xec>)
 80011ea:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80011ee:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80011f0:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <MX_FSMC_Init+0xec>)
 80011f2:	4a2e      	ldr	r2, [pc, #184]	@ (80012ac <MX_FSMC_Init+0xf0>)
 80011f4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80011f6:	4b2c      	ldr	r3, [pc, #176]	@ (80012a8 <MX_FSMC_Init+0xec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <MX_FSMC_Init+0xec>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001202:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <MX_FSMC_Init+0xec>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <MX_FSMC_Init+0xec>)
 800120a:	2210      	movs	r2, #16
 800120c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <MX_FSMC_Init+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001214:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <MX_FSMC_Init+0xec>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800121a:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <MX_FSMC_Init+0xec>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001220:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <MX_FSMC_Init+0xec>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <MX_FSMC_Init+0xec>)
 8001228:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800122c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <MX_FSMC_Init+0xec>)
 8001230:	2200      	movs	r2, #0
 8001232:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001234:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_FSMC_Init+0xec>)
 8001236:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800123a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_FSMC_Init+0xec>)
 800123e:	2200      	movs	r2, #0
 8001240:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_FSMC_Init+0xec>)
 8001244:	2200      	movs	r2, #0
 8001246:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_FSMC_Init+0xec>)
 800124a:	2200      	movs	r2, #0
 800124c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800124e:	230f      	movs	r3, #15
 8001250:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001252:	230f      	movs	r3, #15
 8001254:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001256:	233c      	movs	r3, #60	@ 0x3c
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800125e:	2310      	movs	r3, #16
 8001260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8001262:	2311      	movs	r3, #17
 8001264:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001266:	2300      	movs	r3, #0
 8001268:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800126a:	2308      	movs	r3, #8
 800126c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800126e:	230f      	movs	r3, #15
 8001270:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001272:	2309      	movs	r3, #9
 8001274:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800127a:	2310      	movs	r3, #16
 800127c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800127e:	2311      	movs	r3, #17
 8001280:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001286:	463a      	mov	r2, r7
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	4806      	ldr	r0, [pc, #24]	@ (80012a8 <MX_FSMC_Init+0xec>)
 8001290:	f005 f826 	bl	80062e0 <HAL_SRAM_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800129a:	f001 fb21 	bl	80028e0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800129e:	bf00      	nop
 80012a0:	3738      	adds	r7, #56	@ 0x38
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000154 	.word	0x20000154
 80012ac:	a0000104 	.word	0xa0000104

080012b0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80012c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <HAL_FSMC_MspInit+0x88>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d131      	bne.n	8001330 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <HAL_FSMC_MspInit+0x88>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b19      	ldr	r3, [pc, #100]	@ (800133c <HAL_FSMC_MspInit+0x8c>)
 80012d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012da:	4a18      	ldr	r2, [pc, #96]	@ (800133c <HAL_FSMC_MspInit+0x8c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6393      	str	r3, [r2, #56]	@ 0x38
 80012e2:	4b16      	ldr	r3, [pc, #88]	@ (800133c <HAL_FSMC_MspInit+0x8c>)
 80012e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80012ee:	f64f 7388 	movw	r3, #65416	@ 0xff88
 80012f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001300:	230c      	movs	r3, #12
 8001302:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4619      	mov	r1, r3
 8001308:	480d      	ldr	r0, [pc, #52]	@ (8001340 <HAL_FSMC_MspInit+0x90>)
 800130a:	f003 fa95 	bl	8004838 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800130e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8001312:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001320:	230c      	movs	r3, #12
 8001322:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4806      	ldr	r0, [pc, #24]	@ (8001344 <HAL_FSMC_MspInit+0x94>)
 800132a:	f003 fa85 	bl	8004838 <HAL_GPIO_Init>
 800132e:	e000      	b.n	8001332 <HAL_FSMC_MspInit+0x82>
    return;
 8001330:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200001a4 	.word	0x200001a4
 800133c:	40023800 	.word	0x40023800
 8001340:	40021000 	.word	0x40021000
 8001344:	40020c00 	.word	0x40020c00

08001348 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001350:	f7ff ffae 	bl	80012b0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08e      	sub	sp, #56	@ 0x38
 8001360:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
 8001376:	4b8f      	ldr	r3, [pc, #572]	@ (80015b4 <MX_GPIO_Init+0x258>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a8e      	ldr	r2, [pc, #568]	@ (80015b4 <MX_GPIO_Init+0x258>)
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b8c      	ldr	r3, [pc, #560]	@ (80015b4 <MX_GPIO_Init+0x258>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	623b      	str	r3, [r7, #32]
 800138c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
 8001392:	4b88      	ldr	r3, [pc, #544]	@ (80015b4 <MX_GPIO_Init+0x258>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a87      	ldr	r2, [pc, #540]	@ (80015b4 <MX_GPIO_Init+0x258>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b85      	ldr	r3, [pc, #532]	@ (80015b4 <MX_GPIO_Init+0x258>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	4b81      	ldr	r3, [pc, #516]	@ (80015b4 <MX_GPIO_Init+0x258>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a80      	ldr	r2, [pc, #512]	@ (80015b4 <MX_GPIO_Init+0x258>)
 80013b4:	f043 0320 	orr.w	r3, r3, #32
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b7e      	ldr	r3, [pc, #504]	@ (80015b4 <MX_GPIO_Init+0x258>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	61bb      	str	r3, [r7, #24]
 80013c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	4b7a      	ldr	r3, [pc, #488]	@ (80015b4 <MX_GPIO_Init+0x258>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a79      	ldr	r2, [pc, #484]	@ (80015b4 <MX_GPIO_Init+0x258>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b77      	ldr	r3, [pc, #476]	@ (80015b4 <MX_GPIO_Init+0x258>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b73      	ldr	r3, [pc, #460]	@ (80015b4 <MX_GPIO_Init+0x258>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a72      	ldr	r2, [pc, #456]	@ (80015b4 <MX_GPIO_Init+0x258>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b70      	ldr	r3, [pc, #448]	@ (80015b4 <MX_GPIO_Init+0x258>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b6c      	ldr	r3, [pc, #432]	@ (80015b4 <MX_GPIO_Init+0x258>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a6b      	ldr	r2, [pc, #428]	@ (80015b4 <MX_GPIO_Init+0x258>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b69      	ldr	r3, [pc, #420]	@ (80015b4 <MX_GPIO_Init+0x258>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	4b65      	ldr	r3, [pc, #404]	@ (80015b4 <MX_GPIO_Init+0x258>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a64      	ldr	r2, [pc, #400]	@ (80015b4 <MX_GPIO_Init+0x258>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b62      	ldr	r3, [pc, #392]	@ (80015b4 <MX_GPIO_Init+0x258>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b5e      	ldr	r3, [pc, #376]	@ (80015b4 <MX_GPIO_Init+0x258>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a5d      	ldr	r2, [pc, #372]	@ (80015b4 <MX_GPIO_Init+0x258>)
 8001440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b5b      	ldr	r3, [pc, #364]	@ (80015b4 <MX_GPIO_Init+0x258>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	2170      	movs	r1, #112	@ 0x70
 8001456:	4858      	ldr	r0, [pc, #352]	@ (80015b8 <MX_GPIO_Init+0x25c>)
 8001458:	f003 fb8a 	bl	8004b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 8001462:	4856      	ldr	r0, [pc, #344]	@ (80015bc <MX_GPIO_Init+0x260>)
 8001464:	f003 fb84 	bl	8004b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800146e:	4854      	ldr	r0, [pc, #336]	@ (80015c0 <MX_GPIO_Init+0x264>)
 8001470:	f003 fb7e 	bl	8004b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800147a:	4852      	ldr	r0, [pc, #328]	@ (80015c4 <MX_GPIO_Init+0x268>)
 800147c:	f003 fb78 	bl	8004b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001486:	4850      	ldr	r0, [pc, #320]	@ (80015c8 <MX_GPIO_Init+0x26c>)
 8001488:	f003 fb72 	bl	8004b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	2108      	movs	r1, #8
 8001490:	484e      	ldr	r0, [pc, #312]	@ (80015cc <MX_GPIO_Init+0x270>)
 8001492:	f003 fb6d 	bl	8004b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001496:	2370      	movs	r3, #112	@ 0x70
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	4842      	ldr	r0, [pc, #264]	@ (80015b8 <MX_GPIO_Init+0x25c>)
 80014ae:	f003 f9c3 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80014b2:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	483c      	ldr	r0, [pc, #240]	@ (80015bc <MX_GPIO_Init+0x260>)
 80014cc:	f003 f9b4 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 80014d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e2:	4619      	mov	r1, r3
 80014e4:	4836      	ldr	r0, [pc, #216]	@ (80015c0 <MX_GPIO_Init+0x264>)
 80014e6:	f003 f9a7 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 80014ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001500:	4619      	mov	r1, r3
 8001502:	482f      	ldr	r0, [pc, #188]	@ (80015c0 <MX_GPIO_Init+0x264>)
 8001504:	f003 f998 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001508:	23c0      	movs	r3, #192	@ 0xc0
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	482b      	ldr	r0, [pc, #172]	@ (80015c8 <MX_GPIO_Init+0x26c>)
 800151c:	f003 f98c 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001520:	2330      	movs	r3, #48	@ 0x30
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	4822      	ldr	r0, [pc, #136]	@ (80015bc <MX_GPIO_Init+0x260>)
 8001534:	f003 f980 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001538:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	481c      	ldr	r0, [pc, #112]	@ (80015c4 <MX_GPIO_Init+0x268>)
 8001552:	f003 f971 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8001556:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001560:	2301      	movs	r3, #1
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	4814      	ldr	r0, [pc, #80]	@ (80015bc <MX_GPIO_Init+0x260>)
 800156c:	f003 f964 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	480f      	ldr	r0, [pc, #60]	@ (80015c8 <MX_GPIO_Init+0x26c>)
 800158a:	f003 f955 	bl	8004838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800158e:	2308      	movs	r3, #8
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	4809      	ldr	r0, [pc, #36]	@ (80015cc <MX_GPIO_Init+0x270>)
 80015a6:	f003 f947 	bl	8004838 <HAL_GPIO_Init>

}
 80015aa:	bf00      	nop
 80015ac:	3738      	adds	r7, #56	@ 0x38
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40021400 	.word	0x40021400
 80015c4:	40021800 	.word	0x40021800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020c00 	.word	0x40020c00

080015d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015d6:	4a13      	ldr	r2, [pc, #76]	@ (8001624 <MX_I2C1_Init+0x54>)
 80015d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015dc:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <MX_I2C1_Init+0x58>)
 80015de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MX_I2C1_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001600:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <MX_I2C1_Init+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <MX_I2C1_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800160c:	4804      	ldr	r0, [pc, #16]	@ (8001620 <MX_I2C1_Init+0x50>)
 800160e:	f003 fae3 	bl	8004bd8 <HAL_I2C_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001618:	f001 f962 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200001a8 	.word	0x200001a8
 8001624:	40005400 	.word	0x40005400
 8001628:	000186a0 	.word	0x000186a0

0800162c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a19      	ldr	r2, [pc, #100]	@ (80016b0 <HAL_I2C_MspInit+0x84>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d12b      	bne.n	80016a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <HAL_I2C_MspInit+0x88>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <HAL_I2C_MspInit+0x88>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_I2C_MspInit+0x88>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800166a:	23c0      	movs	r3, #192	@ 0xc0
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166e:	2312      	movs	r3, #18
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800167a:	2304      	movs	r3, #4
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <HAL_I2C_MspInit+0x8c>)
 8001686:	f003 f8d7 	bl	8004838 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_I2C_MspInit+0x88>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <HAL_I2C_MspInit+0x88>)
 8001694:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_I2C_MspInit+0x88>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	@ 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40005400 	.word	0x40005400
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020400 	.word	0x40020400

080016bc <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80016c6:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <LCD_WR_REG+0x1c>)
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	8013      	strh	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	600ffffe 	.word	0x600ffffe

080016dc <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <LCD_WR_DATA+0x1c>)
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	8053      	strh	r3, [r2, #2]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	600ffffe 	.word	0x600ffffe

080016fc <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <LCD_RD_DATA+0x20>)
 8001704:	885b      	ldrh	r3, [r3, #2]
 8001706:	b29b      	uxth	r3, r3
 8001708:	80fb      	strh	r3, [r7, #6]
	return ram;
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	b29b      	uxth	r3, r3
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	600ffffe 	.word	0x600ffffe

08001720 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4604      	mov	r4, r0
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4623      	mov	r3, r4
 8001730:	80fb      	strh	r3, [r7, #6]
 8001732:	4603      	mov	r3, r0
 8001734:	80bb      	strh	r3, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	807b      	strh	r3, [r7, #2]
 800173a:	4613      	mov	r3, r2
 800173c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800173e:	202a      	movs	r0, #42	@ 0x2a
 8001740:	f7ff ffbc 	bl	80016bc <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	b29b      	uxth	r3, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ffc6 	bl	80016dc <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	b29b      	uxth	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ffc0 	bl	80016dc <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	b29b      	uxth	r3, r3
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ffba 	bl	80016dc <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001768:	887b      	ldrh	r3, [r7, #2]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	b29b      	uxth	r3, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ffb4 	bl	80016dc <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001774:	202b      	movs	r0, #43	@ 0x2b
 8001776:	f7ff ffa1 	bl	80016bc <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800177a:	88bb      	ldrh	r3, [r7, #4]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	b29b      	uxth	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ffab 	bl	80016dc <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001786:	88bb      	ldrh	r3, [r7, #4]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	b29b      	uxth	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ffa5 	bl	80016dc <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001792:	883b      	ldrh	r3, [r7, #0]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	b29b      	uxth	r3, r3
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff9f 	bl	80016dc <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800179e:	883b      	ldrh	r3, [r7, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff99 	bl	80016dc <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80017aa:	202c      	movs	r0, #44	@ 0x2c
 80017ac:	f7ff ff86 	bl	80016bc <LCD_WR_REG>
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd90      	pop	{r4, r7, pc}

080017b8 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <lcd_Clear+0x60>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <lcd_Clear+0x60>)
 80017cc:	885b      	ldrh	r3, [r3, #2]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2100      	movs	r1, #0
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff ffa3 	bl	8001720 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	81fb      	strh	r3, [r7, #14]
 80017de:	e011      	b.n	8001804 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	81bb      	strh	r3, [r7, #12]
 80017e4:	e006      	b.n	80017f4 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff77 	bl	80016dc <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80017ee:	89bb      	ldrh	r3, [r7, #12]
 80017f0:	3301      	adds	r3, #1
 80017f2:	81bb      	strh	r3, [r7, #12]
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <lcd_Clear+0x60>)
 80017f6:	885b      	ldrh	r3, [r3, #2]
 80017f8:	89ba      	ldrh	r2, [r7, #12]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d3f3      	bcc.n	80017e6 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80017fe:	89fb      	ldrh	r3, [r7, #14]
 8001800:	3301      	adds	r3, #1
 8001802:	81fb      	strh	r3, [r7, #14]
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <lcd_Clear+0x60>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	89fa      	ldrh	r2, [r7, #14]
 800180a:	429a      	cmp	r2, r3
 800180c:	d3e8      	bcc.n	80017e0 <lcd_Clear+0x28>
		}
	}
}
 800180e:	bf00      	nop
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200001fc 	.word	0x200001fc

0800181c <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	4604      	mov	r4, r0
 8001824:	4608      	mov	r0, r1
 8001826:	4611      	mov	r1, r2
 8001828:	461a      	mov	r2, r3
 800182a:	4623      	mov	r3, r4
 800182c:	80fb      	strh	r3, [r7, #6]
 800182e:	4603      	mov	r3, r0
 8001830:	80bb      	strh	r3, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	807b      	strh	r3, [r7, #2]
 8001836:	4613      	mov	r3, r2
 8001838:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	883b      	ldrh	r3, [r7, #0]
 8001842:	3b01      	subs	r3, #1
 8001844:	b29b      	uxth	r3, r3
 8001846:	88b9      	ldrh	r1, [r7, #4]
 8001848:	88f8      	ldrh	r0, [r7, #6]
 800184a:	f7ff ff69 	bl	8001720 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 800184e:	88bb      	ldrh	r3, [r7, #4]
 8001850:	81fb      	strh	r3, [r7, #14]
 8001852:	e010      	b.n	8001876 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	81bb      	strh	r3, [r7, #12]
 8001858:	e006      	b.n	8001868 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 800185a:	8c3b      	ldrh	r3, [r7, #32]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff3d 	bl	80016dc <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001862:	89bb      	ldrh	r3, [r7, #12]
 8001864:	3301      	adds	r3, #1
 8001866:	81bb      	strh	r3, [r7, #12]
 8001868:	89ba      	ldrh	r2, [r7, #12]
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	429a      	cmp	r2, r3
 800186e:	d3f4      	bcc.n	800185a <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001870:	89fb      	ldrh	r3, [r7, #14]
 8001872:	3301      	adds	r3, #1
 8001874:	81fb      	strh	r3, [r7, #14]
 8001876:	89fa      	ldrh	r2, [r7, #14]
 8001878:	883b      	ldrh	r3, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d3ea      	bcc.n	8001854 <lcd_Fill+0x38>
		}
	}
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}

08001888 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	80fb      	strh	r3, [r7, #6]
 8001892:	460b      	mov	r3, r1
 8001894:	80bb      	strh	r3, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800189a:	88bb      	ldrh	r3, [r7, #4]
 800189c:	88fa      	ldrh	r2, [r7, #6]
 800189e:	88b9      	ldrh	r1, [r7, #4]
 80018a0:	88f8      	ldrh	r0, [r7, #6]
 80018a2:	f7ff ff3d 	bl	8001720 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff17 	bl	80016dc <LCD_WR_DATA>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4604      	mov	r4, r0
 80018c0:	4608      	mov	r0, r1
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	4623      	mov	r3, r4
 80018c8:	80fb      	strh	r3, [r7, #6]
 80018ca:	4603      	mov	r3, r0
 80018cc:	80bb      	strh	r3, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	70fb      	strb	r3, [r7, #3]
 80018d2:	4613      	mov	r3, r2
 80018d4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80018de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80018e2:	085b      	lsrs	r3, r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf14      	ite	ne
 80018fa:	2301      	movne	r3, #1
 80018fc:	2300      	moveq	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4413      	add	r3, r2
 8001902:	b29a      	uxth	r2, r3
 8001904:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001908:	b29b      	uxth	r3, r3
 800190a:	fb12 f303 	smulbb	r3, r2, r3
 800190e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	3b20      	subs	r3, #32
 8001914:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	b29a      	uxth	r2, r3
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	4413      	add	r3, r2
 800191e:	b29b      	uxth	r3, r3
 8001920:	3b01      	subs	r3, #1
 8001922:	b29c      	uxth	r4, r3
 8001924:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001928:	b29a      	uxth	r2, r3
 800192a:	88bb      	ldrh	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	b29b      	uxth	r3, r3
 8001930:	3b01      	subs	r3, #1
 8001932:	b29b      	uxth	r3, r3
 8001934:	88b9      	ldrh	r1, [r7, #4]
 8001936:	88f8      	ldrh	r0, [r7, #6]
 8001938:	4622      	mov	r2, r4
 800193a:	f7ff fef1 	bl	8001720 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800193e:	2300      	movs	r3, #0
 8001940:	827b      	strh	r3, [r7, #18]
 8001942:	e07a      	b.n	8001a3a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001944:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001948:	2b0c      	cmp	r3, #12
 800194a:	d028      	beq.n	800199e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 800194c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001950:	2b10      	cmp	r3, #16
 8001952:	d108      	bne.n	8001966 <lcd_ShowChar+0xae>
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	8a7b      	ldrh	r3, [r7, #18]
 8001958:	493c      	ldr	r1, [pc, #240]	@ (8001a4c <lcd_ShowChar+0x194>)
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	440a      	add	r2, r1
 800195e:	4413      	add	r3, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	75fb      	strb	r3, [r7, #23]
 8001964:	e01b      	b.n	800199e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001966:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800196a:	2b18      	cmp	r3, #24
 800196c:	d10b      	bne.n	8001986 <lcd_ShowChar+0xce>
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	8a79      	ldrh	r1, [r7, #18]
 8001972:	4837      	ldr	r0, [pc, #220]	@ (8001a50 <lcd_ShowChar+0x198>)
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	4403      	add	r3, r0
 800197e:	440b      	add	r3, r1
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	75fb      	strb	r3, [r7, #23]
 8001984:	e00b      	b.n	800199e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001986:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800198a:	2b20      	cmp	r3, #32
 800198c:	d15a      	bne.n	8001a44 <lcd_ShowChar+0x18c>
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	8a7b      	ldrh	r3, [r7, #18]
 8001992:	4930      	ldr	r1, [pc, #192]	@ (8001a54 <lcd_ShowChar+0x19c>)
 8001994:	0192      	lsls	r2, r2, #6
 8001996:	440a      	add	r2, r1
 8001998:	4413      	add	r3, r2
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800199e:	2300      	movs	r3, #0
 80019a0:	75bb      	strb	r3, [r7, #22]
 80019a2:	e044      	b.n	8001a2e <lcd_ShowChar+0x176>
		{
			if(!mode)
 80019a4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d120      	bne.n	80019ee <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80019ac:	7dfa      	ldrb	r2, [r7, #23]
 80019ae:	7dbb      	ldrb	r3, [r7, #22]
 80019b0:	fa42 f303 	asr.w	r3, r2, r3
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d004      	beq.n	80019c6 <lcd_ShowChar+0x10e>
 80019bc:	883b      	ldrh	r3, [r7, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fe8c 	bl	80016dc <LCD_WR_DATA>
 80019c4:	e003      	b.n	80019ce <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80019c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fe87 	bl	80016dc <LCD_WR_DATA>
				m++;
 80019ce:	7d7b      	ldrb	r3, [r7, #21]
 80019d0:	3301      	adds	r3, #1
 80019d2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80019d4:	7d7b      	ldrb	r3, [r7, #21]
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80019dc:	fb01 f202 	mul.w	r2, r1, r2
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d11f      	bne.n	8001a28 <lcd_ShowChar+0x170>
				{
					m=0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	757b      	strb	r3, [r7, #21]
					break;
 80019ec:	e022      	b.n	8001a34 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80019ee:	7dfa      	ldrb	r2, [r7, #23]
 80019f0:	7dbb      	ldrb	r3, [r7, #22]
 80019f2:	fa42 f303 	asr.w	r3, r2, r3
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <lcd_ShowChar+0x152>
 80019fe:	883a      	ldrh	r2, [r7, #0]
 8001a00:	88b9      	ldrh	r1, [r7, #4]
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff3f 	bl	8001888 <lcd_DrawPoint>
				x++;
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001a10:	88fa      	ldrh	r2, [r7, #6]
 8001a12:	8a3b      	ldrh	r3, [r7, #16]
 8001a14:	1ad2      	subs	r2, r2, r3
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d105      	bne.n	8001a28 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001a1c:	8a3b      	ldrh	r3, [r7, #16]
 8001a1e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001a20:	88bb      	ldrh	r3, [r7, #4]
 8001a22:	3301      	adds	r3, #1
 8001a24:	80bb      	strh	r3, [r7, #4]
					break;
 8001a26:	e005      	b.n	8001a34 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001a28:	7dbb      	ldrb	r3, [r7, #22]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	75bb      	strb	r3, [r7, #22]
 8001a2e:	7dbb      	ldrb	r3, [r7, #22]
 8001a30:	2b07      	cmp	r3, #7
 8001a32:	d9b7      	bls.n	80019a4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001a34:	8a7b      	ldrh	r3, [r7, #18]
 8001a36:	3301      	adds	r3, #1
 8001a38:	827b      	strh	r3, [r7, #18]
 8001a3a:	8a7a      	ldrh	r2, [r7, #18]
 8001a3c:	89bb      	ldrh	r3, [r7, #12]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d380      	bcc.n	8001944 <lcd_ShowChar+0x8c>
 8001a42:	e000      	b.n	8001a46 <lcd_ShowChar+0x18e>
		else return;
 8001a44:	bf00      	nop
				}
			}
		}
	}
}
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd90      	pop	{r4, r7, pc}
 8001a4c:	08009104 	.word	0x08009104
 8001a50:	080096f4 	.word	0x080096f4
 8001a54:	0800a8c4 	.word	0x0800a8c4

08001a58 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	460a      	mov	r2, r1
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	4613      	mov	r3, r2
 8001a66:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001a6c:	e004      	b.n	8001a78 <mypow+0x20>
 8001a6e:	79fa      	ldrb	r2, [r7, #7]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	1e5a      	subs	r2, r3, #1
 8001a7c:	71ba      	strb	r2, [r7, #6]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f5      	bne.n	8001a6e <mypow+0x16>
	return result;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b089      	sub	sp, #36	@ 0x24
 8001a94:	af04      	add	r7, sp, #16
 8001a96:	4604      	mov	r4, r0
 8001a98:	4608      	mov	r0, r1
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	80fb      	strh	r3, [r7, #6]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80bb      	strh	r3, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	807b      	strh	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001ab2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
 8001abe:	e059      	b.n	8001b74 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001ac0:	887c      	ldrh	r4, [r7, #2]
 8001ac2:	787a      	ldrb	r2, [r7, #1]
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	4619      	mov	r1, r3
 8001ad0:	200a      	movs	r0, #10
 8001ad2:	f7ff ffc1 	bl	8001a58 <mypow>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	fbb4 f1f3 	udiv	r1, r4, r3
 8001adc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b88 <lcd_ShowIntNum+0xf8>)
 8001ade:	fba3 2301 	umull	r2, r3, r3, r1
 8001ae2:	08da      	lsrs	r2, r3, #3
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	1aca      	subs	r2, r1, r3
 8001aee:	4613      	mov	r3, r2
 8001af0:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001af2:	7bbb      	ldrb	r3, [r7, #14]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d121      	bne.n	8001b3c <lcd_ShowIntNum+0xac>
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	787b      	ldrb	r3, [r7, #1]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	429a      	cmp	r2, r3
 8001b00:	da1c      	bge.n	8001b3c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001b02:	7b3b      	ldrb	r3, [r7, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d117      	bne.n	8001b38 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	7b7b      	ldrb	r3, [r7, #13]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	fb12 f303 	smulbb	r3, r2, r3
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4413      	add	r3, r2
 8001b1a:	b298      	uxth	r0, r3
 8001b1c:	8c3a      	ldrh	r2, [r7, #32]
 8001b1e:	88b9      	ldrh	r1, [r7, #4]
 8001b20:	2300      	movs	r3, #0
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	2220      	movs	r2, #32
 8001b32:	f7ff fec1 	bl	80018b8 <lcd_ShowChar>
				continue;
 8001b36:	e01a      	b.n	8001b6e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	7b7b      	ldrb	r3, [r7, #13]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	fb12 f303 	smulbb	r3, r2, r3
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b298      	uxth	r0, r3
 8001b50:	7b3b      	ldrb	r3, [r7, #12]
 8001b52:	3330      	adds	r3, #48	@ 0x30
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	8c3c      	ldrh	r4, [r7, #32]
 8001b58:	88b9      	ldrh	r1, [r7, #4]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	9302      	str	r3, [sp, #8]
 8001b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	4623      	mov	r3, r4
 8001b6a:	f7ff fea5 	bl	80018b8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	3301      	adds	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	787b      	ldrb	r3, [r7, #1]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d3a1      	bcc.n	8001ac0 <lcd_ShowIntNum+0x30>
	}
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	bf00      	nop
 8001b88:	cccccccd 	.word	0xcccccccd

08001b8c <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b08b      	sub	sp, #44	@ 0x2c
 8001b90:	af04      	add	r7, sp, #16
 8001b92:	4604      	mov	r4, r0
 8001b94:	4608      	mov	r0, r1
 8001b96:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4623      	mov	r3, r4
 8001ba0:	81fb      	strh	r3, [r7, #14]
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	81bb      	strh	r3, [r7, #12]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	71fb      	strb	r3, [r7, #7]
 8001baa:	4613      	mov	r3, r2
 8001bac:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001bae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001bb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bba:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001c94 <lcd_ShowFloatNum+0x108>
 8001bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bc6:	ee17 3a90 	vmov	r3, s15
 8001bca:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	75fb      	strb	r3, [r7, #23]
 8001bd0:	e057      	b.n	8001c82 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001bd2:	8abc      	ldrh	r4, [r7, #20]
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4619      	mov	r1, r3
 8001be2:	200a      	movs	r0, #10
 8001be4:	f7ff ff38 	bl	8001a58 <mypow>
 8001be8:	4603      	mov	r3, r0
 8001bea:	fbb4 f1f3 	udiv	r1, r4, r3
 8001bee:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <lcd_ShowFloatNum+0x10c>)
 8001bf0:	fba3 2301 	umull	r2, r3, r3, r1
 8001bf4:	08da      	lsrs	r2, r3, #3
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	1aca      	subs	r2, r1, r3
 8001c00:	4613      	mov	r3, r2
 8001c02:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001c04:	7dfa      	ldrb	r2, [r7, #23]
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	3b02      	subs	r3, #2
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d11d      	bne.n	8001c4a <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	3b02      	subs	r3, #2
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	7dbb      	ldrb	r3, [r7, #22]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	fb12 f303 	smulbb	r3, r2, r3
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	89fb      	ldrh	r3, [r7, #14]
 8001c20:	4413      	add	r3, r2
 8001c22:	b298      	uxth	r0, r3
 8001c24:	88ba      	ldrh	r2, [r7, #4]
 8001c26:	89b9      	ldrh	r1, [r7, #12]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	4613      	mov	r3, r2
 8001c38:	222e      	movs	r2, #46	@ 0x2e
 8001c3a:	f7ff fe3d 	bl	80018b8 <lcd_ShowChar>
			t++;
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	3301      	adds	r3, #1
 8001c42:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	3301      	adds	r3, #1
 8001c48:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	7dbb      	ldrb	r3, [r7, #22]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	fb12 f303 	smulbb	r3, r2, r3
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	89fb      	ldrh	r3, [r7, #14]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b298      	uxth	r0, r3
 8001c5e:	7cfb      	ldrb	r3, [r7, #19]
 8001c60:	3330      	adds	r3, #48	@ 0x30
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	88bc      	ldrh	r4, [r7, #4]
 8001c66:	89b9      	ldrh	r1, [r7, #12]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	4623      	mov	r3, r4
 8001c78:	f7ff fe1e 	bl	80018b8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
 8001c82:	7dfa      	ldrb	r2, [r7, #23]
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d3a3      	bcc.n	8001bd2 <lcd_ShowFloatNum+0x46>
	}
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd90      	pop	{r4, r7, pc}
 8001c94:	42c80000 	.word	0x42c80000
 8001c98:	cccccccd 	.word	0xcccccccd

08001c9c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <lcd_SetDir+0x44>)
 8001cb8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001cbc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	@ (8001ce0 <lcd_SetDir+0x44>)
 8001cc0:	22f0      	movs	r2, #240	@ 0xf0
 8001cc2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001cc4:	e006      	b.n	8001cd4 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001cc6:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <lcd_SetDir+0x44>)
 8001cc8:	22f0      	movs	r2, #240	@ 0xf0
 8001cca:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001ccc:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <lcd_SetDir+0x44>)
 8001cce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001cd2:	805a      	strh	r2, [r3, #2]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	200001fc 	.word	0x200001fc

08001ce4 <lcd_init>:


void lcd_init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cee:	48aa      	ldr	r0, [pc, #680]	@ (8001f98 <lcd_init+0x2b4>)
 8001cf0:	f002 ff3e 	bl	8004b70 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001cf4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cf8:	f001 fc54 	bl	80035a4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d02:	48a5      	ldr	r0, [pc, #660]	@ (8001f98 <lcd_init+0x2b4>)
 8001d04:	f002 ff34 	bl	8004b70 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001d08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d0c:	f001 fc4a 	bl	80035a4 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7ff ffc3 	bl	8001c9c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001d16:	20d3      	movs	r0, #211	@ 0xd3
 8001d18:	f7ff fcd0 	bl	80016bc <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001d1c:	f7ff fcee 	bl	80016fc <LCD_RD_DATA>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b9d      	ldr	r3, [pc, #628]	@ (8001f9c <lcd_init+0x2b8>)
 8001d26:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d28:	f7ff fce8 	bl	80016fc <LCD_RD_DATA>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b9a      	ldr	r3, [pc, #616]	@ (8001f9c <lcd_init+0x2b8>)
 8001d32:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d34:	f7ff fce2 	bl	80016fc <LCD_RD_DATA>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b97      	ldr	r3, [pc, #604]	@ (8001f9c <lcd_init+0x2b8>)
 8001d3e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001d40:	4b96      	ldr	r3, [pc, #600]	@ (8001f9c <lcd_init+0x2b8>)
 8001d42:	889b      	ldrh	r3, [r3, #4]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	4b94      	ldr	r3, [pc, #592]	@ (8001f9c <lcd_init+0x2b8>)
 8001d4a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001d4c:	f7ff fcd6 	bl	80016fc <LCD_RD_DATA>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b91      	ldr	r3, [pc, #580]	@ (8001f9c <lcd_init+0x2b8>)
 8001d56:	889b      	ldrh	r3, [r3, #4]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	4b8f      	ldr	r3, [pc, #572]	@ (8001f9c <lcd_init+0x2b8>)
 8001d5e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001d60:	20cf      	movs	r0, #207	@ 0xcf
 8001d62:	f7ff fcab 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff fcb8 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001d6c:	20c1      	movs	r0, #193	@ 0xc1
 8001d6e:	f7ff fcb5 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001d72:	2030      	movs	r0, #48	@ 0x30
 8001d74:	f7ff fcb2 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001d78:	20ed      	movs	r0, #237	@ 0xed
 8001d7a:	f7ff fc9f 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001d7e:	2064      	movs	r0, #100	@ 0x64
 8001d80:	f7ff fcac 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f7ff fca9 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001d8a:	2012      	movs	r0, #18
 8001d8c:	f7ff fca6 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001d90:	2081      	movs	r0, #129	@ 0x81
 8001d92:	f7ff fca3 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001d96:	20e8      	movs	r0, #232	@ 0xe8
 8001d98:	f7ff fc90 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d9c:	2085      	movs	r0, #133	@ 0x85
 8001d9e:	f7ff fc9d 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001da2:	2010      	movs	r0, #16
 8001da4:	f7ff fc9a 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001da8:	207a      	movs	r0, #122	@ 0x7a
 8001daa:	f7ff fc97 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001dae:	20cb      	movs	r0, #203	@ 0xcb
 8001db0:	f7ff fc84 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001db4:	2039      	movs	r0, #57	@ 0x39
 8001db6:	f7ff fc91 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001dba:	202c      	movs	r0, #44	@ 0x2c
 8001dbc:	f7ff fc8e 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff fc8b 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001dc6:	2034      	movs	r0, #52	@ 0x34
 8001dc8:	f7ff fc88 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f7ff fc85 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001dd2:	20f7      	movs	r0, #247	@ 0xf7
 8001dd4:	f7ff fc72 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001dd8:	2020      	movs	r0, #32
 8001dda:	f7ff fc7f 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001dde:	20ea      	movs	r0, #234	@ 0xea
 8001de0:	f7ff fc6c 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff fc79 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7ff fc76 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001df0:	20c0      	movs	r0, #192	@ 0xc0
 8001df2:	f7ff fc63 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001df6:	201b      	movs	r0, #27
 8001df8:	f7ff fc70 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001dfc:	20c1      	movs	r0, #193	@ 0xc1
 8001dfe:	f7ff fc5d 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7ff fc6a 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001e08:	20c5      	movs	r0, #197	@ 0xc5
 8001e0a:	f7ff fc57 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001e0e:	2030      	movs	r0, #48	@ 0x30
 8001e10:	f7ff fc64 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001e14:	2030      	movs	r0, #48	@ 0x30
 8001e16:	f7ff fc61 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001e1a:	20c7      	movs	r0, #199	@ 0xc7
 8001e1c:	f7ff fc4e 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001e20:	20b7      	movs	r0, #183	@ 0xb7
 8001e22:	f7ff fc5b 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001e26:	2036      	movs	r0, #54	@ 0x36
 8001e28:	f7ff fc48 	bl	80016bc <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001e2c:	2008      	movs	r0, #8
 8001e2e:	f7ff fc55 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001e32:	203a      	movs	r0, #58	@ 0x3a
 8001e34:	f7ff fc42 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001e38:	2055      	movs	r0, #85	@ 0x55
 8001e3a:	f7ff fc4f 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001e3e:	20b1      	movs	r0, #177	@ 0xb1
 8001e40:	f7ff fc3c 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff fc49 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001e4a:	201a      	movs	r0, #26
 8001e4c:	f7ff fc46 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001e50:	20b6      	movs	r0, #182	@ 0xb6
 8001e52:	f7ff fc33 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001e56:	200a      	movs	r0, #10
 8001e58:	f7ff fc40 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001e5c:	20a2      	movs	r0, #162	@ 0xa2
 8001e5e:	f7ff fc3d 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001e62:	20f2      	movs	r0, #242	@ 0xf2
 8001e64:	f7ff fc2a 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fc37 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001e6e:	2026      	movs	r0, #38	@ 0x26
 8001e70:	f7ff fc24 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f7ff fc31 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001e7a:	20e0      	movs	r0, #224	@ 0xe0
 8001e7c:	f7ff fc1e 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001e80:	200f      	movs	r0, #15
 8001e82:	f7ff fc2b 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001e86:	202a      	movs	r0, #42	@ 0x2a
 8001e88:	f7ff fc28 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001e8c:	2028      	movs	r0, #40	@ 0x28
 8001e8e:	f7ff fc25 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e92:	2008      	movs	r0, #8
 8001e94:	f7ff fc22 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e98:	200e      	movs	r0, #14
 8001e9a:	f7ff fc1f 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e9e:	2008      	movs	r0, #8
 8001ea0:	f7ff fc1c 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001ea4:	2054      	movs	r0, #84	@ 0x54
 8001ea6:	f7ff fc19 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001eaa:	20a9      	movs	r0, #169	@ 0xa9
 8001eac:	f7ff fc16 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001eb0:	2043      	movs	r0, #67	@ 0x43
 8001eb2:	f7ff fc13 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001eb6:	200a      	movs	r0, #10
 8001eb8:	f7ff fc10 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ebc:	200f      	movs	r0, #15
 8001ebe:	f7ff fc0d 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7ff fc0a 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff fc07 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff fc04 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff fc01 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001eda:	20e1      	movs	r0, #225	@ 0xe1
 8001edc:	f7ff fbee 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff fbfb 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001ee6:	2015      	movs	r0, #21
 8001ee8:	f7ff fbf8 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001eec:	2017      	movs	r0, #23
 8001eee:	f7ff fbf5 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001ef2:	2007      	movs	r0, #7
 8001ef4:	f7ff fbf2 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001ef8:	2011      	movs	r0, #17
 8001efa:	f7ff fbef 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001efe:	2006      	movs	r0, #6
 8001f00:	f7ff fbec 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001f04:	202b      	movs	r0, #43	@ 0x2b
 8001f06:	f7ff fbe9 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001f0a:	2056      	movs	r0, #86	@ 0x56
 8001f0c:	f7ff fbe6 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001f10:	203c      	movs	r0, #60	@ 0x3c
 8001f12:	f7ff fbe3 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001f16:	2005      	movs	r0, #5
 8001f18:	f7ff fbe0 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f1c:	2010      	movs	r0, #16
 8001f1e:	f7ff fbdd 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f22:	200f      	movs	r0, #15
 8001f24:	f7ff fbda 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001f28:	203f      	movs	r0, #63	@ 0x3f
 8001f2a:	f7ff fbd7 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001f2e:	203f      	movs	r0, #63	@ 0x3f
 8001f30:	f7ff fbd4 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f34:	200f      	movs	r0, #15
 8001f36:	f7ff fbd1 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001f3a:	202b      	movs	r0, #43	@ 0x2b
 8001f3c:	f7ff fbbe 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff fbcb 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f7ff fbc8 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f7ff fbc5 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001f52:	203f      	movs	r0, #63	@ 0x3f
 8001f54:	f7ff fbc2 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001f58:	202a      	movs	r0, #42	@ 0x2a
 8001f5a:	f7ff fbaf 	bl	80016bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7ff fbbc 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff fbb9 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7ff fbb6 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001f70:	20ef      	movs	r0, #239	@ 0xef
 8001f72:	f7ff fbb3 	bl	80016dc <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001f76:	2011      	movs	r0, #17
 8001f78:	f7ff fba0 	bl	80016bc <LCD_WR_REG>
	HAL_Delay(120);
 8001f7c:	2078      	movs	r0, #120	@ 0x78
 8001f7e:	f001 fb11 	bl	80035a4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001f82:	2029      	movs	r0, #41	@ 0x29
 8001f84:	f7ff fb9a 	bl	80016bc <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f8e:	4804      	ldr	r0, [pc, #16]	@ (8001fa0 <lcd_init+0x2bc>)
 8001f90:	f002 fdee 	bl	8004b70 <HAL_GPIO_WritePin>
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	200001fc 	.word	0x200001fc
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	b298      	uxth	r0, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	8b3a      	ldrh	r2, [r7, #24]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7ff fc5b 	bl	8001888 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	b298      	uxth	r0, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	8b3a      	ldrh	r2, [r7, #24]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7ff fc4b 	bl	8001888 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	b298      	uxth	r0, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	b29a      	uxth	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	b29b      	uxth	r3, r3
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	b29b      	uxth	r3, r3
 800200a:	8b3a      	ldrh	r2, [r7, #24]
 800200c:	4619      	mov	r1, r3
 800200e:	f7ff fc3b 	bl	8001888 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	b29a      	uxth	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	b29b      	uxth	r3, r3
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	b298      	uxth	r0, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	b29a      	uxth	r2, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	b29b      	uxth	r3, r3
 800202a:	8b3a      	ldrh	r2, [r7, #24]
 800202c:	4619      	mov	r1, r3
 800202e:	f7ff fc2b 	bl	8001888 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	b29a      	uxth	r2, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b29b      	uxth	r3, r3
 800203a:	4413      	add	r3, r2
 800203c:	b298      	uxth	r0, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	b29a      	uxth	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	b29b      	uxth	r3, r3
 8002046:	4413      	add	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	8b3a      	ldrh	r2, [r7, #24]
 800204c:	4619      	mov	r1, r3
 800204e:	f7ff fc1b 	bl	8001888 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	b29a      	uxth	r2, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b29b      	uxth	r3, r3
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	b298      	uxth	r0, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	b29a      	uxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	b29b      	uxth	r3, r3
 8002066:	4413      	add	r3, r2
 8002068:	b29b      	uxth	r3, r3
 800206a:	8b3a      	ldrh	r2, [r7, #24]
 800206c:	4619      	mov	r1, r3
 800206e:	f7ff fc0b 	bl	8001888 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	b29a      	uxth	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	4413      	add	r3, r2
 800207c:	b298      	uxth	r0, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	b29a      	uxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	b29b      	uxth	r3, r3
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	b29b      	uxth	r3, r3
 800208a:	8b3a      	ldrh	r2, [r7, #24]
 800208c:	4619      	mov	r1, r3
 800208e:	f7ff fbfb 	bl	8001888 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	b29a      	uxth	r2, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	b298      	uxth	r0, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	8b3a      	ldrh	r2, [r7, #24]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7ff fbeb 	bl	8001888 <lcd_DrawPoint>
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b08a      	sub	sp, #40	@ 0x28
 80020be:	af02      	add	r7, sp, #8
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	4613      	mov	r3, r2
 80020c8:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	f1c3 0303 	rsb	r3, r3, #3
 80020da:	613b      	str	r3, [r7, #16]


	if (fill)
 80020dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d04f      	beq.n	8002182 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80020e2:	e029      	b.n	8002138 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	e00a      	b.n	8002100 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	68b9      	ldr	r1, [r7, #8]
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff ff55 	bl	8001fa4 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	429a      	cmp	r2, r3
 8002106:	ddf0      	ble.n	80020ea <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	da06      	bge.n	800211c <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	009a      	lsls	r2, r3, #2
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	3306      	adds	r3, #6
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	e00a      	b.n	8002132 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	009a      	lsls	r2, r3, #2
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	330a      	adds	r3, #10
 800212a:	613b      	str	r3, [r7, #16]
				y--;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	3b01      	subs	r3, #1
 8002130:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3301      	adds	r3, #1
 8002136:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	429a      	cmp	r2, r3
 800213e:	ddd1      	ble.n	80020e4 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8002140:	e023      	b.n	800218a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f7ff ff29 	bl	8001fa4 <_draw_circle_8>
			if (d < 0) {
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	da06      	bge.n	8002166 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	009a      	lsls	r2, r3, #2
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	3306      	adds	r3, #6
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	e00a      	b.n	800217c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	009a      	lsls	r2, r3, #2
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4413      	add	r3, r2
 8002172:	330a      	adds	r3, #10
 8002174:	613b      	str	r3, [r7, #16]
				y--;
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	3b01      	subs	r3, #1
 800217a:	61bb      	str	r3, [r7, #24]
			x++;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	3301      	adds	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	429a      	cmp	r2, r3
 8002188:	dddb      	ble.n	8002142 <lcd_DrawCircle+0x88>
}
 800218a:	bf00      	nop
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b08b      	sub	sp, #44	@ 0x2c
 8002198:	af04      	add	r7, sp, #16
 800219a:	60ba      	str	r2, [r7, #8]
 800219c:	461a      	mov	r2, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	81fb      	strh	r3, [r7, #14]
 80021a2:	460b      	mov	r3, r1
 80021a4:	81bb      	strh	r3, [r7, #12]
 80021a6:	4613      	mov	r3, r2
 80021a8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80021aa:	89fb      	ldrh	r3, [r7, #14]
 80021ac:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80021b2:	e048      	b.n	8002246 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d145      	bne.n	8002246 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80021ba:	89fa      	ldrh	r2, [r7, #14]
 80021bc:	4b26      	ldr	r3, [pc, #152]	@ (8002258 <lcd_ShowStr+0xc4>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80021c6:	085b      	lsrs	r3, r3, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	1acb      	subs	r3, r1, r3
 80021cc:	429a      	cmp	r2, r3
 80021ce:	dc3f      	bgt.n	8002250 <lcd_ShowStr+0xbc>
 80021d0:	89ba      	ldrh	r2, [r7, #12]
 80021d2:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <lcd_ShowStr+0xc4>)
 80021d4:	885b      	ldrh	r3, [r3, #2]
 80021d6:	4619      	mov	r1, r3
 80021d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80021dc:	1acb      	subs	r3, r1, r3
 80021de:	429a      	cmp	r2, r3
 80021e0:	dc36      	bgt.n	8002250 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b80      	cmp	r3, #128	@ 0x80
 80021e8:	d902      	bls.n	80021f0 <lcd_ShowStr+0x5c>
 80021ea:	2301      	movs	r3, #1
 80021ec:	75fb      	strb	r3, [r7, #23]
 80021ee:	e02a      	b.n	8002246 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b0d      	cmp	r3, #13
 80021f6:	d10b      	bne.n	8002210 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80021f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	89bb      	ldrh	r3, [r7, #12]
 8002200:	4413      	add	r3, r2
 8002202:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002204:	8abb      	ldrh	r3, [r7, #20]
 8002206:	81fb      	strh	r3, [r7, #14]
					str++;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	3301      	adds	r3, #1
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	e017      	b.n	8002240 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781a      	ldrb	r2, [r3, #0]
 8002214:	88fc      	ldrh	r4, [r7, #6]
 8002216:	89b9      	ldrh	r1, [r7, #12]
 8002218:	89f8      	ldrh	r0, [r7, #14]
 800221a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800221e:	9302      	str	r3, [sp, #8]
 8002220:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	4623      	mov	r3, r4
 800222c:	f7ff fb44 	bl	80018b8 <lcd_ShowChar>
					x+=sizey/2;
 8002230:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	89fb      	ldrh	r3, [r7, #14]
 800223c:	4413      	add	r3, r2
 800223e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	3301      	adds	r3, #1
 8002244:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1b2      	bne.n	80021b4 <lcd_ShowStr+0x20>
 800224e:	e000      	b.n	8002252 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002250:	bf00      	nop
			}
		}
	}
}
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd90      	pop	{r4, r7, pc}
 8002258:	200001fc 	.word	0x200001fc

0800225c <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002260:	4b3f      	ldr	r3, [pc, #252]	@ (8002360 <led7_Scan+0x104>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	b29a      	uxth	r2, r3
 8002268:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <led7_Scan+0x104>)
 800226a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800226c:	4b3d      	ldr	r3, [pc, #244]	@ (8002364 <led7_Scan+0x108>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a3d      	ldr	r2, [pc, #244]	@ (8002368 <led7_Scan+0x10c>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	b21a      	sxth	r2, r3
 8002278:	4b39      	ldr	r3, [pc, #228]	@ (8002360 <led7_Scan+0x104>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b21b      	sxth	r3, r3
 800227e:	4313      	orrs	r3, r2
 8002280:	b21b      	sxth	r3, r3
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b36      	ldr	r3, [pc, #216]	@ (8002360 <led7_Scan+0x104>)
 8002286:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002288:	4b36      	ldr	r3, [pc, #216]	@ (8002364 <led7_Scan+0x108>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d847      	bhi.n	8002320 <led7_Scan+0xc4>
 8002290:	a201      	add	r2, pc, #4	@ (adr r2, 8002298 <led7_Scan+0x3c>)
 8002292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002296:	bf00      	nop
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022c7 	.word	0x080022c7
 80022a0:	080022e5 	.word	0x080022e5
 80022a4:	08002303 	.word	0x08002303
	case 0:
		spi_buffer |= 0x00b0;
 80022a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002360 <led7_Scan+0x104>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002360 <led7_Scan+0x104>)
 80022b4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80022b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <led7_Scan+0x104>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022be:	b29a      	uxth	r2, r3
 80022c0:	4b27      	ldr	r3, [pc, #156]	@ (8002360 <led7_Scan+0x104>)
 80022c2:	801a      	strh	r2, [r3, #0]
		break;
 80022c4:	e02d      	b.n	8002322 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80022c6:	4b26      	ldr	r3, [pc, #152]	@ (8002360 <led7_Scan+0x104>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <led7_Scan+0x104>)
 80022d2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80022d4:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <led7_Scan+0x104>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	f023 0320 	bic.w	r3, r3, #32
 80022dc:	b29a      	uxth	r2, r3
 80022de:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <led7_Scan+0x104>)
 80022e0:	801a      	strh	r2, [r3, #0]
		break;
 80022e2:	e01e      	b.n	8002322 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80022e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002360 <led7_Scan+0x104>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002360 <led7_Scan+0x104>)
 80022f0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80022f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <led7_Scan+0x104>)
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	f023 0310 	bic.w	r3, r3, #16
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	4b18      	ldr	r3, [pc, #96]	@ (8002360 <led7_Scan+0x104>)
 80022fe:	801a      	strh	r2, [r3, #0]
		break;
 8002300:	e00f      	b.n	8002322 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002302:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <led7_Scan+0x104>)
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800230a:	b29a      	uxth	r2, r3
 800230c:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <led7_Scan+0x104>)
 800230e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002310:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <led7_Scan+0x104>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002318:	b29a      	uxth	r2, r3
 800231a:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <led7_Scan+0x104>)
 800231c:	801a      	strh	r2, [r3, #0]
		break;
 800231e:	e000      	b.n	8002322 <led7_Scan+0xc6>
	default:
		break;
 8002320:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002322:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <led7_Scan+0x108>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3301      	adds	r3, #1
 8002328:	425a      	negs	r2, r3
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	f002 0203 	and.w	r2, r2, #3
 8002332:	bf58      	it	pl
 8002334:	4253      	negpl	r3, r2
 8002336:	4a0b      	ldr	r2, [pc, #44]	@ (8002364 <led7_Scan+0x108>)
 8002338:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2140      	movs	r1, #64	@ 0x40
 800233e:	480b      	ldr	r0, [pc, #44]	@ (800236c <led7_Scan+0x110>)
 8002340:	f002 fc16 	bl	8004b70 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002344:	2301      	movs	r3, #1
 8002346:	2202      	movs	r2, #2
 8002348:	4905      	ldr	r1, [pc, #20]	@ (8002360 <led7_Scan+0x104>)
 800234a:	4809      	ldr	r0, [pc, #36]	@ (8002370 <led7_Scan+0x114>)
 800234c:	f003 faa9 	bl	80058a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002350:	2201      	movs	r2, #1
 8002352:	2140      	movs	r1, #64	@ 0x40
 8002354:	4805      	ldr	r0, [pc, #20]	@ (800236c <led7_Scan+0x110>)
 8002356:	f002 fc0b 	bl	8004b70 <HAL_GPIO_WritePin>
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000004 	.word	0x20000004
 8002364:	20000204 	.word	0x20000204
 8002368:	20000000 	.word	0x20000000
 800236c:	40021800 	.word	0x40021800
 8002370:	20000234 	.word	0x20000234

08002374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002378:	f001 f8a2 	bl	80034c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800237c:	f000 f830 	bl	80023e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002380:	f7fe ffec 	bl	800135c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002384:	f000 fdc0 	bl	8002f08 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002388:	f000 fc28 	bl	8002bdc <MX_SPI1_Init>
  MX_FSMC_Init();
 800238c:	f7fe ff16 	bl	80011bc <MX_FSMC_Init>
  MX_I2C1_Init();
 8002390:	f7ff f91e 	bl	80015d0 <MX_I2C1_Init>
  MX_TIM13_Init();
 8002394:	f000 fe04 	bl	8002fa0 <MX_TIM13_Init>
  MX_DMA_Init();
 8002398:	f7fe feb8 	bl	800110c <MX_DMA_Init>
  MX_ADC1_Init();
 800239c:	f7fe fcfe 	bl	8000d9c <MX_ADC1_Init>
  MX_TIM1_Init();
 80023a0:	f000 fd62 	bl	8002e68 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80023a4:	f000 ff88 	bl	80032b8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80023a8:	f000 ff5c 	bl	8003264 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80023ac:	f000 f882 	bl	80024b4 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7ff fa01 	bl	80017b8 <lcd_Clear>
		  // test_Esp();
		//   lightProcess();
		//   test_LedDebug();
	  // }
//    lcd_DrawCircle(237, 310, YELLOW, 2, 1);
	  while(!flag_timer2);
 80023b6:	bf00      	nop
 80023b8:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <main+0x68>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0fb      	beq.n	80023b8 <main+0x44>
	  flag_timer2 = 0;
 80023c0:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <main+0x68>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 80023c6:	f7fe fe13 	bl	8000ff0 <button_Scan>
	  test_LedDebug();
 80023ca:	f000 f88d 	bl	80024e8 <test_LedDebug>
    lab6_operation();
 80023ce:	f000 f979 	bl	80026c4 <lab6_operation>
//	  test_Adc();
	  test_Buzzer();
 80023d2:	f000 f95b 	bl	800268c <test_Buzzer>
    lab6_alarm();
 80023d6:	f000 f9fb 	bl	80027d0 <lab6_alarm>
	  while(!flag_timer2);
 80023da:	e7ec      	b.n	80023b6 <main+0x42>
 80023dc:	20000226 	.word	0x20000226

080023e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b094      	sub	sp, #80	@ 0x50
 80023e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e6:	f107 0320 	add.w	r3, r7, #32
 80023ea:	2230      	movs	r2, #48	@ 0x30
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f006 f9c2 	bl	8008778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	4b28      	ldr	r3, [pc, #160]	@ (80024ac <SystemClock_Config+0xcc>)
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	4a27      	ldr	r2, [pc, #156]	@ (80024ac <SystemClock_Config+0xcc>)
 800240e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002412:	6413      	str	r3, [r2, #64]	@ 0x40
 8002414:	4b25      	ldr	r3, [pc, #148]	@ (80024ac <SystemClock_Config+0xcc>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002420:	2300      	movs	r3, #0
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	4b22      	ldr	r3, [pc, #136]	@ (80024b0 <SystemClock_Config+0xd0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a21      	ldr	r2, [pc, #132]	@ (80024b0 <SystemClock_Config+0xd0>)
 800242a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b1f      	ldr	r3, [pc, #124]	@ (80024b0 <SystemClock_Config+0xd0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800243c:	2302      	movs	r3, #2
 800243e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002440:	2301      	movs	r3, #1
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002444:	2310      	movs	r3, #16
 8002446:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002448:	2302      	movs	r3, #2
 800244a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800244c:	2300      	movs	r3, #0
 800244e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002450:	2308      	movs	r3, #8
 8002452:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002454:	23a8      	movs	r3, #168	@ 0xa8
 8002456:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002458:	2302      	movs	r3, #2
 800245a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800245c:	2304      	movs	r3, #4
 800245e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002460:	f107 0320 	add.w	r3, r7, #32
 8002464:	4618      	mov	r0, r3
 8002466:	f002 fcfb 	bl	8004e60 <HAL_RCC_OscConfig>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002470:	f000 fa36 	bl	80028e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002474:	230f      	movs	r3, #15
 8002476:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002478:	2302      	movs	r3, #2
 800247a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002480:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002484:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002486:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800248a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	2105      	movs	r1, #5
 8002492:	4618      	mov	r0, r3
 8002494:	f002 ff5c 	bl	8005350 <HAL_RCC_ClockConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800249e:	f000 fa1f 	bl	80028e0 <Error_Handler>
  }
}
 80024a2:	bf00      	nop
 80024a4:	3750      	adds	r7, #80	@ 0x50
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40007000 	.word	0x40007000

080024b4 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	  timer_init();
 80024b8:	f000 fb3c 	bl	8002b34 <timer_init>
	  button_init();
 80024bc:	f7fe fd8c 	bl	8000fd8 <button_init>
	  lcd_init();
 80024c0:	f7ff fc10 	bl	8001ce4 <lcd_init>
	  uart_init_esp();
 80024c4:	f000 fe6e 	bl	80031a4 <uart_init_esp>
	  setTimer2(50);
 80024c8:	2032      	movs	r0, #50	@ 0x32
 80024ca:	f000 fafb 	bl	8002ac4 <setTimer2>

    ds3231_init();
 80024ce:	f7fe fe3d 	bl	800114c <ds3231_init>
    sensor_init();
 80024d2:	f000 fa0b 	bl	80028ec <sensor_init>
	  buzzer_init();
 80024d6:	f7fe fdf7 	bl	80010c8 <buzzer_init>
    uart_init_rs232();
 80024da:	f000 fe3b 	bl	8003154 <uart_init_rs232>
    setTimer1(10);
 80024de:	200a      	movs	r0, #10
 80024e0:	f000 fb0c 	bl	8002afc <setTimer1>
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80024ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <test_LedDebug+0x3c>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <test_LedDebug+0x40>)
 80024f4:	fb83 1302 	smull	r1, r3, r3, r2
 80024f8:	10d9      	asrs	r1, r3, #3
 80024fa:	17d3      	asrs	r3, r2, #31
 80024fc:	1ac9      	subs	r1, r1, r3
 80024fe:	460b      	mov	r3, r1
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	1ad1      	subs	r1, r2, r3
 8002508:	b2ca      	uxtb	r2, r1
 800250a:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <test_LedDebug+0x3c>)
 800250c:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 800250e:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <test_LedDebug+0x3c>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d103      	bne.n	800251e <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002516:	2110      	movs	r1, #16
 8002518:	4804      	ldr	r0, [pc, #16]	@ (800252c <test_LedDebug+0x44>)
 800251a:	f002 fb42 	bl	8004ba2 <HAL_GPIO_TogglePin>
	}
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000210 	.word	0x20000210
 8002528:	66666667 	.word	0x66666667
 800252c:	40021000 	.word	0x40021000

08002530 <isButtonUp>:

uint8_t isButtonUp()
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 8002534:	4b05      	ldr	r3, [pc, #20]	@ (800254c <isButtonUp+0x1c>)
 8002536:	88db      	ldrh	r3, [r3, #6]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <isButtonUp+0x10>
        return 1;
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <isButtonUp+0x12>
    else
        return 0;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	20000128 	.word	0x20000128

08002550 <isButtonDown>:

uint8_t isButtonDown()
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 8002554:	4b05      	ldr	r3, [pc, #20]	@ (800256c <isButtonDown+0x1c>)
 8002556:	89db      	ldrh	r3, [r3, #14]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <isButtonDown+0x10>
        return 1;
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <isButtonDown+0x12>
    else
        return 0;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	20000128 	.word	0x20000128

08002570 <isButtonRight>:

uint8_t isButtonRight()
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
    if (button_count[11] == 1)
 8002574:	4b05      	ldr	r3, [pc, #20]	@ (800258c <isButtonRight+0x1c>)
 8002576:	8adb      	ldrh	r3, [r3, #22]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <isButtonRight+0x10>
        return 1;
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <isButtonRight+0x12>
    else
        return 0;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	20000128 	.word	0x20000128

08002590 <test_Adc>:
	ds3231_Write(ADRESS_SEC, 24);
}

uint8_t count_adc = 0;

void test_Adc(float sensor_power, char* light, float temperature, int humidity){
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af04      	add	r7, sp, #16
 8002596:	ed87 0a03 	vstr	s0, [r7, #12]
 800259a:	60b8      	str	r0, [r7, #8]
 800259c:	edc7 0a01 	vstr	s1, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
	// count_adc = (count_adc + 1)%20;
	// if(count_adc == 0){
	// 	sensor_Read();
		lcd_ShowStr(10, 10, "Power:", RED, BLACK, 16, 0);
 80025a2:	2300      	movs	r3, #0
 80025a4:	9302      	str	r3, [sp, #8]
 80025a6:	2310      	movs	r3, #16
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	2300      	movs	r3, #0
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80025b2:	4a32      	ldr	r2, [pc, #200]	@ (800267c <test_Adc+0xec>)
 80025b4:	210a      	movs	r1, #10
 80025b6:	200a      	movs	r0, #10
 80025b8:	f7ff fdec 	bl	8002194 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 10,sensor_power, 4, RED, BLACK, 16);
 80025bc:	2310      	movs	r3, #16
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	2300      	movs	r3, #0
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80025c8:	2204      	movs	r2, #4
 80025ca:	ed97 0a03 	vldr	s0, [r7, #12]
 80025ce:	210a      	movs	r1, #10
 80025d0:	2082      	movs	r0, #130	@ 0x82
 80025d2:	f7ff fadb 	bl	8001b8c <lcd_ShowFloatNum>
		lcd_ShowStr(10, 30, "Light:", RED, BLACK, 16, 0);
 80025d6:	2300      	movs	r3, #0
 80025d8:	9302      	str	r3, [sp, #8]
 80025da:	2310      	movs	r3, #16
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	2300      	movs	r3, #0
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80025e6:	4a26      	ldr	r2, [pc, #152]	@ (8002680 <test_Adc+0xf0>)
 80025e8:	211e      	movs	r1, #30
 80025ea:	200a      	movs	r0, #10
 80025ec:	f7ff fdd2 	bl	8002194 <lcd_ShowStr>
		lcd_ShowStr(130, 30,light, RED, BLACK, 16, 0);
 80025f0:	2300      	movs	r3, #0
 80025f2:	9302      	str	r3, [sp, #8]
 80025f4:	2310      	movs	r3, #16
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	2300      	movs	r3, #0
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	211e      	movs	r1, #30
 8002604:	2082      	movs	r0, #130	@ 0x82
 8002606:	f7ff fdc5 	bl	8002194 <lcd_ShowStr>
//		lcd_ShowIntNum(130, 120,(int)((sensor_GetLight()/4095)*100), 4, RED, BLACK, 16);
		lcd_ShowStr(10, 50, "Temperature:", RED, BLACK, 16, 0);
 800260a:	2300      	movs	r3, #0
 800260c:	9302      	str	r3, [sp, #8]
 800260e:	2310      	movs	r3, #16
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2300      	movs	r3, #0
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800261a:	4a1a      	ldr	r2, [pc, #104]	@ (8002684 <test_Adc+0xf4>)
 800261c:	2132      	movs	r1, #50	@ 0x32
 800261e:	200a      	movs	r0, #10
 8002620:	f7ff fdb8 	bl	8002194 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 50, temperature, 4, RED, BLACK, 16);
 8002624:	2310      	movs	r3, #16
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	2300      	movs	r3, #0
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002630:	2204      	movs	r2, #4
 8002632:	ed97 0a01 	vldr	s0, [r7, #4]
 8002636:	2132      	movs	r1, #50	@ 0x32
 8002638:	2082      	movs	r0, #130	@ 0x82
 800263a:	f7ff faa7 	bl	8001b8c <lcd_ShowFloatNum>
		lcd_ShowStr(10, 70, "Humidity:", RED, BLACK, 16, 0);
 800263e:	2300      	movs	r3, #0
 8002640:	9302      	str	r3, [sp, #8]
 8002642:	2310      	movs	r3, #16
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	2300      	movs	r3, #0
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800264e:	4a0e      	ldr	r2, [pc, #56]	@ (8002688 <test_Adc+0xf8>)
 8002650:	2146      	movs	r1, #70	@ 0x46
 8002652:	200a      	movs	r0, #10
 8002654:	f7ff fd9e 	bl	8002194 <lcd_ShowStr>
		lcd_ShowIntNum(130, 70, humidity, 4, RED, BLACK, 16);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b29a      	uxth	r2, r3
 800265c:	2310      	movs	r3, #16
 800265e:	9302      	str	r3, [sp, #8]
 8002660:	2300      	movs	r3, #0
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2304      	movs	r3, #4
 800266c:	2146      	movs	r1, #70	@ 0x46
 800266e:	2082      	movs	r0, #130	@ 0x82
 8002670:	f7ff fa0e 	bl	8001a90 <lcd_ShowIntNum>
		// lcd_ShowStr(10, 180, "Temperature:", RED, BLACK, 16, 0);
		// lcd_ShowFloatNum(130, 180,sensor_GetTemperature(), 4, RED, BLACK, 16);
	// }
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	08009090 	.word	0x08009090
 8002680:	08009098 	.word	0x08009098
 8002684:	080090a0 	.word	0x080090a0
 8002688:	080090b0 	.word	0x080090b0

0800268c <test_Buzzer>:

void test_Buzzer(){
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	if(isButtonUp()){
 8002690:	f7ff ff4e 	bl	8002530 <isButtonUp>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <test_Buzzer+0x14>
		buzzer_SetVolume(50);
 800269a:	2032      	movs	r0, #50	@ 0x32
 800269c:	f7fe fd1e 	bl	80010dc <buzzer_SetVolume>
	}

	if(isButtonDown()){
 80026a0:	f7ff ff56 	bl	8002550 <isButtonDown>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <test_Buzzer+0x24>
		buzzer_SetVolume(0);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7fe fd16 	bl	80010dc <buzzer_SetVolume>
	}

	if(isButtonRight()){
 80026b0:	f7ff ff5e 	bl	8002570 <isButtonRight>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <test_Buzzer+0x34>
		buzzer_SetVolume(25);
 80026ba:	2019      	movs	r0, #25
 80026bc:	f7fe fd0e 	bl	80010dc <buzzer_SetVolume>
	}

}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <lab6_operation>:
int humidity;
int power_prev = 0;
int x=0;
void lab6_operation()
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	ed2d 8b02 	vpush	{d8}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
  count_adc = (count_adc + 1)%20;
 80026ce:	4b36      	ldr	r3, [pc, #216]	@ (80027a8 <lab6_operation+0xe4>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	4b35      	ldr	r3, [pc, #212]	@ (80027ac <lab6_operation+0xe8>)
 80026d6:	fb83 1302 	smull	r1, r3, r3, r2
 80026da:	10d9      	asrs	r1, r3, #3
 80026dc:	17d3      	asrs	r3, r2, #31
 80026de:	1ac9      	subs	r1, r1, r3
 80026e0:	460b      	mov	r3, r1
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	1ad1      	subs	r1, r2, r3
 80026ea:	b2ca      	uxtb	r2, r1
 80026ec:	4b2e      	ldr	r3, [pc, #184]	@ (80027a8 <lab6_operation+0xe4>)
 80026ee:	701a      	strb	r2, [r3, #0]
  if(count_adc == 0)
 80026f0:	4b2d      	ldr	r3, [pc, #180]	@ (80027a8 <lab6_operation+0xe4>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d150      	bne.n	800279a <lab6_operation+0xd6>
  {  
  sensor_Read();
 80026f8:	f000 f906 	bl	8002908 <sensor_Read>
  float sensor_power = sensor_GetCurrent() * sensor_GetVoltage();
 80026fc:	f000 f968 	bl	80029d0 <sensor_GetCurrent>
 8002700:	eeb0 8a40 	vmov.f32	s16, s0
 8002704:	f000 f928 	bl	8002958 <sensor_GetVoltage>
 8002708:	eef0 7a40 	vmov.f32	s15, s0
 800270c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002710:	edc7 7a05 	vstr	s15, [r7, #20]
  char light[10] ;
  sprintf(light,"%s",(((sensor_GetLight() *100 / 4095) < 50) ? "Strong" : "Weak  "));
 8002714:	f000 f906 	bl	8002924 <sensor_GetLight>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	2364      	movs	r3, #100	@ 0x64
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	4a23      	ldr	r2, [pc, #140]	@ (80027b0 <lab6_operation+0xec>)
 8002724:	4293      	cmp	r3, r2
 8002726:	dc01      	bgt.n	800272c <lab6_operation+0x68>
 8002728:	4a22      	ldr	r2, [pc, #136]	@ (80027b4 <lab6_operation+0xf0>)
 800272a:	e000      	b.n	800272e <lab6_operation+0x6a>
 800272c:	4a22      	ldr	r2, [pc, #136]	@ (80027b8 <lab6_operation+0xf4>)
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	4922      	ldr	r1, [pc, #136]	@ (80027bc <lab6_operation+0xf8>)
 8002732:	4618      	mov	r0, r3
 8002734:	f006 f800 	bl	8008738 <siprintf>
  // sprintf(light,"%s", "strong");
  float temperature = sensor_GetTemperature();
 8002738:	f000 f9a6 	bl	8002a88 <sensor_GetTemperature>
 800273c:	ed87 0a04 	vstr	s0, [r7, #16]
  humidity = sensor_GetPotentiometer() * 100 /4095;
 8002740:	f000 f8fc 	bl	800293c <sensor_GetPotentiometer>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	2364      	movs	r3, #100	@ 0x64
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <lab6_operation+0xfc>)
 8002750:	fb82 1203 	smull	r1, r2, r2, r3
 8002754:	441a      	add	r2, r3
 8002756:	12d2      	asrs	r2, r2, #11
 8002758:	17db      	asrs	r3, r3, #31
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	4a19      	ldr	r2, [pc, #100]	@ (80027c4 <lab6_operation+0x100>)
 800275e:	6013      	str	r3, [r2, #0]
  if (humidity > 70) {buzzer_flag = 1; flag_timer1 = 1;}
 8002760:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <lab6_operation+0x100>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b46      	cmp	r3, #70	@ 0x46
 8002766:	dd06      	ble.n	8002776 <lab6_operation+0xb2>
 8002768:	4b17      	ldr	r3, [pc, #92]	@ (80027c8 <lab6_operation+0x104>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <lab6_operation+0x108>)
 8002770:	2201      	movs	r2, #1
 8002772:	801a      	strh	r2, [r3, #0]
 8002774:	e002      	b.n	800277c <lab6_operation+0xb8>
  else {buzzer_flag = 0;}
 8002776:	4b14      	ldr	r3, [pc, #80]	@ (80027c8 <lab6_operation+0x104>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
   test_Adc(sensor_power, light, temperature, humidity);
 800277c:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <lab6_operation+0x100>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	4611      	mov	r1, r2
 8002784:	edd7 0a04 	vldr	s1, [r7, #16]
 8002788:	4618      	mov	r0, r3
 800278a:	ed97 0a05 	vldr	s0, [r7, #20]
 800278e:	f7ff feff 	bl	8002590 <test_Adc>
  lcd_plot(sensor_power);
 8002792:	ed97 0a05 	vldr	s0, [r7, #20]
 8002796:	f000 f83f 	bl	8002818 <lcd_plot>
  }
}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	ecbd 8b02 	vpop	{d8}
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000211 	.word	0x20000211
 80027ac:	66666667 	.word	0x66666667
 80027b0:	00031fcd 	.word	0x00031fcd
 80027b4:	080090bc 	.word	0x080090bc
 80027b8:	080090c4 	.word	0x080090c4
 80027bc:	080090cc 	.word	0x080090cc
 80027c0:	80080081 	.word	0x80080081
 80027c4:	20000214 	.word	0x20000214
 80027c8:	2000020c 	.word	0x2000020c
 80027cc:	2000022c 	.word	0x2000022c

080027d0 <lab6_alarm>:
void lab6_alarm()
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  if (buzzer_flag == 1 && flag_timer1 == 1)
 80027d4:	4b0d      	ldr	r3, [pc, #52]	@ (800280c <lab6_alarm+0x3c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d111      	bne.n	8002800 <lab6_alarm+0x30>
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <lab6_alarm+0x40>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10d      	bne.n	8002800 <lab6_alarm+0x30>
  {
    buzzer_SetVolume(50);
 80027e4:	2032      	movs	r0, #50	@ 0x32
 80027e6:	f7fe fc79 	bl	80010dc <buzzer_SetVolume>
    uart_Rs232SendString("ALARM: Humidity is too high\n");
 80027ea:	480a      	ldr	r0, [pc, #40]	@ (8002814 <lab6_alarm+0x44>)
 80027ec:	f000 fcc0 	bl	8003170 <uart_Rs232SendString>
    flag_timer1 = 0;
 80027f0:	4b07      	ldr	r3, [pc, #28]	@ (8002810 <lab6_alarm+0x40>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	801a      	strh	r2, [r3, #0]
    setTimer1(1000);
 80027f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027fa:	f000 f97f 	bl	8002afc <setTimer1>
 80027fe:	e003      	b.n	8002808 <lab6_alarm+0x38>
  }
  else
  {
    buzzer_SetVolume(0);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe fc6b 	bl	80010dc <buzzer_SetVolume>
  }
}
 8002806:	bf00      	nop
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}
 800280c:	2000020c 	.word	0x2000020c
 8002810:	2000022c 	.word	0x2000022c
 8002814:	080090d0 	.word	0x080090d0

08002818 <lcd_plot>:
int count = 0;
void lcd_plot(float val) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af02      	add	r7, sp, #8
 800281e:	ed87 0a01 	vstr	s0, [r7, #4]
// 	power_prev = val;
  // if (plot_buffer[0] == 0)
  // {
  //   lcd_DrawCircle(10, )
  // }
  if (count == 10)
 8002822:	4b2b      	ldr	r3, [pc, #172]	@ (80028d0 <lcd_plot+0xb8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b0a      	cmp	r3, #10
 8002828:	d10b      	bne.n	8002842 <lcd_plot+0x2a>
  {
    lcd_Fill(0,100,238,320,BLACK);
 800282a:	2300      	movs	r3, #0
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002832:	22ee      	movs	r2, #238	@ 0xee
 8002834:	2164      	movs	r1, #100	@ 0x64
 8002836:	2000      	movs	r0, #0
 8002838:	f7fe fff0 	bl	800181c <lcd_Fill>
    count = 0;
 800283c:	4b24      	ldr	r3, [pc, #144]	@ (80028d0 <lcd_plot+0xb8>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
  }
  float y = 300 - val;
 8002842:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80028d4 <lcd_plot+0xbc>
 8002846:	edd7 7a01 	vldr	s15, [r7, #4]
 800284a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800284e:	edc7 7a03 	vstr	s15, [r7, #12]
  if (y < 120) y = 120;
 8002852:	edd7 7a03 	vldr	s15, [r7, #12]
 8002856:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80028d8 <lcd_plot+0xc0>
 800285a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002862:	d501      	bpl.n	8002868 <lcd_plot+0x50>
 8002864:	4b1d      	ldr	r3, [pc, #116]	@ (80028dc <lcd_plot+0xc4>)
 8002866:	60fb      	str	r3, [r7, #12]
  float x = count * 20;
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <lcd_plot+0xb8>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	ee07 3a90 	vmov	s15, r3
 8002878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800287c:	edc7 7a02 	vstr	s15, [r7, #8]
  if (x < 2) x = 2;
 8002880:	edd7 7a02 	vldr	s15, [r7, #8]
 8002884:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800288c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002890:	d502      	bpl.n	8002898 <lcd_plot+0x80>
 8002892:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002896:	60bb      	str	r3, [r7, #8]
  lcd_DrawCircle(x, y, YELLOW, 2, 1);
 8002898:	edd7 7a02 	vldr	s15, [r7, #8]
 800289c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80028a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80028a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a8:	2301      	movs	r3, #1
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2302      	movs	r3, #2
 80028ae:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80028b2:	ee17 1a90 	vmov	r1, s15
 80028b6:	ee17 0a10 	vmov	r0, s14
 80028ba:	f7ff fbfe 	bl	80020ba <lcd_DrawCircle>
  count++;
 80028be:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <lcd_plot+0xb8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	4a02      	ldr	r2, [pc, #8]	@ (80028d0 <lcd_plot+0xb8>)
 80028c6:	6013      	str	r3, [r2, #0]
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000218 	.word	0x20000218
 80028d4:	43960000 	.word	0x43960000
 80028d8:	42f00000 	.word	0x42f00000
 80028dc:	42f00000 	.word	0x42f00000

080028e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e4:	b672      	cpsid	i
}
 80028e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <Error_Handler+0x8>

080028ec <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 80028f0:	2205      	movs	r2, #5
 80028f2:	4903      	ldr	r1, [pc, #12]	@ (8002900 <sensor_init+0x14>)
 80028f4:	4803      	ldr	r0, [pc, #12]	@ (8002904 <sensor_init+0x18>)
 80028f6:	f000 febd 	bl	8003674 <HAL_ADC_Start_DMA>
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000021c 	.word	0x2000021c
 8002904:	20000080 	.word	0x20000080

08002908 <sensor_Read>:

void sensor_Read(){
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 800290c:	2205      	movs	r2, #5
 800290e:	4903      	ldr	r1, [pc, #12]	@ (800291c <sensor_Read+0x14>)
 8002910:	4803      	ldr	r0, [pc, #12]	@ (8002920 <sensor_Read+0x18>)
 8002912:	f000 feaf 	bl	8003674 <HAL_ADC_Start_DMA>
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	2000021c 	.word	0x2000021c
 8002920:	20000080 	.word	0x20000080

08002924 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002928:	4b03      	ldr	r3, [pc, #12]	@ (8002938 <sensor_GetLight+0x14>)
 800292a:	889b      	ldrh	r3, [r3, #4]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	2000021c 	.word	0x2000021c

0800293c <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002940:	4b03      	ldr	r3, [pc, #12]	@ (8002950 <sensor_GetPotentiometer+0x14>)
 8002942:	88db      	ldrh	r3, [r3, #6]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	2000021c 	.word	0x2000021c
 8002954:	00000000 	.word	0x00000000

08002958 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 800295c:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <sensor_GetVoltage+0x70>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	ee07 3a90 	vmov	s15, r3
 8002964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002968:	ee17 0a90 	vmov	r0, s15
 800296c:	f7fd fde4 	bl	8000538 <__aeabi_f2d>
 8002970:	a311      	add	r3, pc, #68	@ (adr r3, 80029b8 <sensor_GetVoltage+0x60>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	f7fd fe37 	bl	80005e8 <__aeabi_dmul>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <sensor_GetVoltage+0x74>)
 8002988:	f7fd fe2e 	bl	80005e8 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	a30a      	add	r3, pc, #40	@ (adr r3, 80029c0 <sensor_GetVoltage+0x68>)
 8002996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299a:	f7fd ff4f 	bl	800083c <__aeabi_ddiv>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4610      	mov	r0, r2
 80029a4:	4619      	mov	r1, r3
 80029a6:	f7fe f831 	bl	8000a0c <__aeabi_d2f>
 80029aa:	4603      	mov	r3, r0
 80029ac:	ee07 3a90 	vmov	s15, r3
}
 80029b0:	eeb0 0a67 	vmov.f32	s0, s15
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	66666666 	.word	0x66666666
 80029bc:	400a6666 	.word	0x400a6666
 80029c0:	cccccccd 	.word	0xcccccccd
 80029c4:	40b908ac 	.word	0x40b908ac
 80029c8:	2000021c 	.word	0x2000021c
 80029cc:	40280000 	.word	0x40280000

080029d0 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 80029d4:	4b28      	ldr	r3, [pc, #160]	@ (8002a78 <sensor_GetCurrent+0xa8>)
 80029d6:	885b      	ldrh	r3, [r3, #2]
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e0:	ee17 0a90 	vmov	r0, s15
 80029e4:	f7fd fda8 	bl	8000538 <__aeabi_f2d>
 80029e8:	a31f      	add	r3, pc, #124	@ (adr r3, 8002a68 <sensor_GetCurrent+0x98>)
 80029ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ee:	f7fd fdfb 	bl	80005e8 <__aeabi_dmul>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	4b1f      	ldr	r3, [pc, #124]	@ (8002a7c <sensor_GetCurrent+0xac>)
 8002a00:	f7fd fdf2 	bl	80005e8 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	a318      	add	r3, pc, #96	@ (adr r3, 8002a70 <sensor_GetCurrent+0xa0>)
 8002a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a12:	f7fd ff13 	bl	800083c <__aeabi_ddiv>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <sensor_GetCurrent+0xb0>)
 8002a24:	f7fd fc28 	bl	8000278 <__aeabi_dsub>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	4b13      	ldr	r3, [pc, #76]	@ (8002a84 <sensor_GetCurrent+0xb4>)
 8002a36:	f7fd fdd7 	bl	80005e8 <__aeabi_dmul>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <sensor_GetCurrent+0xb0>)
 8002a48:	f7fd fef8 	bl	800083c <__aeabi_ddiv>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7fd ffda 	bl	8000a0c <__aeabi_d2f>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	ee07 3a90 	vmov	s15, r3
}
 8002a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	f3af 8000 	nop.w
 8002a68:	66666666 	.word	0x66666666
 8002a6c:	400a6666 	.word	0x400a6666
 8002a70:	147ae148 	.word	0x147ae148
 8002a74:	40a4b2ee 	.word	0x40a4b2ee
 8002a78:	2000021c 	.word	0x2000021c
 8002a7c:	408f4000 	.word	0x408f4000
 8002a80:	40040000 	.word	0x40040000
 8002a84:	40140000 	.word	0x40140000

08002a88 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <sensor_GetTemperature+0x30>)
 8002a8e:	891b      	ldrh	r3, [r3, #8]
 8002a90:	ee07 3a90 	vmov	s15, r3
 8002a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a98:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002abc <sensor_GetTemperature+0x34>
 8002a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002ac0 <sensor_GetTemperature+0x38>
 8002aa4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002aa8:	eef0 7a66 	vmov.f32	s15, s13
}
 8002aac:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	2000021c 	.word	0x2000021c
 8002abc:	43a50000 	.word	0x43a50000
 8002ac0:	457ff000 	.word	0x457ff000

08002ac4 <setTimer2>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void setTimer2(uint16_t duration){
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002ace:	4a08      	ldr	r2, [pc, #32]	@ (8002af0 <setTimer2+0x2c>)
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <setTimer2+0x2c>)
 8002ad6:	881a      	ldrh	r2, [r3, #0]
 8002ad8:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <setTimer2+0x30>)
 8002ada:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002adc:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <setTimer2+0x34>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	801a      	strh	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	2000022a 	.word	0x2000022a
 8002af4:	20000228 	.word	0x20000228
 8002af8:	20000226 	.word	0x20000226

08002afc <setTimer1>:

uint16_t flag_timer1 = 0;
uint16_t timer1_counter = 0;
uint16_t timer1_MUL = 0;

void setTimer1(uint16_t duration){
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	80fb      	strh	r3, [r7, #6]
	timer1_MUL = duration/TIMER_CYCLE_2;
 8002b06:	4a08      	ldr	r2, [pc, #32]	@ (8002b28 <setTimer1+0x2c>)
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	8013      	strh	r3, [r2, #0]
	timer1_counter = timer1_MUL;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <setTimer1+0x2c>)
 8002b0e:	881a      	ldrh	r2, [r3, #0]
 8002b10:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <setTimer1+0x30>)
 8002b12:	801a      	strh	r2, [r3, #0]
	flag_timer1 = 0;
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <setTimer1+0x34>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	801a      	strh	r2, [r3, #0]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000230 	.word	0x20000230
 8002b2c:	2000022e 	.word	0x2000022e
 8002b30:	2000022c 	.word	0x2000022c

08002b34 <timer_init>:

void timer_init(){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002b38:	4803      	ldr	r0, [pc, #12]	@ (8002b48 <timer_init+0x14>)
 8002b3a:	f003 fccd 	bl	80064d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002b3e:	4803      	ldr	r0, [pc, #12]	@ (8002b4c <timer_init+0x18>)
 8002b40:	f003 fc62 	bl	8006408 <HAL_TIM_Base_Start>
}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200002d8 	.word	0x200002d8
 8002b4c:	20000290 	.word	0x20000290

08002b50 <HAL_TIM_PeriodElapsedCallback>:
void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b60:	d12b      	bne.n	8002bba <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer2_counter > 0){
 8002b62:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d010      	beq.n	8002b8c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002b6a:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4b14      	ldr	r3, [pc, #80]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002b74:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002b76:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002b84:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002b86:	881a      	ldrh	r2, [r3, #0]
 8002b88:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002b8a:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer1_counter > 0){
 8002b8c:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d010      	beq.n	8002bb6 <HAL_TIM_PeriodElapsedCallback+0x66>
					timer1_counter--;
 8002b94:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002b9e:	801a      	strh	r2, [r3, #0]
					if(timer1_counter == 0) {
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d106      	bne.n	8002bb6 <HAL_TIM_PeriodElapsedCallback+0x66>
						flag_timer1 = 1;
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	801a      	strh	r2, [r3, #0]
						timer1_counter = timer1_MUL;
 8002bae:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002bb0:	881a      	ldrh	r2, [r3, #0]
 8002bb2:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002bb4:	801a      	strh	r2, [r3, #0]
					}
				}
		led7_Scan();
 8002bb6:	f7ff fb51 	bl	800225c <led7_Scan>
	}
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000228 	.word	0x20000228
 8002bc8:	20000226 	.word	0x20000226
 8002bcc:	2000022a 	.word	0x2000022a
 8002bd0:	2000022e 	.word	0x2000022e
 8002bd4:	2000022c 	.word	0x2000022c
 8002bd8:	20000230 	.word	0x20000230

08002bdc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002be0:	4b17      	ldr	r3, [pc, #92]	@ (8002c40 <MX_SPI1_Init+0x64>)
 8002be2:	4a18      	ldr	r2, [pc, #96]	@ (8002c44 <MX_SPI1_Init+0x68>)
 8002be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002be6:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <MX_SPI1_Init+0x64>)
 8002be8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bee:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <MX_SPI1_Init+0x64>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bf4:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <MX_SPI1_Init+0x64>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bfa:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <MX_SPI1_Init+0x64>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c00:	4b0f      	ldr	r3, [pc, #60]	@ (8002c40 <MX_SPI1_Init+0x64>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c06:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <MX_SPI1_Init+0x64>)
 8002c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <MX_SPI1_Init+0x64>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c14:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <MX_SPI1_Init+0x64>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c1a:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <MX_SPI1_Init+0x64>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c20:	4b07      	ldr	r3, [pc, #28]	@ (8002c40 <MX_SPI1_Init+0x64>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c26:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <MX_SPI1_Init+0x64>)
 8002c28:	220a      	movs	r2, #10
 8002c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c2c:	4804      	ldr	r0, [pc, #16]	@ (8002c40 <MX_SPI1_Init+0x64>)
 8002c2e:	f002 fdaf 	bl	8005790 <HAL_SPI_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c38:	f7ff fe52 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000234 	.word	0x20000234
 8002c44:	40013000 	.word	0x40013000

08002c48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	@ 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a19      	ldr	r2, [pc, #100]	@ (8002ccc <HAL_SPI_MspInit+0x84>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d12b      	bne.n	8002cc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	4b18      	ldr	r3, [pc, #96]	@ (8002cd0 <HAL_SPI_MspInit+0x88>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	4a17      	ldr	r2, [pc, #92]	@ (8002cd0 <HAL_SPI_MspInit+0x88>)
 8002c74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <HAL_SPI_MspInit+0x88>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <HAL_SPI_MspInit+0x88>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	4a10      	ldr	r2, [pc, #64]	@ (8002cd0 <HAL_SPI_MspInit+0x88>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c96:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <HAL_SPI_MspInit+0x88>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002ca2:	2338      	movs	r3, #56	@ 0x38
 8002ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4805      	ldr	r0, [pc, #20]	@ (8002cd4 <HAL_SPI_MspInit+0x8c>)
 8002cbe:	f001 fdbb 	bl	8004838 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	3728      	adds	r7, #40	@ 0x28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40013000 	.word	0x40013000
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40020400 	.word	0x40020400

08002cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <HAL_MspInit+0x4c>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8002d24 <HAL_MspInit+0x4c>)
 8002ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cee:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <HAL_MspInit+0x4c>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	603b      	str	r3, [r7, #0]
 8002cfe:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <HAL_MspInit+0x4c>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	4a08      	ldr	r2, [pc, #32]	@ (8002d24 <HAL_MspInit+0x4c>)
 8002d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_MspInit+0x4c>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800

08002d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <NMI_Handler+0x4>

08002d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d34:	bf00      	nop
 8002d36:	e7fd      	b.n	8002d34 <HardFault_Handler+0x4>

08002d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <MemManage_Handler+0x4>

08002d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <BusFault_Handler+0x4>

08002d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <UsageFault_Handler+0x4>

08002d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d7e:	f000 fbf1 	bl	8003564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d8c:	4802      	ldr	r0, [pc, #8]	@ (8002d98 <TIM2_IRQHandler+0x10>)
 8002d8e:	f003 fd35 	bl	80067fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200002d8 	.word	0x200002d8

08002d9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002da0:	4802      	ldr	r0, [pc, #8]	@ (8002dac <USART1_IRQHandler+0x10>)
 8002da2:	f004 fc95 	bl	80076d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200003d0 	.word	0x200003d0

08002db0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002db4:	4802      	ldr	r0, [pc, #8]	@ (8002dc0 <USART2_IRQHandler+0x10>)
 8002db6:	f004 fc8b 	bl	80076d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000414 	.word	0x20000414

08002dc4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002dc8:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <DMA2_Stream0_IRQHandler+0x10>)
 8002dca:	f001 facb 	bl	8004364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200000c8 	.word	0x200000c8

08002dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de0:	4a14      	ldr	r2, [pc, #80]	@ (8002e34 <_sbrk+0x5c>)
 8002de2:	4b15      	ldr	r3, [pc, #84]	@ (8002e38 <_sbrk+0x60>)
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dec:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <_sbrk+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002df4:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <_sbrk+0x64>)
 8002df6:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <_sbrk+0x68>)
 8002df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dfa:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <_sbrk+0x64>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d207      	bcs.n	8002e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e08:	f005 fcbe 	bl	8008788 <__errno>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	220c      	movs	r2, #12
 8002e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	e009      	b.n	8002e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e18:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <_sbrk+0x64>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e1e:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	4a05      	ldr	r2, [pc, #20]	@ (8002e3c <_sbrk+0x64>)
 8002e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20020000 	.word	0x20020000
 8002e38:	00000400 	.word	0x00000400
 8002e3c:	2000028c 	.word	0x2000028c
 8002e40:	200005a8 	.word	0x200005a8

08002e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e48:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <SystemInit+0x20>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	4a05      	ldr	r2, [pc, #20]	@ (8002e64 <SystemInit+0x20>)
 8002e50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e6e:	f107 0308 	add.w	r3, r7, #8
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e7c:	463b      	mov	r3, r7
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e84:	4b1e      	ldr	r3, [pc, #120]	@ (8002f00 <MX_TIM1_Init+0x98>)
 8002e86:	4a1f      	ldr	r2, [pc, #124]	@ (8002f04 <MX_TIM1_Init+0x9c>)
 8002e88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f00 <MX_TIM1_Init+0x98>)
 8002e8c:	2253      	movs	r2, #83	@ 0x53
 8002e8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e90:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <MX_TIM1_Init+0x98>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002e96:	4b1a      	ldr	r3, [pc, #104]	@ (8002f00 <MX_TIM1_Init+0x98>)
 8002e98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e9e:	4b18      	ldr	r3, [pc, #96]	@ (8002f00 <MX_TIM1_Init+0x98>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ea4:	4b16      	ldr	r3, [pc, #88]	@ (8002f00 <MX_TIM1_Init+0x98>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eaa:	4b15      	ldr	r3, [pc, #84]	@ (8002f00 <MX_TIM1_Init+0x98>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002eb0:	4813      	ldr	r0, [pc, #76]	@ (8002f00 <MX_TIM1_Init+0x98>)
 8002eb2:	f003 fa59 	bl	8006368 <HAL_TIM_Base_Init>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002ebc:	f7ff fd10 	bl	80028e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ec4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ec6:	f107 0308 	add.w	r3, r7, #8
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480c      	ldr	r0, [pc, #48]	@ (8002f00 <MX_TIM1_Init+0x98>)
 8002ece:	f003 fe5f 	bl	8006b90 <HAL_TIM_ConfigClockSource>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002ed8:	f7ff fd02 	bl	80028e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002edc:	2300      	movs	r3, #0
 8002ede:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4805      	ldr	r0, [pc, #20]	@ (8002f00 <MX_TIM1_Init+0x98>)
 8002eea:	f004 fa51 	bl	8007390 <HAL_TIMEx_MasterConfigSynchronization>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002ef4:	f7ff fcf4 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ef8:	bf00      	nop
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000290 	.word	0x20000290
 8002f04:	40010000 	.word	0x40010000

08002f08 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f0e:	f107 0308 	add.w	r3, r7, #8
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f1c:	463b      	mov	r3, r7
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f24:	4b1d      	ldr	r3, [pc, #116]	@ (8002f9c <MX_TIM2_Init+0x94>)
 8002f26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f9c <MX_TIM2_Init+0x94>)
 8002f2e:	f240 3247 	movw	r2, #839	@ 0x347
 8002f32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f34:	4b19      	ldr	r3, [pc, #100]	@ (8002f9c <MX_TIM2_Init+0x94>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002f3a:	4b18      	ldr	r3, [pc, #96]	@ (8002f9c <MX_TIM2_Init+0x94>)
 8002f3c:	2263      	movs	r2, #99	@ 0x63
 8002f3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f40:	4b16      	ldr	r3, [pc, #88]	@ (8002f9c <MX_TIM2_Init+0x94>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f46:	4b15      	ldr	r3, [pc, #84]	@ (8002f9c <MX_TIM2_Init+0x94>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f4c:	4813      	ldr	r0, [pc, #76]	@ (8002f9c <MX_TIM2_Init+0x94>)
 8002f4e:	f003 fa0b 	bl	8006368 <HAL_TIM_Base_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002f58:	f7ff fcc2 	bl	80028e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f62:	f107 0308 	add.w	r3, r7, #8
 8002f66:	4619      	mov	r1, r3
 8002f68:	480c      	ldr	r0, [pc, #48]	@ (8002f9c <MX_TIM2_Init+0x94>)
 8002f6a:	f003 fe11 	bl	8006b90 <HAL_TIM_ConfigClockSource>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f74:	f7ff fcb4 	bl	80028e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f80:	463b      	mov	r3, r7
 8002f82:	4619      	mov	r1, r3
 8002f84:	4805      	ldr	r0, [pc, #20]	@ (8002f9c <MX_TIM2_Init+0x94>)
 8002f86:	f004 fa03 	bl	8007390 <HAL_TIMEx_MasterConfigSynchronization>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f90:	f7ff fca6 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f94:	bf00      	nop
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	200002d8 	.word	0x200002d8

08002fa0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fa6:	1d3b      	adds	r3, r7, #4
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
 8002fb4:	615a      	str	r2, [r3, #20]
 8002fb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8003034 <MX_TIM13_Init+0x94>)
 8002fba:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <MX_TIM13_Init+0x98>)
 8002fbc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003034 <MX_TIM13_Init+0x94>)
 8002fc0:	f240 3247 	movw	r2, #839	@ 0x347
 8002fc4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <MX_TIM13_Init+0x94>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002fcc:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <MX_TIM13_Init+0x94>)
 8002fce:	2263      	movs	r2, #99	@ 0x63
 8002fd0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd2:	4b18      	ldr	r3, [pc, #96]	@ (8003034 <MX_TIM13_Init+0x94>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd8:	4b16      	ldr	r3, [pc, #88]	@ (8003034 <MX_TIM13_Init+0x94>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002fde:	4815      	ldr	r0, [pc, #84]	@ (8003034 <MX_TIM13_Init+0x94>)
 8002fe0:	f003 f9c2 	bl	8006368 <HAL_TIM_Base_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002fea:	f7ff fc79 	bl	80028e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002fee:	4811      	ldr	r0, [pc, #68]	@ (8003034 <MX_TIM13_Init+0x94>)
 8002ff0:	f003 fae2 	bl	80065b8 <HAL_TIM_PWM_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002ffa:	f7ff fc71 	bl	80028e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ffe:	2360      	movs	r3, #96	@ 0x60
 8003000:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800300e:	1d3b      	adds	r3, r7, #4
 8003010:	2200      	movs	r2, #0
 8003012:	4619      	mov	r1, r3
 8003014:	4807      	ldr	r0, [pc, #28]	@ (8003034 <MX_TIM13_Init+0x94>)
 8003016:	f003 fcf9 	bl	8006a0c <HAL_TIM_PWM_ConfigChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003020:	f7ff fc5e 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003024:	4803      	ldr	r0, [pc, #12]	@ (8003034 <MX_TIM13_Init+0x94>)
 8003026:	f000 f85b 	bl	80030e0 <HAL_TIM_MspPostInit>

}
 800302a:	bf00      	nop
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000320 	.word	0x20000320
 8003038:	40001c00 	.word	0x40001c00

0800303c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a22      	ldr	r2, [pc, #136]	@ (80030d4 <HAL_TIM_Base_MspInit+0x98>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10e      	bne.n	800306c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	4b21      	ldr	r3, [pc, #132]	@ (80030d8 <HAL_TIM_Base_MspInit+0x9c>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003056:	4a20      	ldr	r2, [pc, #128]	@ (80030d8 <HAL_TIM_Base_MspInit+0x9c>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6453      	str	r3, [r2, #68]	@ 0x44
 800305e:	4b1e      	ldr	r3, [pc, #120]	@ (80030d8 <HAL_TIM_Base_MspInit+0x9c>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800306a:	e02e      	b.n	80030ca <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003074:	d116      	bne.n	80030a4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	4b17      	ldr	r3, [pc, #92]	@ (80030d8 <HAL_TIM_Base_MspInit+0x9c>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	4a16      	ldr	r2, [pc, #88]	@ (80030d8 <HAL_TIM_Base_MspInit+0x9c>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6413      	str	r3, [r2, #64]	@ 0x40
 8003086:	4b14      	ldr	r3, [pc, #80]	@ (80030d8 <HAL_TIM_Base_MspInit+0x9c>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	201c      	movs	r0, #28
 8003098:	f000 ff95 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800309c:	201c      	movs	r0, #28
 800309e:	f000 ffae 	bl	8003ffe <HAL_NVIC_EnableIRQ>
}
 80030a2:	e012      	b.n	80030ca <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0c      	ldr	r2, [pc, #48]	@ (80030dc <HAL_TIM_Base_MspInit+0xa0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10d      	bne.n	80030ca <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b09      	ldr	r3, [pc, #36]	@ (80030d8 <HAL_TIM_Base_MspInit+0x9c>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	4a08      	ldr	r2, [pc, #32]	@ (80030d8 <HAL_TIM_Base_MspInit+0x9c>)
 80030b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030be:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <HAL_TIM_Base_MspInit+0x9c>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40001c00 	.word	0x40001c00

080030e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e8:	f107 030c 	add.w	r3, r7, #12
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a12      	ldr	r2, [pc, #72]	@ (8003148 <HAL_TIM_MspPostInit+0x68>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d11e      	bne.n	8003140 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	4b11      	ldr	r3, [pc, #68]	@ (800314c <HAL_TIM_MspPostInit+0x6c>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	4a10      	ldr	r2, [pc, #64]	@ (800314c <HAL_TIM_MspPostInit+0x6c>)
 800310c:	f043 0320 	orr.w	r3, r3, #32
 8003110:	6313      	str	r3, [r2, #48]	@ 0x30
 8003112:	4b0e      	ldr	r3, [pc, #56]	@ (800314c <HAL_TIM_MspPostInit+0x6c>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800311e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003122:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003130:	2309      	movs	r3, #9
 8003132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003134:	f107 030c 	add.w	r3, r7, #12
 8003138:	4619      	mov	r1, r3
 800313a:	4805      	ldr	r0, [pc, #20]	@ (8003150 <HAL_TIM_MspPostInit+0x70>)
 800313c:	f001 fb7c 	bl	8004838 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003140:	bf00      	nop
 8003142:	3720      	adds	r7, #32
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40001c00 	.word	0x40001c00
 800314c:	40023800 	.word	0x40023800
 8003150:	40021400 	.word	0x40021400

08003154 <uart_init_rs232>:
uint8_t msg[100];

uint8_t receive_buffer1 = 0, receive_buffer2 = 0;
uint8_t check_esp = 0;

void uart_init_rs232(){
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003158:	2201      	movs	r2, #1
 800315a:	4903      	ldr	r1, [pc, #12]	@ (8003168 <uart_init_rs232+0x14>)
 800315c:	4803      	ldr	r0, [pc, #12]	@ (800316c <uart_init_rs232+0x18>)
 800315e:	f004 fa86 	bl	800766e <HAL_UART_Receive_IT>
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	200003cc 	.word	0x200003cc
 800316c:	200003d0 	.word	0x200003d0

08003170 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4907      	ldr	r1, [pc, #28]	@ (8003198 <uart_Rs232SendString+0x28>)
 800317c:	4807      	ldr	r0, [pc, #28]	@ (800319c <uart_Rs232SendString+0x2c>)
 800317e:	f005 fadb 	bl	8008738 <siprintf>
 8003182:	4603      	mov	r3, r0
 8003184:	b29a      	uxth	r2, r3
 8003186:	230a      	movs	r3, #10
 8003188:	4904      	ldr	r1, [pc, #16]	@ (800319c <uart_Rs232SendString+0x2c>)
 800318a:	4805      	ldr	r0, [pc, #20]	@ (80031a0 <uart_Rs232SendString+0x30>)
 800318c:	f004 f9dd 	bl	800754a <HAL_UART_Transmit>
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	080090f0 	.word	0x080090f0
 800319c:	20000368 	.word	0x20000368
 80031a0:	200003d0 	.word	0x200003d0

080031a4 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80031a8:	2201      	movs	r2, #1
 80031aa:	4906      	ldr	r1, [pc, #24]	@ (80031c4 <uart_init_esp+0x20>)
 80031ac:	4806      	ldr	r0, [pc, #24]	@ (80031c8 <uart_init_esp+0x24>)
 80031ae:	f004 fa5e 	bl	800766e <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 80031b2:	2201      	movs	r2, #1
 80031b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80031b8:	4804      	ldr	r0, [pc, #16]	@ (80031cc <uart_init_esp+0x28>)
 80031ba:	f001 fcd9 	bl	8004b70 <HAL_GPIO_WritePin>
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	200003cd 	.word	0x200003cd
 80031c8:	20000414 	.word	0x20000414
 80031cc:	40021400 	.word	0x40021400

080031d0 <HAL_UART_RxCpltCallback>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart2, bytes, size, 10);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a19      	ldr	r2, [pc, #100]	@ (8003244 <HAL_UART_RxCpltCallback+0x74>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d10a      	bne.n	80031f8 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 80031e2:	230a      	movs	r3, #10
 80031e4:	2201      	movs	r2, #1
 80031e6:	4918      	ldr	r1, [pc, #96]	@ (8003248 <HAL_UART_RxCpltCallback+0x78>)
 80031e8:	4818      	ldr	r0, [pc, #96]	@ (800324c <HAL_UART_RxCpltCallback+0x7c>)
 80031ea:	f004 f9ae 	bl	800754a <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80031ee:	2201      	movs	r2, #1
 80031f0:	4915      	ldr	r1, [pc, #84]	@ (8003248 <HAL_UART_RxCpltCallback+0x78>)
 80031f2:	4816      	ldr	r0, [pc, #88]	@ (800324c <HAL_UART_RxCpltCallback+0x7c>)
 80031f4:	f004 fa3b 	bl	800766e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a14      	ldr	r2, [pc, #80]	@ (8003250 <HAL_UART_RxCpltCallback+0x80>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d11b      	bne.n	800323a <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8003202:	4b14      	ldr	r3, [pc, #80]	@ (8003254 <HAL_UART_RxCpltCallback+0x84>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b4f      	cmp	r3, #79	@ 0x4f
 8003208:	d103      	bne.n	8003212 <HAL_UART_RxCpltCallback+0x42>
 800320a:	4b13      	ldr	r3, [pc, #76]	@ (8003258 <HAL_UART_RxCpltCallback+0x88>)
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	e00e      	b.n	8003230 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8003212:	4b10      	ldr	r3, [pc, #64]	@ (8003254 <HAL_UART_RxCpltCallback+0x84>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b61      	cmp	r3, #97	@ 0x61
 8003218:	d103      	bne.n	8003222 <HAL_UART_RxCpltCallback+0x52>
 800321a:	4b10      	ldr	r3, [pc, #64]	@ (800325c <HAL_UART_RxCpltCallback+0x8c>)
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e006      	b.n	8003230 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8003222:	4b0c      	ldr	r3, [pc, #48]	@ (8003254 <HAL_UART_RxCpltCallback+0x84>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b41      	cmp	r3, #65	@ 0x41
 8003228:	d102      	bne.n	8003230 <HAL_UART_RxCpltCallback+0x60>
 800322a:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <HAL_UART_RxCpltCallback+0x8c>)
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8003230:	2201      	movs	r2, #1
 8003232:	4908      	ldr	r1, [pc, #32]	@ (8003254 <HAL_UART_RxCpltCallback+0x84>)
 8003234:	480a      	ldr	r0, [pc, #40]	@ (8003260 <HAL_UART_RxCpltCallback+0x90>)
 8003236:	f004 fa1a 	bl	800766e <HAL_UART_Receive_IT>
	}
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40011000 	.word	0x40011000
 8003248:	200003cc 	.word	0x200003cc
 800324c:	200003d0 	.word	0x200003d0
 8003250:	40004400 	.word	0x40004400
 8003254:	200003cd 	.word	0x200003cd
 8003258:	200003ce 	.word	0x200003ce
 800325c:	20000208 	.word	0x20000208
 8003260:	20000414 	.word	0x20000414

08003264 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003268:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <MX_USART1_UART_Init+0x4c>)
 800326a:	4a12      	ldr	r2, [pc, #72]	@ (80032b4 <MX_USART1_UART_Init+0x50>)
 800326c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800326e:	4b10      	ldr	r3, [pc, #64]	@ (80032b0 <MX_USART1_UART_Init+0x4c>)
 8003270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003276:	4b0e      	ldr	r3, [pc, #56]	@ (80032b0 <MX_USART1_UART_Init+0x4c>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800327c:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <MX_USART1_UART_Init+0x4c>)
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003282:	4b0b      	ldr	r3, [pc, #44]	@ (80032b0 <MX_USART1_UART_Init+0x4c>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003288:	4b09      	ldr	r3, [pc, #36]	@ (80032b0 <MX_USART1_UART_Init+0x4c>)
 800328a:	220c      	movs	r2, #12
 800328c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328e:	4b08      	ldr	r3, [pc, #32]	@ (80032b0 <MX_USART1_UART_Init+0x4c>)
 8003290:	2200      	movs	r2, #0
 8003292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003294:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <MX_USART1_UART_Init+0x4c>)
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800329a:	4805      	ldr	r0, [pc, #20]	@ (80032b0 <MX_USART1_UART_Init+0x4c>)
 800329c:	f004 f908 	bl	80074b0 <HAL_UART_Init>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80032a6:	f7ff fb1b 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200003d0 	.word	0x200003d0
 80032b4:	40011000 	.word	0x40011000

080032b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032bc:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <MX_USART2_UART_Init+0x4c>)
 80032be:	4a12      	ldr	r2, [pc, #72]	@ (8003308 <MX_USART2_UART_Init+0x50>)
 80032c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032c2:	4b10      	ldr	r3, [pc, #64]	@ (8003304 <MX_USART2_UART_Init+0x4c>)
 80032c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <MX_USART2_UART_Init+0x4c>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003304 <MX_USART2_UART_Init+0x4c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <MX_USART2_UART_Init+0x4c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032dc:	4b09      	ldr	r3, [pc, #36]	@ (8003304 <MX_USART2_UART_Init+0x4c>)
 80032de:	220c      	movs	r2, #12
 80032e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032e2:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <MX_USART2_UART_Init+0x4c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e8:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <MX_USART2_UART_Init+0x4c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032ee:	4805      	ldr	r0, [pc, #20]	@ (8003304 <MX_USART2_UART_Init+0x4c>)
 80032f0:	f004 f8de 	bl	80074b0 <HAL_UART_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80032fa:	f7ff faf1 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000414 	.word	0x20000414
 8003308:	40004400 	.word	0x40004400

0800330c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08c      	sub	sp, #48	@ 0x30
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 031c 	add.w	r3, r7, #28
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a3a      	ldr	r2, [pc, #232]	@ (8003414 <HAL_UART_MspInit+0x108>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d135      	bne.n	800339a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	4b39      	ldr	r3, [pc, #228]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	4a38      	ldr	r2, [pc, #224]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 8003338:	f043 0310 	orr.w	r3, r3, #16
 800333c:	6453      	str	r3, [r2, #68]	@ 0x44
 800333e:	4b36      	ldr	r3, [pc, #216]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	4b32      	ldr	r3, [pc, #200]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	4a31      	ldr	r2, [pc, #196]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6313      	str	r3, [r2, #48]	@ 0x30
 800335a:	4b2f      	ldr	r3, [pc, #188]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003366:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800336a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003374:	2303      	movs	r3, #3
 8003376:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003378:	2307      	movs	r3, #7
 800337a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337c:	f107 031c 	add.w	r3, r7, #28
 8003380:	4619      	mov	r1, r3
 8003382:	4826      	ldr	r0, [pc, #152]	@ (800341c <HAL_UART_MspInit+0x110>)
 8003384:	f001 fa58 	bl	8004838 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003388:	2200      	movs	r2, #0
 800338a:	2100      	movs	r1, #0
 800338c:	2025      	movs	r0, #37	@ 0x25
 800338e:	f000 fe1a 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003392:	2025      	movs	r0, #37	@ 0x25
 8003394:	f000 fe33 	bl	8003ffe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003398:	e038      	b.n	800340c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a20      	ldr	r2, [pc, #128]	@ (8003420 <HAL_UART_MspInit+0x114>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d133      	bne.n	800340c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033a4:	2300      	movs	r3, #0
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	4a1a      	ldr	r2, [pc, #104]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 80033ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b4:	4b18      	ldr	r3, [pc, #96]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	4b14      	ldr	r3, [pc, #80]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	4a13      	ldr	r2, [pc, #76]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d0:	4b11      	ldr	r3, [pc, #68]	@ (8003418 <HAL_UART_MspInit+0x10c>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033dc:	230c      	movs	r3, #12
 80033de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	2302      	movs	r3, #2
 80033e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e8:	2303      	movs	r3, #3
 80033ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033ec:	2307      	movs	r3, #7
 80033ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f0:	f107 031c 	add.w	r3, r7, #28
 80033f4:	4619      	mov	r1, r3
 80033f6:	4809      	ldr	r0, [pc, #36]	@ (800341c <HAL_UART_MspInit+0x110>)
 80033f8:	f001 fa1e 	bl	8004838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033fc:	2200      	movs	r2, #0
 80033fe:	2100      	movs	r1, #0
 8003400:	2026      	movs	r0, #38	@ 0x26
 8003402:	f000 fde0 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003406:	2026      	movs	r0, #38	@ 0x26
 8003408:	f000 fdf9 	bl	8003ffe <HAL_NVIC_EnableIRQ>
}
 800340c:	bf00      	nop
 800340e:	3730      	adds	r7, #48	@ 0x30
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40011000 	.word	0x40011000
 8003418:	40023800 	.word	0x40023800
 800341c:	40020000 	.word	0x40020000
 8003420:	40004400 	.word	0x40004400

08003424 <DEC2BCD>:

uint8_t BCD2DEC(uint8_t data) {
	return (data >> 4) * 10 + (data & 0x0f);
}

uint8_t DEC2BCD(uint8_t data) {
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	4a0d      	ldr	r2, [pc, #52]	@ (8003468 <DEC2BCD+0x44>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	08db      	lsrs	r3, r3, #3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	b258      	sxtb	r0, r3
 800343e:	79fa      	ldrb	r2, [r7, #7]
 8003440:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <DEC2BCD+0x44>)
 8003442:	fba3 1302 	umull	r1, r3, r3, r2
 8003446:	08d9      	lsrs	r1, r3, #3
 8003448:	460b      	mov	r3, r1
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	b25b      	sxtb	r3, r3
 8003456:	4303      	orrs	r3, r0
 8003458:	b25b      	sxtb	r3, r3
 800345a:	b2db      	uxtb	r3, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	cccccccd 	.word	0xcccccccd

0800346c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800346c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003470:	480d      	ldr	r0, [pc, #52]	@ (80034a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003472:	490e      	ldr	r1, [pc, #56]	@ (80034ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003474:	4a0e      	ldr	r2, [pc, #56]	@ (80034b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003478:	e002      	b.n	8003480 <LoopCopyDataInit>

0800347a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800347a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800347c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800347e:	3304      	adds	r3, #4

08003480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003484:	d3f9      	bcc.n	800347a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003486:	4a0b      	ldr	r2, [pc, #44]	@ (80034b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003488:	4c0b      	ldr	r4, [pc, #44]	@ (80034b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800348a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800348c:	e001      	b.n	8003492 <LoopFillZerobss>

0800348e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800348e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003490:	3204      	adds	r2, #4

08003492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003494:	d3fb      	bcc.n	800348e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003496:	f7ff fcd5 	bl	8002e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800349a:	f005 f97b 	bl	8008794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800349e:	f7fe ff69 	bl	8002374 <main>
  bx  lr    
 80034a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034ac:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80034b0:	0800c0e8 	.word	0x0800c0e8
  ldr r2, =_sbss
 80034b4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80034b8:	200005a4 	.word	0x200005a4

080034bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034bc:	e7fe      	b.n	80034bc <ADC_IRQHandler>
	...

080034c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003500 <HAL_Init+0x40>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003500 <HAL_Init+0x40>)
 80034ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <HAL_Init+0x40>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003500 <HAL_Init+0x40>)
 80034d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034dc:	4b08      	ldr	r3, [pc, #32]	@ (8003500 <HAL_Init+0x40>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a07      	ldr	r2, [pc, #28]	@ (8003500 <HAL_Init+0x40>)
 80034e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e8:	2003      	movs	r0, #3
 80034ea:	f000 fd61 	bl	8003fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ee:	200f      	movs	r0, #15
 80034f0:	f000 f808 	bl	8003504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034f4:	f7ff fbf0 	bl	8002cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40023c00 	.word	0x40023c00

08003504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800350c:	4b12      	ldr	r3, [pc, #72]	@ (8003558 <HAL_InitTick+0x54>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4b12      	ldr	r3, [pc, #72]	@ (800355c <HAL_InitTick+0x58>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	4619      	mov	r1, r3
 8003516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800351a:	fbb3 f3f1 	udiv	r3, r3, r1
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fd79 	bl	800401a <HAL_SYSTICK_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e00e      	b.n	8003550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b0f      	cmp	r3, #15
 8003536:	d80a      	bhi.n	800354e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003538:	2200      	movs	r2, #0
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	f000 fd41 	bl	8003fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003544:	4a06      	ldr	r2, [pc, #24]	@ (8003560 <HAL_InitTick+0x5c>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e000      	b.n	8003550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000008 	.word	0x20000008
 800355c:	20000010 	.word	0x20000010
 8003560:	2000000c 	.word	0x2000000c

08003564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003568:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <HAL_IncTick+0x20>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <HAL_IncTick+0x24>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4413      	add	r3, r2
 8003574:	4a04      	ldr	r2, [pc, #16]	@ (8003588 <HAL_IncTick+0x24>)
 8003576:	6013      	str	r3, [r2, #0]
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000010 	.word	0x20000010
 8003588:	20000458 	.word	0x20000458

0800358c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  return uwTick;
 8003590:	4b03      	ldr	r3, [pc, #12]	@ (80035a0 <HAL_GetTick+0x14>)
 8003592:	681b      	ldr	r3, [r3, #0]
}
 8003594:	4618      	mov	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	20000458 	.word	0x20000458

080035a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035ac:	f7ff ffee 	bl	800358c <HAL_GetTick>
 80035b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d005      	beq.n	80035ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035be:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <HAL_Delay+0x44>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035ca:	bf00      	nop
 80035cc:	f7ff ffde 	bl	800358c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d8f7      	bhi.n	80035cc <HAL_Delay+0x28>
  {
  }
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000010 	.word	0x20000010

080035ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e033      	b.n	800366a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd fc50 	bl	8000eb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b00      	cmp	r3, #0
 8003628:	d118      	bne.n	800365c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003632:	f023 0302 	bic.w	r3, r3, #2
 8003636:	f043 0202 	orr.w	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa68 	bl	8003b14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	f023 0303 	bic.w	r3, r3, #3
 8003652:	f043 0201 	orr.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	641a      	str	r2, [r3, #64]	@ 0x40
 800365a:	e001      	b.n	8003660 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003668:	7bfb      	ldrb	r3, [r7, #15]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_ADC_Start_DMA+0x1e>
 800368e:	2302      	movs	r3, #2
 8003690:	e0e9      	b.n	8003866 <HAL_ADC_Start_DMA+0x1f2>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d018      	beq.n	80036da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036b8:	4b6d      	ldr	r3, [pc, #436]	@ (8003870 <HAL_ADC_Start_DMA+0x1fc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a6d      	ldr	r2, [pc, #436]	@ (8003874 <HAL_ADC_Start_DMA+0x200>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0c9a      	lsrs	r2, r3, #18
 80036c4:	4613      	mov	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80036cc:	e002      	b.n	80036d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f9      	bne.n	80036ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036e8:	d107      	bne.n	80036fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	f040 80a1 	bne.w	800384c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003734:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003748:	d106      	bne.n	8003758 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	f023 0206 	bic.w	r2, r3, #6
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	645a      	str	r2, [r3, #68]	@ 0x44
 8003756:	e002      	b.n	800375e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003766:	4b44      	ldr	r3, [pc, #272]	@ (8003878 <HAL_ADC_Start_DMA+0x204>)
 8003768:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376e:	4a43      	ldr	r2, [pc, #268]	@ (800387c <HAL_ADC_Start_DMA+0x208>)
 8003770:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003776:	4a42      	ldr	r2, [pc, #264]	@ (8003880 <HAL_ADC_Start_DMA+0x20c>)
 8003778:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377e:	4a41      	ldr	r2, [pc, #260]	@ (8003884 <HAL_ADC_Start_DMA+0x210>)
 8003780:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800378a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800379a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	334c      	adds	r3, #76	@ 0x4c
 80037b6:	4619      	mov	r1, r3
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f000 fce8 	bl	8004190 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d12a      	bne.n	8003822 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003888 <HAL_ADC_Start_DMA+0x214>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d015      	beq.n	8003802 <HAL_ADC_Start_DMA+0x18e>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2c      	ldr	r2, [pc, #176]	@ (800388c <HAL_ADC_Start_DMA+0x218>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d105      	bne.n	80037ec <HAL_ADC_Start_DMA+0x178>
 80037e0:	4b25      	ldr	r3, [pc, #148]	@ (8003878 <HAL_ADC_Start_DMA+0x204>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a27      	ldr	r2, [pc, #156]	@ (8003890 <HAL_ADC_Start_DMA+0x21c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d136      	bne.n	8003864 <HAL_ADC_Start_DMA+0x1f0>
 80037f6:	4b20      	ldr	r3, [pc, #128]	@ (8003878 <HAL_ADC_Start_DMA+0x204>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d130      	bne.n	8003864 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d129      	bne.n	8003864 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	e020      	b.n	8003864 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <HAL_ADC_Start_DMA+0x214>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d11b      	bne.n	8003864 <HAL_ADC_Start_DMA+0x1f0>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d114      	bne.n	8003864 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	e00b      	b.n	8003864 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	f043 0210 	orr.w	r2, r3, #16
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385c:	f043 0201 	orr.w	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000008 	.word	0x20000008
 8003874:	431bde83 	.word	0x431bde83
 8003878:	40012300 	.word	0x40012300
 800387c:	08003d0d 	.word	0x08003d0d
 8003880:	08003dc7 	.word	0x08003dc7
 8003884:	08003de3 	.word	0x08003de3
 8003888:	40012000 	.word	0x40012000
 800388c:	40012100 	.word	0x40012100
 8003890:	40012200 	.word	0x40012200

08003894 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x1c>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e105      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x228>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b09      	cmp	r3, #9
 80038fa:	d925      	bls.n	8003948 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68d9      	ldr	r1, [r3, #12]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	3b1e      	subs	r3, #30
 8003912:	2207      	movs	r2, #7
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43da      	mvns	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	400a      	ands	r2, r1
 8003920:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68d9      	ldr	r1, [r3, #12]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	b29b      	uxth	r3, r3
 8003932:	4618      	mov	r0, r3
 8003934:	4603      	mov	r3, r0
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4403      	add	r3, r0
 800393a:	3b1e      	subs	r3, #30
 800393c:	409a      	lsls	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	e022      	b.n	800398e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6919      	ldr	r1, [r3, #16]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	4613      	mov	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	2207      	movs	r2, #7
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43da      	mvns	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	400a      	ands	r2, r1
 800396a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6919      	ldr	r1, [r3, #16]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	4618      	mov	r0, r3
 800397e:	4603      	mov	r3, r0
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4403      	add	r3, r0
 8003984:	409a      	lsls	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b06      	cmp	r3, #6
 8003994:	d824      	bhi.n	80039e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	3b05      	subs	r3, #5
 80039a8:	221f      	movs	r2, #31
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43da      	mvns	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	400a      	ands	r2, r1
 80039b6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	4618      	mov	r0, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	3b05      	subs	r3, #5
 80039d2:	fa00 f203 	lsl.w	r2, r0, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80039de:	e04c      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b0c      	cmp	r3, #12
 80039e6:	d824      	bhi.n	8003a32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	3b23      	subs	r3, #35	@ 0x23
 80039fa:	221f      	movs	r2, #31
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43da      	mvns	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	400a      	ands	r2, r1
 8003a08:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	4618      	mov	r0, r3
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	3b23      	subs	r3, #35	@ 0x23
 8003a24:	fa00 f203 	lsl.w	r2, r0, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a30:	e023      	b.n	8003a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	3b41      	subs	r3, #65	@ 0x41
 8003a44:	221f      	movs	r2, #31
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	400a      	ands	r2, r1
 8003a52:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	4618      	mov	r0, r3
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3b41      	subs	r3, #65	@ 0x41
 8003a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a7a:	4b22      	ldr	r3, [pc, #136]	@ (8003b04 <HAL_ADC_ConfigChannel+0x234>)
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a21      	ldr	r2, [pc, #132]	@ (8003b08 <HAL_ADC_ConfigChannel+0x238>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d109      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x1cc>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b12      	cmp	r3, #18
 8003a8e:	d105      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a19      	ldr	r2, [pc, #100]	@ (8003b08 <HAL_ADC_ConfigChannel+0x238>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d123      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x21e>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d003      	beq.n	8003ab6 <HAL_ADC_ConfigChannel+0x1e6>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b11      	cmp	r3, #17
 8003ab4:	d11b      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b10      	cmp	r3, #16
 8003ac8:	d111      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003aca:	4b10      	ldr	r3, [pc, #64]	@ (8003b0c <HAL_ADC_ConfigChannel+0x23c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a10      	ldr	r2, [pc, #64]	@ (8003b10 <HAL_ADC_ConfigChannel+0x240>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	0c9a      	lsrs	r2, r3, #18
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ae0:	e002      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f9      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	40012300 	.word	0x40012300
 8003b08:	40012000 	.word	0x40012000
 8003b0c:	20000008 	.word	0x20000008
 8003b10:	431bde83 	.word	0x431bde83

08003b14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b1c:	4b79      	ldr	r3, [pc, #484]	@ (8003d04 <ADC_Init+0x1f0>)
 8003b1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	431a      	orrs	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	021a      	lsls	r2, r3, #8
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6899      	ldr	r1, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba6:	4a58      	ldr	r2, [pc, #352]	@ (8003d08 <ADC_Init+0x1f4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003bba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6899      	ldr	r1, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6899      	ldr	r1, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	e00f      	b.n	8003c12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0202 	bic.w	r2, r2, #2
 8003c20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6899      	ldr	r1, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7e1b      	ldrb	r3, [r3, #24]
 8003c2c:	005a      	lsls	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01b      	beq.n	8003c78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003c5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	035a      	lsls	r2, r3, #13
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	e007      	b.n	8003c88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003c96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	051a      	lsls	r2, r3, #20
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6899      	ldr	r1, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003cca:	025a      	lsls	r2, r3, #9
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6899      	ldr	r1, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	029a      	lsls	r2, r3, #10
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	609a      	str	r2, [r3, #8]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40012300 	.word	0x40012300
 8003d08:	0f000001 	.word	0x0f000001

08003d0c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d13c      	bne.n	8003da0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d12b      	bne.n	8003d98 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d127      	bne.n	8003d98 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d119      	bne.n	8003d98 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0220 	bic.w	r2, r2, #32
 8003d72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	f043 0201 	orr.w	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f7ff fd7b 	bl	8003894 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d9e:	e00e      	b.n	8003dbe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff fd85 	bl	80038bc <HAL_ADC_ErrorCallback>
}
 8003db2:	e004      	b.n	8003dbe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4798      	blx	r3
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f7ff fd67 	bl	80038a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2240      	movs	r2, #64	@ 0x40
 8003df4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	f043 0204 	orr.w	r2, r3, #4
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f7ff fd5a 	bl	80038bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e20:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <__NVIC_SetPriorityGrouping+0x44>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e42:	4a04      	ldr	r2, [pc, #16]	@ (8003e54 <__NVIC_SetPriorityGrouping+0x44>)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	60d3      	str	r3, [r2, #12]
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e5c:	4b04      	ldr	r3, [pc, #16]	@ (8003e70 <__NVIC_GetPriorityGrouping+0x18>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	0a1b      	lsrs	r3, r3, #8
 8003e62:	f003 0307 	and.w	r3, r3, #7
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	db0b      	blt.n	8003e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	f003 021f 	and.w	r2, r3, #31
 8003e8c:	4907      	ldr	r1, [pc, #28]	@ (8003eac <__NVIC_EnableIRQ+0x38>)
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2001      	movs	r0, #1
 8003e96:	fa00 f202 	lsl.w	r2, r0, r2
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	e000e100 	.word	0xe000e100

08003eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	db0a      	blt.n	8003eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	490c      	ldr	r1, [pc, #48]	@ (8003efc <__NVIC_SetPriority+0x4c>)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	0112      	lsls	r2, r2, #4
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ed8:	e00a      	b.n	8003ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	4908      	ldr	r1, [pc, #32]	@ (8003f00 <__NVIC_SetPriority+0x50>)
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	3b04      	subs	r3, #4
 8003ee8:	0112      	lsls	r2, r2, #4
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	440b      	add	r3, r1
 8003eee:	761a      	strb	r2, [r3, #24]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	e000e100 	.word	0xe000e100
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	@ 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f1c3 0307 	rsb	r3, r3, #7
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	bf28      	it	cs
 8003f22:	2304      	movcs	r3, #4
 8003f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d902      	bls.n	8003f34 <NVIC_EncodePriority+0x30>
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3b03      	subs	r3, #3
 8003f32:	e000      	b.n	8003f36 <NVIC_EncodePriority+0x32>
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f38:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43da      	mvns	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	401a      	ands	r2, r3
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	43d9      	mvns	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f5c:	4313      	orrs	r3, r2
         );
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3724      	adds	r7, #36	@ 0x24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f7c:	d301      	bcc.n	8003f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e00f      	b.n	8003fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f82:	4a0a      	ldr	r2, [pc, #40]	@ (8003fac <SysTick_Config+0x40>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f8a:	210f      	movs	r1, #15
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	f7ff ff8e 	bl	8003eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <SysTick_Config+0x40>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f9a:	4b04      	ldr	r3, [pc, #16]	@ (8003fac <SysTick_Config+0x40>)
 8003f9c:	2207      	movs	r2, #7
 8003f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	e000e010 	.word	0xe000e010

08003fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ff29 	bl	8003e10 <__NVIC_SetPriorityGrouping>
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b086      	sub	sp, #24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	4603      	mov	r3, r0
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fd8:	f7ff ff3e 	bl	8003e58 <__NVIC_GetPriorityGrouping>
 8003fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	6978      	ldr	r0, [r7, #20]
 8003fe4:	f7ff ff8e 	bl	8003f04 <NVIC_EncodePriority>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff ff5d 	bl	8003eb0 <__NVIC_SetPriority>
}
 8003ff6:	bf00      	nop
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	4603      	mov	r3, r0
 8004006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff31 	bl	8003e74 <__NVIC_EnableIRQ>
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ffa2 	bl	8003f6c <SysTick_Config>
 8004028:	4603      	mov	r3, r0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004040:	f7ff faa4 	bl	800358c <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e099      	b.n	8004184 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004070:	e00f      	b.n	8004092 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004072:	f7ff fa8b 	bl	800358c <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b05      	cmp	r3, #5
 800407e:	d908      	bls.n	8004092 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2203      	movs	r2, #3
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e078      	b.n	8004184 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e8      	bne.n	8004072 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4b38      	ldr	r3, [pc, #224]	@ (800418c <HAL_DMA_Init+0x158>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d107      	bne.n	80040fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f4:	4313      	orrs	r3, r2
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f023 0307 	bic.w	r3, r3, #7
 8004112:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	2b04      	cmp	r3, #4
 8004124:	d117      	bne.n	8004156 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fb01 	bl	8004740 <DMA_CheckFifoParam>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2240      	movs	r2, #64	@ 0x40
 8004148:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004152:	2301      	movs	r3, #1
 8004154:	e016      	b.n	8004184 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fab8 	bl	80046d4 <DMA_CalcBaseAndBitshift>
 8004164:	4603      	mov	r3, r0
 8004166:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416c:	223f      	movs	r2, #63	@ 0x3f
 800416e:	409a      	lsls	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	f010803f 	.word	0xf010803f

08004190 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_DMA_Start_IT+0x26>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e040      	b.n	8004238 <HAL_DMA_Start_IT+0xa8>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d12f      	bne.n	800422a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2202      	movs	r2, #2
 80041ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fa4a 	bl	8004678 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e8:	223f      	movs	r2, #63	@ 0x3f
 80041ea:	409a      	lsls	r2, r3
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0216 	orr.w	r2, r2, #22
 80041fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0208 	orr.w	r2, r2, #8
 8004216:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e005      	b.n	8004236 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004232:	2302      	movs	r3, #2
 8004234:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004236:	7dfb      	ldrb	r3, [r7, #23]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800424e:	f7ff f99d 	bl	800358c <HAL_GetTick>
 8004252:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d008      	beq.n	8004272 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2280      	movs	r2, #128	@ 0x80
 8004264:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e052      	b.n	8004318 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0216 	bic.w	r2, r2, #22
 8004280:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004290:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d103      	bne.n	80042a2 <HAL_DMA_Abort+0x62>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0208 	bic.w	r2, r2, #8
 80042b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042c2:	e013      	b.n	80042ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042c4:	f7ff f962 	bl	800358c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b05      	cmp	r3, #5
 80042d0:	d90c      	bls.n	80042ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2203      	movs	r2, #3
 80042dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e015      	b.n	8004318 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e4      	bne.n	80042c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fe:	223f      	movs	r2, #63	@ 0x3f
 8004300:	409a      	lsls	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d004      	beq.n	800433e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2280      	movs	r2, #128	@ 0x80
 8004338:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e00c      	b.n	8004358 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2205      	movs	r2, #5
 8004342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004370:	4b8e      	ldr	r3, [pc, #568]	@ (80045ac <HAL_DMA_IRQHandler+0x248>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a8e      	ldr	r2, [pc, #568]	@ (80045b0 <HAL_DMA_IRQHandler+0x24c>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	0a9b      	lsrs	r3, r3, #10
 800437c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004382:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800438e:	2208      	movs	r2, #8
 8004390:	409a      	lsls	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4013      	ands	r3, r2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d01a      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d013      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0204 	bic.w	r2, r2, #4
 80043b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043bc:	2208      	movs	r2, #8
 80043be:	409a      	lsls	r2, r3
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c8:	f043 0201 	orr.w	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d4:	2201      	movs	r2, #1
 80043d6:	409a      	lsls	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d012      	beq.n	8004406 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f2:	2201      	movs	r2, #1
 80043f4:	409a      	lsls	r2, r3
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fe:	f043 0202 	orr.w	r2, r3, #2
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440a:	2204      	movs	r2, #4
 800440c:	409a      	lsls	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d012      	beq.n	800443c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004428:	2204      	movs	r2, #4
 800442a:	409a      	lsls	r2, r3
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004434:	f043 0204 	orr.w	r2, r3, #4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004440:	2210      	movs	r2, #16
 8004442:	409a      	lsls	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d043      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d03c      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800445e:	2210      	movs	r2, #16
 8004460:	409a      	lsls	r2, r3
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d018      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d108      	bne.n	8004494 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d024      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	4798      	blx	r3
 8004492:	e01f      	b.n	80044d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
 80044a4:	e016      	b.n	80044d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d107      	bne.n	80044c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0208 	bic.w	r2, r2, #8
 80044c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d8:	2220      	movs	r2, #32
 80044da:	409a      	lsls	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4013      	ands	r3, r2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 808f 	beq.w	8004604 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8087 	beq.w	8004604 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fa:	2220      	movs	r2, #32
 80044fc:	409a      	lsls	r2, r3
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b05      	cmp	r3, #5
 800450c:	d136      	bne.n	800457c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0216 	bic.w	r2, r2, #22
 800451c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800452c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_DMA_IRQHandler+0x1da>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0208 	bic.w	r2, r2, #8
 800454c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004552:	223f      	movs	r2, #63	@ 0x3f
 8004554:	409a      	lsls	r2, r3
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456e:	2b00      	cmp	r3, #0
 8004570:	d07e      	beq.n	8004670 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
        }
        return;
 800457a:	e079      	b.n	8004670 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01d      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10d      	bne.n	80045b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459c:	2b00      	cmp	r3, #0
 800459e:	d031      	beq.n	8004604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	4798      	blx	r3
 80045a8:	e02c      	b.n	8004604 <HAL_DMA_IRQHandler+0x2a0>
 80045aa:	bf00      	nop
 80045ac:	20000008 	.word	0x20000008
 80045b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d023      	beq.n	8004604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
 80045c4:	e01e      	b.n	8004604 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10f      	bne.n	80045f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0210 	bic.w	r2, r2, #16
 80045e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004608:	2b00      	cmp	r3, #0
 800460a:	d032      	beq.n	8004672 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d022      	beq.n	800465e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2205      	movs	r2, #5
 800461c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	3301      	adds	r3, #1
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	429a      	cmp	r2, r3
 800463a:	d307      	bcc.n	800464c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f2      	bne.n	8004630 <HAL_DMA_IRQHandler+0x2cc>
 800464a:	e000      	b.n	800464e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800464c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4798      	blx	r3
 800466e:	e000      	b.n	8004672 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004670:	bf00      	nop
    }
  }
}
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004694:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b40      	cmp	r3, #64	@ 0x40
 80046a4:	d108      	bne.n	80046b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046b6:	e007      	b.n	80046c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	60da      	str	r2, [r3, #12]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	3b10      	subs	r3, #16
 80046e4:	4a14      	ldr	r2, [pc, #80]	@ (8004738 <DMA_CalcBaseAndBitshift+0x64>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046ee:	4a13      	ldr	r2, [pc, #76]	@ (800473c <DMA_CalcBaseAndBitshift+0x68>)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d909      	bls.n	8004716 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800470a:	f023 0303 	bic.w	r3, r3, #3
 800470e:	1d1a      	adds	r2, r3, #4
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	659a      	str	r2, [r3, #88]	@ 0x58
 8004714:	e007      	b.n	8004726 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	aaaaaaab 	.word	0xaaaaaaab
 800473c:	0800c09c 	.word	0x0800c09c

08004740 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004750:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11f      	bne.n	800479a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b03      	cmp	r3, #3
 800475e:	d856      	bhi.n	800480e <DMA_CheckFifoParam+0xce>
 8004760:	a201      	add	r2, pc, #4	@ (adr r2, 8004768 <DMA_CheckFifoParam+0x28>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	08004779 	.word	0x08004779
 800476c:	0800478b 	.word	0x0800478b
 8004770:	08004779 	.word	0x08004779
 8004774:	0800480f 	.word	0x0800480f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d046      	beq.n	8004812 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004788:	e043      	b.n	8004812 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004792:	d140      	bne.n	8004816 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004798:	e03d      	b.n	8004816 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047a2:	d121      	bne.n	80047e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d837      	bhi.n	800481a <DMA_CheckFifoParam+0xda>
 80047aa:	a201      	add	r2, pc, #4	@ (adr r2, 80047b0 <DMA_CheckFifoParam+0x70>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047c1 	.word	0x080047c1
 80047b4:	080047c7 	.word	0x080047c7
 80047b8:	080047c1 	.word	0x080047c1
 80047bc:	080047d9 	.word	0x080047d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      break;
 80047c4:	e030      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d025      	beq.n	800481e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d6:	e022      	b.n	800481e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047e0:	d11f      	bne.n	8004822 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047e6:	e01c      	b.n	8004822 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d903      	bls.n	80047f6 <DMA_CheckFifoParam+0xb6>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d003      	beq.n	80047fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047f4:	e018      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
      break;
 80047fa:	e015      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004800:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00e      	beq.n	8004826 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	73fb      	strb	r3, [r7, #15]
      break;
 800480c:	e00b      	b.n	8004826 <DMA_CheckFifoParam+0xe6>
      break;
 800480e:	bf00      	nop
 8004810:	e00a      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 8004812:	bf00      	nop
 8004814:	e008      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 8004816:	bf00      	nop
 8004818:	e006      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 800481a:	bf00      	nop
 800481c:	e004      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 800481e:	bf00      	nop
 8004820:	e002      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;   
 8004822:	bf00      	nop
 8004824:	e000      	b.n	8004828 <DMA_CheckFifoParam+0xe8>
      break;
 8004826:	bf00      	nop
    }
  } 
  
  return status; 
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop

08004838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004838:	b480      	push	{r7}
 800483a:	b089      	sub	sp, #36	@ 0x24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e16b      	b.n	8004b2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004854:	2201      	movs	r2, #1
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	429a      	cmp	r2, r3
 800486e:	f040 815a 	bne.w	8004b26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b01      	cmp	r3, #1
 800487c:	d005      	beq.n	800488a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004886:	2b02      	cmp	r3, #2
 8004888:	d130      	bne.n	80048ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	2203      	movs	r2, #3
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048c0:	2201      	movs	r2, #1
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 0201 	and.w	r2, r3, #1
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d017      	beq.n	8004928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	2203      	movs	r2, #3
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d123      	bne.n	800497c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	08da      	lsrs	r2, r3, #3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3208      	adds	r2, #8
 800493c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	220f      	movs	r2, #15
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	08da      	lsrs	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3208      	adds	r2, #8
 8004976:	69b9      	ldr	r1, [r7, #24]
 8004978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	2203      	movs	r2, #3
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 0203 	and.w	r2, r3, #3
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80b4 	beq.w	8004b26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	4b60      	ldr	r3, [pc, #384]	@ (8004b44 <HAL_GPIO_Init+0x30c>)
 80049c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c6:	4a5f      	ldr	r2, [pc, #380]	@ (8004b44 <HAL_GPIO_Init+0x30c>)
 80049c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80049ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004b44 <HAL_GPIO_Init+0x30c>)
 80049d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049da:	4a5b      	ldr	r2, [pc, #364]	@ (8004b48 <HAL_GPIO_Init+0x310>)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	089b      	lsrs	r3, r3, #2
 80049e0:	3302      	adds	r3, #2
 80049e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	220f      	movs	r2, #15
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	43db      	mvns	r3, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4013      	ands	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a52      	ldr	r2, [pc, #328]	@ (8004b4c <HAL_GPIO_Init+0x314>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d02b      	beq.n	8004a5e <HAL_GPIO_Init+0x226>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a51      	ldr	r2, [pc, #324]	@ (8004b50 <HAL_GPIO_Init+0x318>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d025      	beq.n	8004a5a <HAL_GPIO_Init+0x222>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a50      	ldr	r2, [pc, #320]	@ (8004b54 <HAL_GPIO_Init+0x31c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d01f      	beq.n	8004a56 <HAL_GPIO_Init+0x21e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a4f      	ldr	r2, [pc, #316]	@ (8004b58 <HAL_GPIO_Init+0x320>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d019      	beq.n	8004a52 <HAL_GPIO_Init+0x21a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a4e      	ldr	r2, [pc, #312]	@ (8004b5c <HAL_GPIO_Init+0x324>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_GPIO_Init+0x216>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a4d      	ldr	r2, [pc, #308]	@ (8004b60 <HAL_GPIO_Init+0x328>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00d      	beq.n	8004a4a <HAL_GPIO_Init+0x212>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a4c      	ldr	r2, [pc, #304]	@ (8004b64 <HAL_GPIO_Init+0x32c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d007      	beq.n	8004a46 <HAL_GPIO_Init+0x20e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a4b      	ldr	r2, [pc, #300]	@ (8004b68 <HAL_GPIO_Init+0x330>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d101      	bne.n	8004a42 <HAL_GPIO_Init+0x20a>
 8004a3e:	2307      	movs	r3, #7
 8004a40:	e00e      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a42:	2308      	movs	r3, #8
 8004a44:	e00c      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a46:	2306      	movs	r3, #6
 8004a48:	e00a      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a4a:	2305      	movs	r3, #5
 8004a4c:	e008      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a4e:	2304      	movs	r3, #4
 8004a50:	e006      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a52:	2303      	movs	r3, #3
 8004a54:	e004      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e002      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <HAL_GPIO_Init+0x228>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	f002 0203 	and.w	r2, r2, #3
 8004a66:	0092      	lsls	r2, r2, #2
 8004a68:	4093      	lsls	r3, r2
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a70:	4935      	ldr	r1, [pc, #212]	@ (8004b48 <HAL_GPIO_Init+0x310>)
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	089b      	lsrs	r3, r3, #2
 8004a76:	3302      	adds	r3, #2
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b6c <HAL_GPIO_Init+0x334>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	43db      	mvns	r3, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aa2:	4a32      	ldr	r2, [pc, #200]	@ (8004b6c <HAL_GPIO_Init+0x334>)
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004aa8:	4b30      	ldr	r3, [pc, #192]	@ (8004b6c <HAL_GPIO_Init+0x334>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004acc:	4a27      	ldr	r2, [pc, #156]	@ (8004b6c <HAL_GPIO_Init+0x334>)
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ad2:	4b26      	ldr	r3, [pc, #152]	@ (8004b6c <HAL_GPIO_Init+0x334>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	43db      	mvns	r3, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004af6:	4a1d      	ldr	r2, [pc, #116]	@ (8004b6c <HAL_GPIO_Init+0x334>)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004afc:	4b1b      	ldr	r3, [pc, #108]	@ (8004b6c <HAL_GPIO_Init+0x334>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	43db      	mvns	r3, r3
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b20:	4a12      	ldr	r2, [pc, #72]	@ (8004b6c <HAL_GPIO_Init+0x334>)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2b0f      	cmp	r3, #15
 8004b30:	f67f ae90 	bls.w	8004854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	3724      	adds	r7, #36	@ 0x24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40013800 	.word	0x40013800
 8004b4c:	40020000 	.word	0x40020000
 8004b50:	40020400 	.word	0x40020400
 8004b54:	40020800 	.word	0x40020800
 8004b58:	40020c00 	.word	0x40020c00
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	40021400 	.word	0x40021400
 8004b64:	40021800 	.word	0x40021800
 8004b68:	40021c00 	.word	0x40021c00
 8004b6c:	40013c00 	.word	0x40013c00

08004b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	807b      	strh	r3, [r7, #2]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b80:	787b      	ldrb	r3, [r7, #1]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b86:	887a      	ldrh	r2, [r7, #2]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b8c:	e003      	b.n	8004b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b8e:	887b      	ldrh	r3, [r7, #2]
 8004b90:	041a      	lsls	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	619a      	str	r2, [r3, #24]
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bb4:	887a      	ldrh	r2, [r7, #2]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	041a      	lsls	r2, r3, #16
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	43d9      	mvns	r1, r3
 8004bc0:	887b      	ldrh	r3, [r7, #2]
 8004bc2:	400b      	ands	r3, r1
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	619a      	str	r2, [r3, #24]
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
	...

08004bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e12b      	b.n	8004e42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fc fd14 	bl	800162c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2224      	movs	r2, #36	@ 0x24
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f000 fd80 	bl	8005740 <HAL_RCC_GetPCLK1Freq>
 8004c40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4a81      	ldr	r2, [pc, #516]	@ (8004e4c <HAL_I2C_Init+0x274>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d807      	bhi.n	8004c5c <HAL_I2C_Init+0x84>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a80      	ldr	r2, [pc, #512]	@ (8004e50 <HAL_I2C_Init+0x278>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	bf94      	ite	ls
 8004c54:	2301      	movls	r3, #1
 8004c56:	2300      	movhi	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	e006      	b.n	8004c6a <HAL_I2C_Init+0x92>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4a7d      	ldr	r2, [pc, #500]	@ (8004e54 <HAL_I2C_Init+0x27c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	bf94      	ite	ls
 8004c64:	2301      	movls	r3, #1
 8004c66:	2300      	movhi	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0e7      	b.n	8004e42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a78      	ldr	r2, [pc, #480]	@ (8004e58 <HAL_I2C_Init+0x280>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	0c9b      	lsrs	r3, r3, #18
 8004c7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4a6a      	ldr	r2, [pc, #424]	@ (8004e4c <HAL_I2C_Init+0x274>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d802      	bhi.n	8004cac <HAL_I2C_Init+0xd4>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	e009      	b.n	8004cc0 <HAL_I2C_Init+0xe8>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004cb2:	fb02 f303 	mul.w	r3, r2, r3
 8004cb6:	4a69      	ldr	r2, [pc, #420]	@ (8004e5c <HAL_I2C_Init+0x284>)
 8004cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004cd2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	495c      	ldr	r1, [pc, #368]	@ (8004e4c <HAL_I2C_Init+0x274>)
 8004cdc:	428b      	cmp	r3, r1
 8004cde:	d819      	bhi.n	8004d14 <HAL_I2C_Init+0x13c>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1e59      	subs	r1, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cee:	1c59      	adds	r1, r3, #1
 8004cf0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004cf4:	400b      	ands	r3, r1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_I2C_Init+0x138>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1e59      	subs	r1, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d08:	3301      	adds	r3, #1
 8004d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0e:	e051      	b.n	8004db4 <HAL_I2C_Init+0x1dc>
 8004d10:	2304      	movs	r3, #4
 8004d12:	e04f      	b.n	8004db4 <HAL_I2C_Init+0x1dc>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d111      	bne.n	8004d40 <HAL_I2C_Init+0x168>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	1e58      	subs	r0, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	440b      	add	r3, r1
 8004d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2e:	3301      	adds	r3, #1
 8004d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	e012      	b.n	8004d66 <HAL_I2C_Init+0x18e>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	1e58      	subs	r0, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6859      	ldr	r1, [r3, #4]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	0099      	lsls	r1, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d56:	3301      	adds	r3, #1
 8004d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf0c      	ite	eq
 8004d60:	2301      	moveq	r3, #1
 8004d62:	2300      	movne	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_Init+0x196>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e022      	b.n	8004db4 <HAL_I2C_Init+0x1dc>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10e      	bne.n	8004d94 <HAL_I2C_Init+0x1bc>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1e58      	subs	r0, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6859      	ldr	r1, [r3, #4]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	440b      	add	r3, r1
 8004d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d88:	3301      	adds	r3, #1
 8004d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d92:	e00f      	b.n	8004db4 <HAL_I2C_Init+0x1dc>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	1e58      	subs	r0, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	0099      	lsls	r1, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004daa:	3301      	adds	r3, #1
 8004dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	6809      	ldr	r1, [r1, #0]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004de2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6911      	ldr	r1, [r2, #16]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68d2      	ldr	r2, [r2, #12]
 8004dee:	4311      	orrs	r1, r2
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695a      	ldr	r2, [r3, #20]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	000186a0 	.word	0x000186a0
 8004e50:	001e847f 	.word	0x001e847f
 8004e54:	003d08ff 	.word	0x003d08ff
 8004e58:	431bde83 	.word	0x431bde83
 8004e5c:	10624dd3 	.word	0x10624dd3

08004e60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e267      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d075      	beq.n	8004f6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e7e:	4b88      	ldr	r3, [pc, #544]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d00c      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e8a:	4b85      	ldr	r3, [pc, #532]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d112      	bne.n	8004ebc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e96:	4b82      	ldr	r3, [pc, #520]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ea2:	d10b      	bne.n	8004ebc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea4:	4b7e      	ldr	r3, [pc, #504]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d05b      	beq.n	8004f68 <HAL_RCC_OscConfig+0x108>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d157      	bne.n	8004f68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e242      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec4:	d106      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x74>
 8004ec6:	4b76      	ldr	r3, [pc, #472]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a75      	ldr	r2, [pc, #468]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e01d      	b.n	8004f10 <HAL_RCC_OscConfig+0xb0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004edc:	d10c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x98>
 8004ede:	4b70      	ldr	r3, [pc, #448]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a6f      	ldr	r2, [pc, #444]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	4b6d      	ldr	r3, [pc, #436]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a6c      	ldr	r2, [pc, #432]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e00b      	b.n	8004f10 <HAL_RCC_OscConfig+0xb0>
 8004ef8:	4b69      	ldr	r3, [pc, #420]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a68      	ldr	r2, [pc, #416]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b66      	ldr	r3, [pc, #408]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a65      	ldr	r2, [pc, #404]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d013      	beq.n	8004f40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fe fb38 	bl	800358c <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f20:	f7fe fb34 	bl	800358c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	@ 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e207      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f32:	4b5b      	ldr	r3, [pc, #364]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0xc0>
 8004f3e:	e014      	b.n	8004f6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f40:	f7fe fb24 	bl	800358c <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f48:	f7fe fb20 	bl	800358c <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	@ 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e1f3      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f5a:	4b51      	ldr	r3, [pc, #324]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0xe8>
 8004f66:	e000      	b.n	8004f6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d063      	beq.n	800503e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f76:	4b4a      	ldr	r3, [pc, #296]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00b      	beq.n	8004f9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f82:	4b47      	ldr	r3, [pc, #284]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d11c      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f8e:	4b44      	ldr	r3, [pc, #272]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d116      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9a:	4b41      	ldr	r3, [pc, #260]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x152>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d001      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e1c7      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	4937      	ldr	r1, [pc, #220]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc6:	e03a      	b.n	800503e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d020      	beq.n	8005012 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd0:	4b34      	ldr	r3, [pc, #208]	@ (80050a4 <HAL_RCC_OscConfig+0x244>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd6:	f7fe fad9 	bl	800358c <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fde:	f7fe fad5 	bl	800358c <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e1a8      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f0      	beq.n	8004fde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffc:	4b28      	ldr	r3, [pc, #160]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4925      	ldr	r1, [pc, #148]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 800500c:	4313      	orrs	r3, r2
 800500e:	600b      	str	r3, [r1, #0]
 8005010:	e015      	b.n	800503e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005012:	4b24      	ldr	r3, [pc, #144]	@ (80050a4 <HAL_RCC_OscConfig+0x244>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005018:	f7fe fab8 	bl	800358c <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005020:	f7fe fab4 	bl	800358c <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e187      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005032:	4b1b      	ldr	r3, [pc, #108]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d036      	beq.n	80050b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005052:	4b15      	ldr	r3, [pc, #84]	@ (80050a8 <HAL_RCC_OscConfig+0x248>)
 8005054:	2201      	movs	r2, #1
 8005056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005058:	f7fe fa98 	bl	800358c <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005060:	f7fe fa94 	bl	800358c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e167      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005072:	4b0b      	ldr	r3, [pc, #44]	@ (80050a0 <HAL_RCC_OscConfig+0x240>)
 8005074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0f0      	beq.n	8005060 <HAL_RCC_OscConfig+0x200>
 800507e:	e01b      	b.n	80050b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005080:	4b09      	ldr	r3, [pc, #36]	@ (80050a8 <HAL_RCC_OscConfig+0x248>)
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005086:	f7fe fa81 	bl	800358c <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508c:	e00e      	b.n	80050ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800508e:	f7fe fa7d 	bl	800358c <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d907      	bls.n	80050ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e150      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
 80050a0:	40023800 	.word	0x40023800
 80050a4:	42470000 	.word	0x42470000
 80050a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ac:	4b88      	ldr	r3, [pc, #544]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 80050ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1ea      	bne.n	800508e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8097 	beq.w	80051f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ca:	4b81      	ldr	r3, [pc, #516]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10f      	bne.n	80050f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d6:	2300      	movs	r3, #0
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	4b7d      	ldr	r3, [pc, #500]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050de:	4a7c      	ldr	r2, [pc, #496]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 80050e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80050e6:	4b7a      	ldr	r3, [pc, #488]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050f2:	2301      	movs	r3, #1
 80050f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f6:	4b77      	ldr	r3, [pc, #476]	@ (80052d4 <HAL_RCC_OscConfig+0x474>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d118      	bne.n	8005134 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005102:	4b74      	ldr	r3, [pc, #464]	@ (80052d4 <HAL_RCC_OscConfig+0x474>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a73      	ldr	r2, [pc, #460]	@ (80052d4 <HAL_RCC_OscConfig+0x474>)
 8005108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800510c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800510e:	f7fe fa3d 	bl	800358c <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005116:	f7fe fa39 	bl	800358c <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e10c      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005128:	4b6a      	ldr	r3, [pc, #424]	@ (80052d4 <HAL_RCC_OscConfig+0x474>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0f0      	beq.n	8005116 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d106      	bne.n	800514a <HAL_RCC_OscConfig+0x2ea>
 800513c:	4b64      	ldr	r3, [pc, #400]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005140:	4a63      	ldr	r2, [pc, #396]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	6713      	str	r3, [r2, #112]	@ 0x70
 8005148:	e01c      	b.n	8005184 <HAL_RCC_OscConfig+0x324>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b05      	cmp	r3, #5
 8005150:	d10c      	bne.n	800516c <HAL_RCC_OscConfig+0x30c>
 8005152:	4b5f      	ldr	r3, [pc, #380]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005156:	4a5e      	ldr	r2, [pc, #376]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005158:	f043 0304 	orr.w	r3, r3, #4
 800515c:	6713      	str	r3, [r2, #112]	@ 0x70
 800515e:	4b5c      	ldr	r3, [pc, #368]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005162:	4a5b      	ldr	r2, [pc, #364]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	6713      	str	r3, [r2, #112]	@ 0x70
 800516a:	e00b      	b.n	8005184 <HAL_RCC_OscConfig+0x324>
 800516c:	4b58      	ldr	r3, [pc, #352]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005170:	4a57      	ldr	r2, [pc, #348]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005172:	f023 0301 	bic.w	r3, r3, #1
 8005176:	6713      	str	r3, [r2, #112]	@ 0x70
 8005178:	4b55      	ldr	r3, [pc, #340]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517c:	4a54      	ldr	r2, [pc, #336]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 800517e:	f023 0304 	bic.w	r3, r3, #4
 8005182:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d015      	beq.n	80051b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518c:	f7fe f9fe 	bl	800358c <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005192:	e00a      	b.n	80051aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005194:	f7fe f9fa 	bl	800358c <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e0cb      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051aa:	4b49      	ldr	r3, [pc, #292]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0ee      	beq.n	8005194 <HAL_RCC_OscConfig+0x334>
 80051b6:	e014      	b.n	80051e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b8:	f7fe f9e8 	bl	800358c <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c0:	f7fe f9e4 	bl	800358c <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e0b5      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d6:	4b3e      	ldr	r3, [pc, #248]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 80051d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1ee      	bne.n	80051c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d105      	bne.n	80051f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e8:	4b39      	ldr	r3, [pc, #228]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 80051ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ec:	4a38      	ldr	r2, [pc, #224]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 80051ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80a1 	beq.w	8005340 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051fe:	4b34      	ldr	r3, [pc, #208]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	2b08      	cmp	r3, #8
 8005208:	d05c      	beq.n	80052c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d141      	bne.n	8005296 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005212:	4b31      	ldr	r3, [pc, #196]	@ (80052d8 <HAL_RCC_OscConfig+0x478>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005218:	f7fe f9b8 	bl	800358c <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005220:	f7fe f9b4 	bl	800358c <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e087      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005232:	4b27      	ldr	r3, [pc, #156]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f0      	bne.n	8005220 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69da      	ldr	r2, [r3, #28]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	019b      	lsls	r3, r3, #6
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	3b01      	subs	r3, #1
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	491b      	ldr	r1, [pc, #108]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005268:	4b1b      	ldr	r3, [pc, #108]	@ (80052d8 <HAL_RCC_OscConfig+0x478>)
 800526a:	2201      	movs	r2, #1
 800526c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526e:	f7fe f98d 	bl	800358c <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005276:	f7fe f989 	bl	800358c <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e05c      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005288:	4b11      	ldr	r3, [pc, #68]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x416>
 8005294:	e054      	b.n	8005340 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005296:	4b10      	ldr	r3, [pc, #64]	@ (80052d8 <HAL_RCC_OscConfig+0x478>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529c:	f7fe f976 	bl	800358c <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a4:	f7fe f972 	bl	800358c <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e045      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b6:	4b06      	ldr	r3, [pc, #24]	@ (80052d0 <HAL_RCC_OscConfig+0x470>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x444>
 80052c2:	e03d      	b.n	8005340 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d107      	bne.n	80052dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e038      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
 80052d0:	40023800 	.word	0x40023800
 80052d4:	40007000 	.word	0x40007000
 80052d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052dc:	4b1b      	ldr	r3, [pc, #108]	@ (800534c <HAL_RCC_OscConfig+0x4ec>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d028      	beq.n	800533c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d121      	bne.n	800533c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005302:	429a      	cmp	r2, r3
 8005304:	d11a      	bne.n	800533c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800530c:	4013      	ands	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005314:	4293      	cmp	r3, r2
 8005316:	d111      	bne.n	800533c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	3b01      	subs	r3, #1
 8005326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005328:	429a      	cmp	r2, r3
 800532a:	d107      	bne.n	800533c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d001      	beq.n	8005340 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023800 	.word	0x40023800

08005350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0cc      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005364:	4b68      	ldr	r3, [pc, #416]	@ (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d90c      	bls.n	800538c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005372:	4b65      	ldr	r3, [pc, #404]	@ (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800537a:	4b63      	ldr	r3, [pc, #396]	@ (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d001      	beq.n	800538c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0b8      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d020      	beq.n	80053da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053a4:	4b59      	ldr	r3, [pc, #356]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	4a58      	ldr	r2, [pc, #352]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053bc:	4b53      	ldr	r3, [pc, #332]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	4a52      	ldr	r2, [pc, #328]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c8:	4b50      	ldr	r3, [pc, #320]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	494d      	ldr	r1, [pc, #308]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d044      	beq.n	8005470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d107      	bne.n	80053fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ee:	4b47      	ldr	r3, [pc, #284]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d119      	bne.n	800542e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e07f      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d003      	beq.n	800540e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800540a:	2b03      	cmp	r3, #3
 800540c:	d107      	bne.n	800541e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800540e:	4b3f      	ldr	r3, [pc, #252]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e06f      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541e:	4b3b      	ldr	r3, [pc, #236]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e067      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800542e:	4b37      	ldr	r3, [pc, #220]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f023 0203 	bic.w	r2, r3, #3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4934      	ldr	r1, [pc, #208]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	4313      	orrs	r3, r2
 800543e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005440:	f7fe f8a4 	bl	800358c <HAL_GetTick>
 8005444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005446:	e00a      	b.n	800545e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005448:	f7fe f8a0 	bl	800358c <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005456:	4293      	cmp	r3, r2
 8005458:	d901      	bls.n	800545e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e04f      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545e:	4b2b      	ldr	r3, [pc, #172]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 020c 	and.w	r2, r3, #12
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	429a      	cmp	r2, r3
 800546e:	d1eb      	bne.n	8005448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005470:	4b25      	ldr	r3, [pc, #148]	@ (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d20c      	bcs.n	8005498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547e:	4b22      	ldr	r3, [pc, #136]	@ (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005486:	4b20      	ldr	r3, [pc, #128]	@ (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d001      	beq.n	8005498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e032      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a4:	4b19      	ldr	r3, [pc, #100]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	4916      	ldr	r1, [pc, #88]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d009      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054c2:	4b12      	ldr	r3, [pc, #72]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	490e      	ldr	r1, [pc, #56]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054d6:	f000 f821 	bl	800551c <HAL_RCC_GetSysClockFreq>
 80054da:	4602      	mov	r2, r0
 80054dc:	4b0b      	ldr	r3, [pc, #44]	@ (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	490a      	ldr	r1, [pc, #40]	@ (8005510 <HAL_RCC_ClockConfig+0x1c0>)
 80054e8:	5ccb      	ldrb	r3, [r1, r3]
 80054ea:	fa22 f303 	lsr.w	r3, r2, r3
 80054ee:	4a09      	ldr	r2, [pc, #36]	@ (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80054f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054f2:	4b09      	ldr	r3, [pc, #36]	@ (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fe f804 	bl	8003504 <HAL_InitTick>

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40023c00 	.word	0x40023c00
 800550c:	40023800 	.word	0x40023800
 8005510:	0800c084 	.word	0x0800c084
 8005514:	20000008 	.word	0x20000008
 8005518:	2000000c 	.word	0x2000000c

0800551c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800551c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005520:	b094      	sub	sp, #80	@ 0x50
 8005522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	647b      	str	r3, [r7, #68]	@ 0x44
 8005528:	2300      	movs	r3, #0
 800552a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800552c:	2300      	movs	r3, #0
 800552e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005534:	4b79      	ldr	r3, [pc, #484]	@ (800571c <HAL_RCC_GetSysClockFreq+0x200>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 030c 	and.w	r3, r3, #12
 800553c:	2b08      	cmp	r3, #8
 800553e:	d00d      	beq.n	800555c <HAL_RCC_GetSysClockFreq+0x40>
 8005540:	2b08      	cmp	r3, #8
 8005542:	f200 80e1 	bhi.w	8005708 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0x34>
 800554a:	2b04      	cmp	r3, #4
 800554c:	d003      	beq.n	8005556 <HAL_RCC_GetSysClockFreq+0x3a>
 800554e:	e0db      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005550:	4b73      	ldr	r3, [pc, #460]	@ (8005720 <HAL_RCC_GetSysClockFreq+0x204>)
 8005552:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005554:	e0db      	b.n	800570e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005556:	4b73      	ldr	r3, [pc, #460]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x208>)
 8005558:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800555a:	e0d8      	b.n	800570e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800555c:	4b6f      	ldr	r3, [pc, #444]	@ (800571c <HAL_RCC_GetSysClockFreq+0x200>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005564:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005566:	4b6d      	ldr	r3, [pc, #436]	@ (800571c <HAL_RCC_GetSysClockFreq+0x200>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d063      	beq.n	800563a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005572:	4b6a      	ldr	r3, [pc, #424]	@ (800571c <HAL_RCC_GetSysClockFreq+0x200>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	099b      	lsrs	r3, r3, #6
 8005578:	2200      	movs	r2, #0
 800557a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800557c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800557e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005584:	633b      	str	r3, [r7, #48]	@ 0x30
 8005586:	2300      	movs	r3, #0
 8005588:	637b      	str	r3, [r7, #52]	@ 0x34
 800558a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800558e:	4622      	mov	r2, r4
 8005590:	462b      	mov	r3, r5
 8005592:	f04f 0000 	mov.w	r0, #0
 8005596:	f04f 0100 	mov.w	r1, #0
 800559a:	0159      	lsls	r1, r3, #5
 800559c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055a0:	0150      	lsls	r0, r2, #5
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4621      	mov	r1, r4
 80055a8:	1a51      	subs	r1, r2, r1
 80055aa:	6139      	str	r1, [r7, #16]
 80055ac:	4629      	mov	r1, r5
 80055ae:	eb63 0301 	sbc.w	r3, r3, r1
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055c0:	4659      	mov	r1, fp
 80055c2:	018b      	lsls	r3, r1, #6
 80055c4:	4651      	mov	r1, sl
 80055c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055ca:	4651      	mov	r1, sl
 80055cc:	018a      	lsls	r2, r1, #6
 80055ce:	4651      	mov	r1, sl
 80055d0:	ebb2 0801 	subs.w	r8, r2, r1
 80055d4:	4659      	mov	r1, fp
 80055d6:	eb63 0901 	sbc.w	r9, r3, r1
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ee:	4690      	mov	r8, r2
 80055f0:	4699      	mov	r9, r3
 80055f2:	4623      	mov	r3, r4
 80055f4:	eb18 0303 	adds.w	r3, r8, r3
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	462b      	mov	r3, r5
 80055fc:	eb49 0303 	adc.w	r3, r9, r3
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800560e:	4629      	mov	r1, r5
 8005610:	024b      	lsls	r3, r1, #9
 8005612:	4621      	mov	r1, r4
 8005614:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005618:	4621      	mov	r1, r4
 800561a:	024a      	lsls	r2, r1, #9
 800561c:	4610      	mov	r0, r2
 800561e:	4619      	mov	r1, r3
 8005620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005622:	2200      	movs	r2, #0
 8005624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005626:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005628:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800562c:	f7fb fa3e 	bl	8000aac <__aeabi_uldivmod>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4613      	mov	r3, r2
 8005636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005638:	e058      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800563a:	4b38      	ldr	r3, [pc, #224]	@ (800571c <HAL_RCC_GetSysClockFreq+0x200>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	099b      	lsrs	r3, r3, #6
 8005640:	2200      	movs	r2, #0
 8005642:	4618      	mov	r0, r3
 8005644:	4611      	mov	r1, r2
 8005646:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	2300      	movs	r3, #0
 800564e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005650:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005654:	4642      	mov	r2, r8
 8005656:	464b      	mov	r3, r9
 8005658:	f04f 0000 	mov.w	r0, #0
 800565c:	f04f 0100 	mov.w	r1, #0
 8005660:	0159      	lsls	r1, r3, #5
 8005662:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005666:	0150      	lsls	r0, r2, #5
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4641      	mov	r1, r8
 800566e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005672:	4649      	mov	r1, r9
 8005674:	eb63 0b01 	sbc.w	fp, r3, r1
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005684:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005688:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800568c:	ebb2 040a 	subs.w	r4, r2, sl
 8005690:	eb63 050b 	sbc.w	r5, r3, fp
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	00eb      	lsls	r3, r5, #3
 800569e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056a2:	00e2      	lsls	r2, r4, #3
 80056a4:	4614      	mov	r4, r2
 80056a6:	461d      	mov	r5, r3
 80056a8:	4643      	mov	r3, r8
 80056aa:	18e3      	adds	r3, r4, r3
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	464b      	mov	r3, r9
 80056b0:	eb45 0303 	adc.w	r3, r5, r3
 80056b4:	607b      	str	r3, [r7, #4]
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056c2:	4629      	mov	r1, r5
 80056c4:	028b      	lsls	r3, r1, #10
 80056c6:	4621      	mov	r1, r4
 80056c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056cc:	4621      	mov	r1, r4
 80056ce:	028a      	lsls	r2, r1, #10
 80056d0:	4610      	mov	r0, r2
 80056d2:	4619      	mov	r1, r3
 80056d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056d6:	2200      	movs	r2, #0
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	61fa      	str	r2, [r7, #28]
 80056dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056e0:	f7fb f9e4 	bl	8000aac <__aeabi_uldivmod>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4613      	mov	r3, r2
 80056ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056ec:	4b0b      	ldr	r3, [pc, #44]	@ (800571c <HAL_RCC_GetSysClockFreq+0x200>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	3301      	adds	r3, #1
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80056fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005700:	fbb2 f3f3 	udiv	r3, r2, r3
 8005704:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005706:	e002      	b.n	800570e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005708:	4b05      	ldr	r3, [pc, #20]	@ (8005720 <HAL_RCC_GetSysClockFreq+0x204>)
 800570a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800570c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800570e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005710:	4618      	mov	r0, r3
 8005712:	3750      	adds	r7, #80	@ 0x50
 8005714:	46bd      	mov	sp, r7
 8005716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800571a:	bf00      	nop
 800571c:	40023800 	.word	0x40023800
 8005720:	00f42400 	.word	0x00f42400
 8005724:	007a1200 	.word	0x007a1200

08005728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800572c:	4b03      	ldr	r3, [pc, #12]	@ (800573c <HAL_RCC_GetHCLKFreq+0x14>)
 800572e:	681b      	ldr	r3, [r3, #0]
}
 8005730:	4618      	mov	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	20000008 	.word	0x20000008

08005740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005744:	f7ff fff0 	bl	8005728 <HAL_RCC_GetHCLKFreq>
 8005748:	4602      	mov	r2, r0
 800574a:	4b05      	ldr	r3, [pc, #20]	@ (8005760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	0a9b      	lsrs	r3, r3, #10
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	4903      	ldr	r1, [pc, #12]	@ (8005764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005756:	5ccb      	ldrb	r3, [r1, r3]
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800575c:	4618      	mov	r0, r3
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40023800 	.word	0x40023800
 8005764:	0800c094 	.word	0x0800c094

08005768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800576c:	f7ff ffdc 	bl	8005728 <HAL_RCC_GetHCLKFreq>
 8005770:	4602      	mov	r2, r0
 8005772:	4b05      	ldr	r3, [pc, #20]	@ (8005788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	0b5b      	lsrs	r3, r3, #13
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	4903      	ldr	r1, [pc, #12]	@ (800578c <HAL_RCC_GetPCLK2Freq+0x24>)
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005784:	4618      	mov	r0, r3
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40023800 	.word	0x40023800
 800578c:	0800c094 	.word	0x0800c094

08005790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e07b      	b.n	800589a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d108      	bne.n	80057bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057b2:	d009      	beq.n	80057c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	61da      	str	r2, [r3, #28]
 80057ba:	e005      	b.n	80057c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fd fa30 	bl	8002c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584c:	ea42 0103 	orr.w	r1, r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005854:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	0c1b      	lsrs	r3, r3, #16
 8005866:	f003 0104 	and.w	r1, r3, #4
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586e:	f003 0210 	and.w	r2, r3, #16
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005888:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b088      	sub	sp, #32
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	4613      	mov	r3, r2
 80058b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_SPI_Transmit+0x22>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e126      	b.n	8005b12 <HAL_SPI_Transmit+0x270>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058cc:	f7fd fe5e 	bl	800358c <HAL_GetTick>
 80058d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d002      	beq.n	80058e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80058e2:	2302      	movs	r3, #2
 80058e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058e6:	e10b      	b.n	8005b00 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_SPI_Transmit+0x52>
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d102      	bne.n	80058fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058f8:	e102      	b.n	8005b00 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2203      	movs	r2, #3
 80058fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	88fa      	ldrh	r2, [r7, #6]
 8005912:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	88fa      	ldrh	r2, [r7, #6]
 8005918:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005940:	d10f      	bne.n	8005962 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005950:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005960:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596c:	2b40      	cmp	r3, #64	@ 0x40
 800596e:	d007      	beq.n	8005980 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800597e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005988:	d14b      	bne.n	8005a22 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_SPI_Transmit+0xf6>
 8005992:	8afb      	ldrh	r3, [r7, #22]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d13e      	bne.n	8005a16 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599c:	881a      	ldrh	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a8:	1c9a      	adds	r2, r3, #2
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059bc:	e02b      	b.n	8005a16 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d112      	bne.n	80059f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d0:	881a      	ldrh	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059dc:	1c9a      	adds	r2, r3, #2
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80059f0:	e011      	b.n	8005a16 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059f2:	f7fd fdcb 	bl	800358c <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d803      	bhi.n	8005a0a <HAL_SPI_Transmit+0x168>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a08:	d102      	bne.n	8005a10 <HAL_SPI_Transmit+0x16e>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a14:	e074      	b.n	8005b00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1ce      	bne.n	80059be <HAL_SPI_Transmit+0x11c>
 8005a20:	e04c      	b.n	8005abc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_SPI_Transmit+0x18e>
 8005a2a:	8afb      	ldrh	r3, [r7, #22]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d140      	bne.n	8005ab2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	330c      	adds	r3, #12
 8005a3a:	7812      	ldrb	r2, [r2, #0]
 8005a3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a56:	e02c      	b.n	8005ab2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d113      	bne.n	8005a8e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	7812      	ldrb	r2, [r2, #0]
 8005a72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a8c:	e011      	b.n	8005ab2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a8e:	f7fd fd7d 	bl	800358c <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d803      	bhi.n	8005aa6 <HAL_SPI_Transmit+0x204>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d102      	bne.n	8005aac <HAL_SPI_Transmit+0x20a>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d102      	bne.n	8005ab2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ab0:	e026      	b.n	8005b00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1cd      	bne.n	8005a58 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fbcb 	bl	800625c <SPI_EndRxTxTransaction>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10a      	bne.n	8005af0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ada:	2300      	movs	r3, #0
 8005adc:	613b      	str	r3, [r7, #16]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e000      	b.n	8005b00 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005afe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005b10:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b088      	sub	sp, #32
 8005b1e:	af02      	add	r7, sp, #8
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	603b      	str	r3, [r7, #0]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b36:	d112      	bne.n	8005b5e <HAL_SPI_Receive+0x44>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10e      	bne.n	8005b5e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2204      	movs	r2, #4
 8005b44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f8f1 	bl	8005d3c <HAL_SPI_TransmitReceive>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	e0ea      	b.n	8005d34 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_SPI_Receive+0x52>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e0e3      	b.n	8005d34 <HAL_SPI_Receive+0x21a>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b74:	f7fd fd0a 	bl	800358c <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d002      	beq.n	8005b8c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005b86:	2302      	movs	r3, #2
 8005b88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b8a:	e0ca      	b.n	8005d22 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <HAL_SPI_Receive+0x7e>
 8005b92:	88fb      	ldrh	r3, [r7, #6]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d102      	bne.n	8005b9e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b9c:	e0c1      	b.n	8005d22 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2204      	movs	r2, #4
 8005ba2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005be4:	d10f      	bne.n	8005c06 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c10:	2b40      	cmp	r3, #64	@ 0x40
 8005c12:	d007      	beq.n	8005c24 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d162      	bne.n	8005cf2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c2c:	e02e      	b.n	8005c8c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d115      	bne.n	8005c68 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f103 020c 	add.w	r2, r3, #12
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c48:	7812      	ldrb	r2, [r2, #0]
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c66:	e011      	b.n	8005c8c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c68:	f7fd fc90 	bl	800358c <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d803      	bhi.n	8005c80 <HAL_SPI_Receive+0x166>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d102      	bne.n	8005c86 <HAL_SPI_Receive+0x16c>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c8a:	e04a      	b.n	8005d22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1cb      	bne.n	8005c2e <HAL_SPI_Receive+0x114>
 8005c96:	e031      	b.n	8005cfc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d113      	bne.n	8005cce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb0:	b292      	uxth	r2, r2
 8005cb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb8:	1c9a      	adds	r2, r3, #2
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ccc:	e011      	b.n	8005cf2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cce:	f7fd fc5d 	bl	800358c <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d803      	bhi.n	8005ce6 <HAL_SPI_Receive+0x1cc>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce4:	d102      	bne.n	8005cec <HAL_SPI_Receive+0x1d2>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d102      	bne.n	8005cf2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005cf0:	e017      	b.n	8005d22 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1cd      	bne.n	8005c98 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 fa45 	bl	8006190 <SPI_EndRxTransaction>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	75fb      	strb	r3, [r7, #23]
 8005d1e:	e000      	b.n	8005d22 <HAL_SPI_Receive+0x208>
  }

error :
 8005d20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08c      	sub	sp, #48	@ 0x30
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_SPI_TransmitReceive+0x26>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e18a      	b.n	8006078 <HAL_SPI_TransmitReceive+0x33c>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d6a:	f7fd fc0f 	bl	800358c <HAL_GetTick>
 8005d6e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d80:	887b      	ldrh	r3, [r7, #2]
 8005d82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d00f      	beq.n	8005dac <HAL_SPI_TransmitReceive+0x70>
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d92:	d107      	bne.n	8005da4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d103      	bne.n	8005da4 <HAL_SPI_TransmitReceive+0x68>
 8005d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d003      	beq.n	8005dac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
 8005da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005daa:	e15b      	b.n	8006064 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d005      	beq.n	8005dbe <HAL_SPI_TransmitReceive+0x82>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <HAL_SPI_TransmitReceive+0x82>
 8005db8:	887b      	ldrh	r3, [r7, #2]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d103      	bne.n	8005dc6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005dc4:	e14e      	b.n	8006064 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	d003      	beq.n	8005dda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2205      	movs	r2, #5
 8005dd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	887a      	ldrh	r2, [r7, #2]
 8005dea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	887a      	ldrh	r2, [r7, #2]
 8005df0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	887a      	ldrh	r2, [r7, #2]
 8005dfc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	887a      	ldrh	r2, [r7, #2]
 8005e02:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1a:	2b40      	cmp	r3, #64	@ 0x40
 8005e1c:	d007      	beq.n	8005e2e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e36:	d178      	bne.n	8005f2a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <HAL_SPI_TransmitReceive+0x10a>
 8005e40:	8b7b      	ldrh	r3, [r7, #26]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d166      	bne.n	8005f14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e4a:	881a      	ldrh	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e56:	1c9a      	adds	r2, r3, #2
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e6a:	e053      	b.n	8005f14 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d11b      	bne.n	8005eb2 <HAL_SPI_TransmitReceive+0x176>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d016      	beq.n	8005eb2 <HAL_SPI_TransmitReceive+0x176>
 8005e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d113      	bne.n	8005eb2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8e:	881a      	ldrh	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9a:	1c9a      	adds	r2, r3, #2
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d119      	bne.n	8005ef4 <HAL_SPI_TransmitReceive+0x1b8>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d014      	beq.n	8005ef4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed4:	b292      	uxth	r2, r2
 8005ed6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005edc:	1c9a      	adds	r2, r3, #2
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ef4:	f7fd fb4a 	bl	800358c <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d807      	bhi.n	8005f14 <HAL_SPI_TransmitReceive+0x1d8>
 8005f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0a:	d003      	beq.n	8005f14 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005f12:	e0a7      	b.n	8006064 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1a6      	bne.n	8005e6c <HAL_SPI_TransmitReceive+0x130>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1a1      	bne.n	8005e6c <HAL_SPI_TransmitReceive+0x130>
 8005f28:	e07c      	b.n	8006024 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0x1fc>
 8005f32:	8b7b      	ldrh	r3, [r7, #26]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d16b      	bne.n	8006010 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	7812      	ldrb	r2, [r2, #0]
 8005f44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f5e:	e057      	b.n	8006010 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d11c      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x26c>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d017      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x26c>
 8005f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d114      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	330c      	adds	r3, #12
 8005f88:	7812      	ldrb	r2, [r2, #0]
 8005f8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d119      	bne.n	8005fea <HAL_SPI_TransmitReceive+0x2ae>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d014      	beq.n	8005fea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fea:	f7fd facf 	bl	800358c <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d803      	bhi.n	8006002 <HAL_SPI_TransmitReceive+0x2c6>
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006000:	d102      	bne.n	8006008 <HAL_SPI_TransmitReceive+0x2cc>
 8006002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006004:	2b00      	cmp	r3, #0
 8006006:	d103      	bne.n	8006010 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800600e:	e029      	b.n	8006064 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1a2      	bne.n	8005f60 <HAL_SPI_TransmitReceive+0x224>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d19d      	bne.n	8005f60 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006026:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f917 	bl	800625c <SPI_EndRxTxTransaction>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d006      	beq.n	8006042 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006040:	e010      	b.n	8006064 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10b      	bne.n	8006062 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	e000      	b.n	8006064 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006062:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006074:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006078:	4618      	mov	r0, r3
 800607a:	3730      	adds	r7, #48	@ 0x30
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	4613      	mov	r3, r2
 800608e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006090:	f7fd fa7c 	bl	800358c <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006098:	1a9b      	subs	r3, r3, r2
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	4413      	add	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060a0:	f7fd fa74 	bl	800358c <HAL_GetTick>
 80060a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060a6:	4b39      	ldr	r3, [pc, #228]	@ (800618c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	015b      	lsls	r3, r3, #5
 80060ac:	0d1b      	lsrs	r3, r3, #20
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	fb02 f303 	mul.w	r3, r2, r3
 80060b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060b6:	e054      	b.n	8006162 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060be:	d050      	beq.n	8006162 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060c0:	f7fd fa64 	bl	800358c <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d902      	bls.n	80060d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d13d      	bne.n	8006152 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060ee:	d111      	bne.n	8006114 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060f8:	d004      	beq.n	8006104 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006102:	d107      	bne.n	8006114 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800611c:	d10f      	bne.n	800613e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800613c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e017      	b.n	8006182 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	3b01      	subs	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4013      	ands	r3, r2
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	429a      	cmp	r2, r3
 8006170:	bf0c      	ite	eq
 8006172:	2301      	moveq	r3, #1
 8006174:	2300      	movne	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	461a      	mov	r2, r3
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	429a      	cmp	r2, r3
 800617e:	d19b      	bne.n	80060b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000008 	.word	0x20000008

08006190 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061a4:	d111      	bne.n	80061ca <SPI_EndRxTransaction+0x3a>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061ae:	d004      	beq.n	80061ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b8:	d107      	bne.n	80061ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061d2:	d12a      	bne.n	800622a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061dc:	d012      	beq.n	8006204 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2200      	movs	r2, #0
 80061e6:	2180      	movs	r1, #128	@ 0x80
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7ff ff49 	bl	8006080 <SPI_WaitFlagStateUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d02d      	beq.n	8006250 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f8:	f043 0220 	orr.w	r2, r3, #32
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e026      	b.n	8006252 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2200      	movs	r2, #0
 800620c:	2101      	movs	r1, #1
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7ff ff36 	bl	8006080 <SPI_WaitFlagStateUntilTimeout>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d01a      	beq.n	8006250 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621e:	f043 0220 	orr.w	r2, r3, #32
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e013      	b.n	8006252 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2200      	movs	r2, #0
 8006232:	2101      	movs	r1, #1
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7ff ff23 	bl	8006080 <SPI_WaitFlagStateUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006244:	f043 0220 	orr.w	r2, r3, #32
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e000      	b.n	8006252 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b088      	sub	sp, #32
 8006260:	af02      	add	r7, sp, #8
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006268:	4b1b      	ldr	r3, [pc, #108]	@ (80062d8 <SPI_EndRxTxTransaction+0x7c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1b      	ldr	r2, [pc, #108]	@ (80062dc <SPI_EndRxTxTransaction+0x80>)
 800626e:	fba2 2303 	umull	r2, r3, r2, r3
 8006272:	0d5b      	lsrs	r3, r3, #21
 8006274:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006278:	fb02 f303 	mul.w	r3, r2, r3
 800627c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006286:	d112      	bne.n	80062ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2200      	movs	r2, #0
 8006290:	2180      	movs	r1, #128	@ 0x80
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f7ff fef4 	bl	8006080 <SPI_WaitFlagStateUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d016      	beq.n	80062cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a2:	f043 0220 	orr.w	r2, r3, #32
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e00f      	b.n	80062ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00a      	beq.n	80062ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c4:	2b80      	cmp	r3, #128	@ 0x80
 80062c6:	d0f2      	beq.n	80062ae <SPI_EndRxTxTransaction+0x52>
 80062c8:	e000      	b.n	80062cc <SPI_EndRxTxTransaction+0x70>
        break;
 80062ca:	bf00      	nop
  }

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000008 	.word	0x20000008
 80062dc:	165e9f81 	.word	0x165e9f81

080062e0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e034      	b.n	8006360 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7fb f81c 	bl	8001348 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3308      	adds	r3, #8
 8006318:	4619      	mov	r1, r3
 800631a:	4610      	mov	r0, r2
 800631c:	f002 f93c 	bl	8008598 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	461a      	mov	r2, r3
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	f002 f986 	bl	800863c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6858      	ldr	r0, [r3, #4]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	f002 f9bb 	bl	80086b8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	6892      	ldr	r2, [r2, #8]
 800634a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	6892      	ldr	r2, [r2, #8]
 8006356:	f041 0101 	orr.w	r1, r1, #1
 800635a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e041      	b.n	80063fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fc fe54 	bl	800303c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f000 fce2 	bl	8006d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	d001      	beq.n	8006420 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e046      	b.n	80064ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a23      	ldr	r2, [pc, #140]	@ (80064bc <HAL_TIM_Base_Start+0xb4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d022      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800643a:	d01d      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1f      	ldr	r2, [pc, #124]	@ (80064c0 <HAL_TIM_Base_Start+0xb8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d018      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1e      	ldr	r2, [pc, #120]	@ (80064c4 <HAL_TIM_Base_Start+0xbc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d013      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a1c      	ldr	r2, [pc, #112]	@ (80064c8 <HAL_TIM_Base_Start+0xc0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d00e      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1b      	ldr	r2, [pc, #108]	@ (80064cc <HAL_TIM_Base_Start+0xc4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d009      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a19      	ldr	r2, [pc, #100]	@ (80064d0 <HAL_TIM_Base_Start+0xc8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d004      	beq.n	8006478 <HAL_TIM_Base_Start+0x70>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a18      	ldr	r2, [pc, #96]	@ (80064d4 <HAL_TIM_Base_Start+0xcc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d111      	bne.n	800649c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b06      	cmp	r3, #6
 8006488:	d010      	beq.n	80064ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800649a:	e007      	b.n	80064ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40010000 	.word	0x40010000
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40000800 	.word	0x40000800
 80064c8:	40000c00 	.word	0x40000c00
 80064cc:	40010400 	.word	0x40010400
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40001800 	.word	0x40001800

080064d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d001      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e04e      	b.n	800658e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0201 	orr.w	r2, r2, #1
 8006506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a23      	ldr	r2, [pc, #140]	@ (800659c <HAL_TIM_Base_Start_IT+0xc4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d022      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800651a:	d01d      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1f      	ldr	r2, [pc, #124]	@ (80065a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d018      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1e      	ldr	r2, [pc, #120]	@ (80065a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d013      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1c      	ldr	r2, [pc, #112]	@ (80065a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00e      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1b      	ldr	r2, [pc, #108]	@ (80065ac <HAL_TIM_Base_Start_IT+0xd4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d009      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a19      	ldr	r2, [pc, #100]	@ (80065b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d004      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a18      	ldr	r2, [pc, #96]	@ (80065b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d111      	bne.n	800657c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b06      	cmp	r3, #6
 8006568:	d010      	beq.n	800658c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0201 	orr.w	r2, r2, #1
 8006578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657a:	e007      	b.n	800658c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40010000 	.word	0x40010000
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	40010400 	.word	0x40010400
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40001800 	.word	0x40001800

080065b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e041      	b.n	800664e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d106      	bne.n	80065e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f839 	bl	8006656 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3304      	adds	r3, #4
 80065f4:	4619      	mov	r1, r3
 80065f6:	4610      	mov	r0, r2
 80065f8:	f000 fbba 	bl	8006d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d109      	bne.n	8006690 <HAL_TIM_PWM_Start+0x24>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b01      	cmp	r3, #1
 8006686:	bf14      	ite	ne
 8006688:	2301      	movne	r3, #1
 800668a:	2300      	moveq	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	e022      	b.n	80066d6 <HAL_TIM_PWM_Start+0x6a>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b04      	cmp	r3, #4
 8006694:	d109      	bne.n	80066aa <HAL_TIM_PWM_Start+0x3e>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b01      	cmp	r3, #1
 80066a0:	bf14      	ite	ne
 80066a2:	2301      	movne	r3, #1
 80066a4:	2300      	moveq	r3, #0
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	e015      	b.n	80066d6 <HAL_TIM_PWM_Start+0x6a>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d109      	bne.n	80066c4 <HAL_TIM_PWM_Start+0x58>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	bf14      	ite	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	2300      	moveq	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	e008      	b.n	80066d6 <HAL_TIM_PWM_Start+0x6a>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	bf14      	ite	ne
 80066d0:	2301      	movne	r3, #1
 80066d2:	2300      	moveq	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e07c      	b.n	80067d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d104      	bne.n	80066ee <HAL_TIM_PWM_Start+0x82>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066ec:	e013      	b.n	8006716 <HAL_TIM_PWM_Start+0xaa>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	d104      	bne.n	80066fe <HAL_TIM_PWM_Start+0x92>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066fc:	e00b      	b.n	8006716 <HAL_TIM_PWM_Start+0xaa>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b08      	cmp	r3, #8
 8006702:	d104      	bne.n	800670e <HAL_TIM_PWM_Start+0xa2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800670c:	e003      	b.n	8006716 <HAL_TIM_PWM_Start+0xaa>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2201      	movs	r2, #1
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fe10 	bl	8007344 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a2d      	ldr	r2, [pc, #180]	@ (80067e0 <HAL_TIM_PWM_Start+0x174>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d004      	beq.n	8006738 <HAL_TIM_PWM_Start+0xcc>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a2c      	ldr	r2, [pc, #176]	@ (80067e4 <HAL_TIM_PWM_Start+0x178>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d101      	bne.n	800673c <HAL_TIM_PWM_Start+0xd0>
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <HAL_TIM_PWM_Start+0xd2>
 800673c:	2300      	movs	r3, #0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d007      	beq.n	8006752 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006750:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a22      	ldr	r2, [pc, #136]	@ (80067e0 <HAL_TIM_PWM_Start+0x174>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d022      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006764:	d01d      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1f      	ldr	r2, [pc, #124]	@ (80067e8 <HAL_TIM_PWM_Start+0x17c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d018      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a1d      	ldr	r2, [pc, #116]	@ (80067ec <HAL_TIM_PWM_Start+0x180>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a1c      	ldr	r2, [pc, #112]	@ (80067f0 <HAL_TIM_PWM_Start+0x184>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00e      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a16      	ldr	r2, [pc, #88]	@ (80067e4 <HAL_TIM_PWM_Start+0x178>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d009      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a18      	ldr	r2, [pc, #96]	@ (80067f4 <HAL_TIM_PWM_Start+0x188>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d004      	beq.n	80067a2 <HAL_TIM_PWM_Start+0x136>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a16      	ldr	r2, [pc, #88]	@ (80067f8 <HAL_TIM_PWM_Start+0x18c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d111      	bne.n	80067c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b06      	cmp	r3, #6
 80067b2:	d010      	beq.n	80067d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c4:	e007      	b.n	80067d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0201 	orr.w	r2, r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40010000 	.word	0x40010000
 80067e4:	40010400 	.word	0x40010400
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40014000 	.word	0x40014000
 80067f8:	40001800 	.word	0x40001800

080067fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b02      	cmp	r3, #2
 8006810:	d122      	bne.n	8006858 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b02      	cmp	r3, #2
 800681e:	d11b      	bne.n	8006858 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f06f 0202 	mvn.w	r2, #2
 8006828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa77 	bl	8006d32 <HAL_TIM_IC_CaptureCallback>
 8006844:	e005      	b.n	8006852 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fa69 	bl	8006d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fa7a 	bl	8006d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b04      	cmp	r3, #4
 8006864:	d122      	bne.n	80068ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b04      	cmp	r3, #4
 8006872:	d11b      	bne.n	80068ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f06f 0204 	mvn.w	r2, #4
 800687c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2202      	movs	r2, #2
 8006882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fa4d 	bl	8006d32 <HAL_TIM_IC_CaptureCallback>
 8006898:	e005      	b.n	80068a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa3f 	bl	8006d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fa50 	bl	8006d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0308 	and.w	r3, r3, #8
 80068b6:	2b08      	cmp	r3, #8
 80068b8:	d122      	bne.n	8006900 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d11b      	bne.n	8006900 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0208 	mvn.w	r2, #8
 80068d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2204      	movs	r2, #4
 80068d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fa23 	bl	8006d32 <HAL_TIM_IC_CaptureCallback>
 80068ec:	e005      	b.n	80068fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fa15 	bl	8006d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fa26 	bl	8006d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f003 0310 	and.w	r3, r3, #16
 800690a:	2b10      	cmp	r3, #16
 800690c:	d122      	bne.n	8006954 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b10      	cmp	r3, #16
 800691a:	d11b      	bne.n	8006954 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f06f 0210 	mvn.w	r2, #16
 8006924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2208      	movs	r2, #8
 800692a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f9f9 	bl	8006d32 <HAL_TIM_IC_CaptureCallback>
 8006940:	e005      	b.n	800694e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9eb 	bl	8006d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f9fc 	bl	8006d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b01      	cmp	r3, #1
 8006960:	d10e      	bne.n	8006980 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b01      	cmp	r3, #1
 800696e:	d107      	bne.n	8006980 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0201 	mvn.w	r2, #1
 8006978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fc f8e8 	bl	8002b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800698a:	2b80      	cmp	r3, #128	@ 0x80
 800698c:	d10e      	bne.n	80069ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006998:	2b80      	cmp	r3, #128	@ 0x80
 800699a:	d107      	bne.n	80069ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80069a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fd78 	bl	800749c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b6:	2b40      	cmp	r3, #64	@ 0x40
 80069b8:	d10e      	bne.n	80069d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c4:	2b40      	cmp	r3, #64	@ 0x40
 80069c6:	d107      	bne.n	80069d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f9c1 	bl	8006d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d10e      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	2b20      	cmp	r3, #32
 80069f2:	d107      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0220 	mvn.w	r2, #32
 80069fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fd42 	bl	8007488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a04:	bf00      	nop
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e0ae      	b.n	8006b88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b0c      	cmp	r3, #12
 8006a36:	f200 809f 	bhi.w	8006b78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006a75 	.word	0x08006a75
 8006a44:	08006b79 	.word	0x08006b79
 8006a48:	08006b79 	.word	0x08006b79
 8006a4c:	08006b79 	.word	0x08006b79
 8006a50:	08006ab5 	.word	0x08006ab5
 8006a54:	08006b79 	.word	0x08006b79
 8006a58:	08006b79 	.word	0x08006b79
 8006a5c:	08006b79 	.word	0x08006b79
 8006a60:	08006af7 	.word	0x08006af7
 8006a64:	08006b79 	.word	0x08006b79
 8006a68:	08006b79 	.word	0x08006b79
 8006a6c:	08006b79 	.word	0x08006b79
 8006a70:	08006b37 	.word	0x08006b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68b9      	ldr	r1, [r7, #8]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fa18 	bl	8006eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0208 	orr.w	r2, r2, #8
 8006a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0204 	bic.w	r2, r2, #4
 8006a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6999      	ldr	r1, [r3, #24]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	619a      	str	r2, [r3, #24]
      break;
 8006ab2:	e064      	b.n	8006b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fa68 	bl	8006f90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699a      	ldr	r2, [r3, #24]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699a      	ldr	r2, [r3, #24]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6999      	ldr	r1, [r3, #24]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	021a      	lsls	r2, r3, #8
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	619a      	str	r2, [r3, #24]
      break;
 8006af4:	e043      	b.n	8006b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68b9      	ldr	r1, [r7, #8]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fabd 	bl	800707c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69da      	ldr	r2, [r3, #28]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f042 0208 	orr.w	r2, r2, #8
 8006b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0204 	bic.w	r2, r2, #4
 8006b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69d9      	ldr	r1, [r3, #28]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	691a      	ldr	r2, [r3, #16]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	61da      	str	r2, [r3, #28]
      break;
 8006b34:	e023      	b.n	8006b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68b9      	ldr	r1, [r7, #8]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fb11 	bl	8007164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69da      	ldr	r2, [r3, #28]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69d9      	ldr	r1, [r3, #28]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	021a      	lsls	r2, r3, #8
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	61da      	str	r2, [r3, #28]
      break;
 8006b76:	e002      	b.n	8006b7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <HAL_TIM_ConfigClockSource+0x1c>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e0b4      	b.n	8006d16 <HAL_TIM_ConfigClockSource+0x186>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006be4:	d03e      	beq.n	8006c64 <HAL_TIM_ConfigClockSource+0xd4>
 8006be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bea:	f200 8087 	bhi.w	8006cfc <HAL_TIM_ConfigClockSource+0x16c>
 8006bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bf2:	f000 8086 	beq.w	8006d02 <HAL_TIM_ConfigClockSource+0x172>
 8006bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bfa:	d87f      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x16c>
 8006bfc:	2b70      	cmp	r3, #112	@ 0x70
 8006bfe:	d01a      	beq.n	8006c36 <HAL_TIM_ConfigClockSource+0xa6>
 8006c00:	2b70      	cmp	r3, #112	@ 0x70
 8006c02:	d87b      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x16c>
 8006c04:	2b60      	cmp	r3, #96	@ 0x60
 8006c06:	d050      	beq.n	8006caa <HAL_TIM_ConfigClockSource+0x11a>
 8006c08:	2b60      	cmp	r3, #96	@ 0x60
 8006c0a:	d877      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x16c>
 8006c0c:	2b50      	cmp	r3, #80	@ 0x50
 8006c0e:	d03c      	beq.n	8006c8a <HAL_TIM_ConfigClockSource+0xfa>
 8006c10:	2b50      	cmp	r3, #80	@ 0x50
 8006c12:	d873      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x16c>
 8006c14:	2b40      	cmp	r3, #64	@ 0x40
 8006c16:	d058      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x13a>
 8006c18:	2b40      	cmp	r3, #64	@ 0x40
 8006c1a:	d86f      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x16c>
 8006c1c:	2b30      	cmp	r3, #48	@ 0x30
 8006c1e:	d064      	beq.n	8006cea <HAL_TIM_ConfigClockSource+0x15a>
 8006c20:	2b30      	cmp	r3, #48	@ 0x30
 8006c22:	d86b      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x16c>
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d060      	beq.n	8006cea <HAL_TIM_ConfigClockSource+0x15a>
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	d867      	bhi.n	8006cfc <HAL_TIM_ConfigClockSource+0x16c>
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d05c      	beq.n	8006cea <HAL_TIM_ConfigClockSource+0x15a>
 8006c30:	2b10      	cmp	r3, #16
 8006c32:	d05a      	beq.n	8006cea <HAL_TIM_ConfigClockSource+0x15a>
 8006c34:	e062      	b.n	8006cfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	6899      	ldr	r1, [r3, #8]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f000 fb5d 	bl	8007304 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	609a      	str	r2, [r3, #8]
      break;
 8006c62:	e04f      	b.n	8006d04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6818      	ldr	r0, [r3, #0]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	6899      	ldr	r1, [r3, #8]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f000 fb46 	bl	8007304 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689a      	ldr	r2, [r3, #8]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c86:	609a      	str	r2, [r3, #8]
      break;
 8006c88:	e03c      	b.n	8006d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6818      	ldr	r0, [r3, #0]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	6859      	ldr	r1, [r3, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f000 faba 	bl	8007210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2150      	movs	r1, #80	@ 0x50
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 fb13 	bl	80072ce <TIM_ITRx_SetConfig>
      break;
 8006ca8:	e02c      	b.n	8006d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	6859      	ldr	r1, [r3, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f000 fad9 	bl	800726e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2160      	movs	r1, #96	@ 0x60
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fb03 	bl	80072ce <TIM_ITRx_SetConfig>
      break;
 8006cc8:	e01c      	b.n	8006d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	6859      	ldr	r1, [r3, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	f000 fa9a 	bl	8007210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2140      	movs	r1, #64	@ 0x40
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 faf3 	bl	80072ce <TIM_ITRx_SetConfig>
      break;
 8006ce8:	e00c      	b.n	8006d04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	f000 faea 	bl	80072ce <TIM_ITRx_SetConfig>
      break;
 8006cfa:	e003      	b.n	8006d04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006d00:	e000      	b.n	8006d04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a40      	ldr	r2, [pc, #256]	@ (8006e84 <TIM_Base_SetConfig+0x114>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d013      	beq.n	8006db0 <TIM_Base_SetConfig+0x40>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d8e:	d00f      	beq.n	8006db0 <TIM_Base_SetConfig+0x40>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a3d      	ldr	r2, [pc, #244]	@ (8006e88 <TIM_Base_SetConfig+0x118>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00b      	beq.n	8006db0 <TIM_Base_SetConfig+0x40>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a3c      	ldr	r2, [pc, #240]	@ (8006e8c <TIM_Base_SetConfig+0x11c>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d007      	beq.n	8006db0 <TIM_Base_SetConfig+0x40>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a3b      	ldr	r2, [pc, #236]	@ (8006e90 <TIM_Base_SetConfig+0x120>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d003      	beq.n	8006db0 <TIM_Base_SetConfig+0x40>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a3a      	ldr	r2, [pc, #232]	@ (8006e94 <TIM_Base_SetConfig+0x124>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d108      	bne.n	8006dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a2f      	ldr	r2, [pc, #188]	@ (8006e84 <TIM_Base_SetConfig+0x114>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d02b      	beq.n	8006e22 <TIM_Base_SetConfig+0xb2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd0:	d027      	beq.n	8006e22 <TIM_Base_SetConfig+0xb2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8006e88 <TIM_Base_SetConfig+0x118>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d023      	beq.n	8006e22 <TIM_Base_SetConfig+0xb2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8006e8c <TIM_Base_SetConfig+0x11c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d01f      	beq.n	8006e22 <TIM_Base_SetConfig+0xb2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a2a      	ldr	r2, [pc, #168]	@ (8006e90 <TIM_Base_SetConfig+0x120>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d01b      	beq.n	8006e22 <TIM_Base_SetConfig+0xb2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a29      	ldr	r2, [pc, #164]	@ (8006e94 <TIM_Base_SetConfig+0x124>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d017      	beq.n	8006e22 <TIM_Base_SetConfig+0xb2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a28      	ldr	r2, [pc, #160]	@ (8006e98 <TIM_Base_SetConfig+0x128>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <TIM_Base_SetConfig+0xb2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a27      	ldr	r2, [pc, #156]	@ (8006e9c <TIM_Base_SetConfig+0x12c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00f      	beq.n	8006e22 <TIM_Base_SetConfig+0xb2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a26      	ldr	r2, [pc, #152]	@ (8006ea0 <TIM_Base_SetConfig+0x130>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00b      	beq.n	8006e22 <TIM_Base_SetConfig+0xb2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a25      	ldr	r2, [pc, #148]	@ (8006ea4 <TIM_Base_SetConfig+0x134>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d007      	beq.n	8006e22 <TIM_Base_SetConfig+0xb2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a24      	ldr	r2, [pc, #144]	@ (8006ea8 <TIM_Base_SetConfig+0x138>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d003      	beq.n	8006e22 <TIM_Base_SetConfig+0xb2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a23      	ldr	r2, [pc, #140]	@ (8006eac <TIM_Base_SetConfig+0x13c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d108      	bne.n	8006e34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006e84 <TIM_Base_SetConfig+0x114>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_Base_SetConfig+0xf8>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a0c      	ldr	r2, [pc, #48]	@ (8006e94 <TIM_Base_SetConfig+0x124>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d103      	bne.n	8006e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	691a      	ldr	r2, [r3, #16]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	615a      	str	r2, [r3, #20]
}
 8006e76:	bf00      	nop
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	40010000 	.word	0x40010000
 8006e88:	40000400 	.word	0x40000400
 8006e8c:	40000800 	.word	0x40000800
 8006e90:	40000c00 	.word	0x40000c00
 8006e94:	40010400 	.word	0x40010400
 8006e98:	40014000 	.word	0x40014000
 8006e9c:	40014400 	.word	0x40014400
 8006ea0:	40014800 	.word	0x40014800
 8006ea4:	40001800 	.word	0x40001800
 8006ea8:	40001c00 	.word	0x40001c00
 8006eac:	40002000 	.word	0x40002000

08006eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f023 0201 	bic.w	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0303 	bic.w	r3, r3, #3
 8006ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f023 0302 	bic.w	r3, r3, #2
 8006ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a20      	ldr	r2, [pc, #128]	@ (8006f88 <TIM_OC1_SetConfig+0xd8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d003      	beq.n	8006f14 <TIM_OC1_SetConfig+0x64>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006f8c <TIM_OC1_SetConfig+0xdc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d10c      	bne.n	8006f2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f023 0308 	bic.w	r3, r3, #8
 8006f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f023 0304 	bic.w	r3, r3, #4
 8006f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a15      	ldr	r2, [pc, #84]	@ (8006f88 <TIM_OC1_SetConfig+0xd8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d003      	beq.n	8006f3e <TIM_OC1_SetConfig+0x8e>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a14      	ldr	r2, [pc, #80]	@ (8006f8c <TIM_OC1_SetConfig+0xdc>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d111      	bne.n	8006f62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	621a      	str	r2, [r3, #32]
}
 8006f7c:	bf00      	nop
 8006f7e:	371c      	adds	r7, #28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	40010000 	.word	0x40010000
 8006f8c:	40010400 	.word	0x40010400

08006f90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f023 0210 	bic.w	r2, r3, #16
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f023 0320 	bic.w	r3, r3, #32
 8006fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a22      	ldr	r2, [pc, #136]	@ (8007074 <TIM_OC2_SetConfig+0xe4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d003      	beq.n	8006ff8 <TIM_OC2_SetConfig+0x68>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a21      	ldr	r2, [pc, #132]	@ (8007078 <TIM_OC2_SetConfig+0xe8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d10d      	bne.n	8007014 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	011b      	lsls	r3, r3, #4
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4313      	orrs	r3, r2
 800700a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007012:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a17      	ldr	r2, [pc, #92]	@ (8007074 <TIM_OC2_SetConfig+0xe4>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d003      	beq.n	8007024 <TIM_OC2_SetConfig+0x94>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a16      	ldr	r2, [pc, #88]	@ (8007078 <TIM_OC2_SetConfig+0xe8>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d113      	bne.n	800704c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800702a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	4313      	orrs	r3, r2
 800703e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	621a      	str	r2, [r3, #32]
}
 8007066:	bf00      	nop
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	40010000 	.word	0x40010000
 8007078:	40010400 	.word	0x40010400

0800707c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0303 	bic.w	r3, r3, #3
 80070b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a21      	ldr	r2, [pc, #132]	@ (800715c <TIM_OC3_SetConfig+0xe0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d003      	beq.n	80070e2 <TIM_OC3_SetConfig+0x66>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a20      	ldr	r2, [pc, #128]	@ (8007160 <TIM_OC3_SetConfig+0xe4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d10d      	bne.n	80070fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a16      	ldr	r2, [pc, #88]	@ (800715c <TIM_OC3_SetConfig+0xe0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d003      	beq.n	800710e <TIM_OC3_SetConfig+0x92>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a15      	ldr	r2, [pc, #84]	@ (8007160 <TIM_OC3_SetConfig+0xe4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d113      	bne.n	8007136 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800711c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	621a      	str	r2, [r3, #32]
}
 8007150:	bf00      	nop
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	40010000 	.word	0x40010000
 8007160:	40010400 	.word	0x40010400

08007164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800719a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	031b      	lsls	r3, r3, #12
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a12      	ldr	r2, [pc, #72]	@ (8007208 <TIM_OC4_SetConfig+0xa4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d003      	beq.n	80071cc <TIM_OC4_SetConfig+0x68>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a11      	ldr	r2, [pc, #68]	@ (800720c <TIM_OC4_SetConfig+0xa8>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d109      	bne.n	80071e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	019b      	lsls	r3, r3, #6
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	621a      	str	r2, [r3, #32]
}
 80071fa:	bf00      	nop
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40010000 	.word	0x40010000
 800720c:	40010400 	.word	0x40010400

08007210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f023 0201 	bic.w	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800723a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f023 030a 	bic.w	r3, r3, #10
 800724c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	4313      	orrs	r3, r2
 8007254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	621a      	str	r2, [r3, #32]
}
 8007262:	bf00      	nop
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800726e:	b480      	push	{r7}
 8007270:	b087      	sub	sp, #28
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f023 0210 	bic.w	r2, r3, #16
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007298:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	031b      	lsls	r3, r3, #12
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	011b      	lsls	r3, r3, #4
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	621a      	str	r2, [r3, #32]
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b085      	sub	sp, #20
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f043 0307 	orr.w	r3, r3, #7
 80072f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	609a      	str	r2, [r3, #8]
}
 80072f8:	bf00      	nop
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800731e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	021a      	lsls	r2, r3, #8
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	431a      	orrs	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4313      	orrs	r3, r2
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	4313      	orrs	r3, r2
 8007330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	609a      	str	r2, [r3, #8]
}
 8007338:	bf00      	nop
 800733a:	371c      	adds	r7, #28
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f003 031f 	and.w	r3, r3, #31
 8007356:	2201      	movs	r2, #1
 8007358:	fa02 f303 	lsl.w	r3, r2, r3
 800735c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a1a      	ldr	r2, [r3, #32]
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	43db      	mvns	r3, r3
 8007366:	401a      	ands	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6a1a      	ldr	r2, [r3, #32]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f003 031f 	and.w	r3, r3, #31
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	fa01 f303 	lsl.w	r3, r1, r3
 800737c:	431a      	orrs	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	621a      	str	r2, [r3, #32]
}
 8007382:	bf00      	nop
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
	...

08007390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073a4:	2302      	movs	r3, #2
 80073a6:	e05a      	b.n	800745e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a21      	ldr	r2, [pc, #132]	@ (800746c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d022      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f4:	d01d      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007470 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d018      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a1b      	ldr	r2, [pc, #108]	@ (8007474 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a1a      	ldr	r2, [pc, #104]	@ (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00e      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a18      	ldr	r2, [pc, #96]	@ (800747c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a17      	ldr	r2, [pc, #92]	@ (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a15      	ldr	r2, [pc, #84]	@ (8007484 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d10c      	bne.n	800744c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	4313      	orrs	r3, r2
 8007442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	40010000 	.word	0x40010000
 8007470:	40000400 	.word	0x40000400
 8007474:	40000800 	.word	0x40000800
 8007478:	40000c00 	.word	0x40000c00
 800747c:	40010400 	.word	0x40010400
 8007480:	40014000 	.word	0x40014000
 8007484:	40001800 	.word	0x40001800

08007488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e03f      	b.n	8007542 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fb ff18 	bl	800330c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2224      	movs	r2, #36	@ 0x24
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fddb 	bl	80080b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	695a      	ldr	r2, [r3, #20]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b08a      	sub	sp, #40	@ 0x28
 800754e:	af02      	add	r7, sp, #8
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	603b      	str	r3, [r7, #0]
 8007556:	4613      	mov	r3, r2
 8007558:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b20      	cmp	r3, #32
 8007568:	d17c      	bne.n	8007664 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HAL_UART_Transmit+0x2c>
 8007570:	88fb      	ldrh	r3, [r7, #6]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e075      	b.n	8007666 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_UART_Transmit+0x3e>
 8007584:	2302      	movs	r3, #2
 8007586:	e06e      	b.n	8007666 <HAL_UART_Transmit+0x11c>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2221      	movs	r2, #33	@ 0x21
 800759a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800759e:	f7fb fff5 	bl	800358c <HAL_GetTick>
 80075a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	88fa      	ldrh	r2, [r7, #6]
 80075a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	88fa      	ldrh	r2, [r7, #6]
 80075ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075b8:	d108      	bne.n	80075cc <HAL_UART_Transmit+0x82>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d104      	bne.n	80075cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	61bb      	str	r3, [r7, #24]
 80075ca:	e003      	b.n	80075d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075d0:	2300      	movs	r3, #0
 80075d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80075dc:	e02a      	b.n	8007634 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2200      	movs	r2, #0
 80075e6:	2180      	movs	r1, #128	@ 0x80
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 fb1f 	bl	8007c2c <UART_WaitOnFlagUntilTimeout>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e036      	b.n	8007666 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800760c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	3302      	adds	r3, #2
 8007612:	61bb      	str	r3, [r7, #24]
 8007614:	e007      	b.n	8007626 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	3301      	adds	r3, #1
 8007624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1cf      	bne.n	80075de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2200      	movs	r2, #0
 8007646:	2140      	movs	r1, #64	@ 0x40
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 faef 	bl	8007c2c <UART_WaitOnFlagUntilTimeout>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e006      	b.n	8007666 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	e000      	b.n	8007666 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007664:	2302      	movs	r3, #2
  }
}
 8007666:	4618      	mov	r0, r3
 8007668:	3720      	adds	r7, #32
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	60b9      	str	r1, [r7, #8]
 8007678:	4613      	mov	r3, r2
 800767a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b20      	cmp	r3, #32
 8007686:	d11d      	bne.n	80076c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <HAL_UART_Receive_IT+0x26>
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e016      	b.n	80076c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d101      	bne.n	80076a6 <HAL_UART_Receive_IT+0x38>
 80076a2:	2302      	movs	r3, #2
 80076a4:	e00f      	b.n	80076c6 <HAL_UART_Receive_IT+0x58>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076b4:	88fb      	ldrh	r3, [r7, #6]
 80076b6:	461a      	mov	r2, r3
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fb24 	bl	8007d08 <UART_Start_Receive_IT>
 80076c0:	4603      	mov	r3, r0
 80076c2:	e000      	b.n	80076c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80076c4:	2302      	movs	r3, #2
  }
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b0ba      	sub	sp, #232	@ 0xe8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800770e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10f      	bne.n	8007736 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b00      	cmp	r3, #0
 8007720:	d009      	beq.n	8007736 <HAL_UART_IRQHandler+0x66>
 8007722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fc03 	bl	8007f3a <UART_Receive_IT>
      return;
 8007734:	e256      	b.n	8007be4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 80de 	beq.w	80078fc <HAL_UART_IRQHandler+0x22c>
 8007740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d106      	bne.n	800775a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800774c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007750:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 80d1 	beq.w	80078fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800775a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00b      	beq.n	800777e <HAL_UART_IRQHandler+0xae>
 8007766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800776a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800776e:	2b00      	cmp	r3, #0
 8007770:	d005      	beq.n	800777e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007776:	f043 0201 	orr.w	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800777e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00b      	beq.n	80077a2 <HAL_UART_IRQHandler+0xd2>
 800778a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	d005      	beq.n	80077a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800779a:	f043 0202 	orr.w	r2, r3, #2
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00b      	beq.n	80077c6 <HAL_UART_IRQHandler+0xf6>
 80077ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d005      	beq.n	80077c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077be:	f043 0204 	orr.w	r2, r3, #4
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ca:	f003 0308 	and.w	r3, r3, #8
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d011      	beq.n	80077f6 <HAL_UART_IRQHandler+0x126>
 80077d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d105      	bne.n	80077ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d005      	beq.n	80077f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ee:	f043 0208 	orr.w	r2, r3, #8
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 81ed 	beq.w	8007bda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	2b00      	cmp	r3, #0
 800780a:	d008      	beq.n	800781e <HAL_UART_IRQHandler+0x14e>
 800780c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007810:	f003 0320 	and.w	r3, r3, #32
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fb8e 	bl	8007f3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007828:	2b40      	cmp	r3, #64	@ 0x40
 800782a:	bf0c      	ite	eq
 800782c:	2301      	moveq	r3, #1
 800782e:	2300      	movne	r3, #0
 8007830:	b2db      	uxtb	r3, r3
 8007832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783a:	f003 0308 	and.w	r3, r3, #8
 800783e:	2b00      	cmp	r3, #0
 8007840:	d103      	bne.n	800784a <HAL_UART_IRQHandler+0x17a>
 8007842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007846:	2b00      	cmp	r3, #0
 8007848:	d04f      	beq.n	80078ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fa96 	bl	8007d7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800785a:	2b40      	cmp	r3, #64	@ 0x40
 800785c:	d141      	bne.n	80078e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3314      	adds	r3, #20
 8007864:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007868:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800786c:	e853 3f00 	ldrex	r3, [r3]
 8007870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007874:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800787c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3314      	adds	r3, #20
 8007886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800788a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800788e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007896:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80078a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1d9      	bne.n	800785e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d013      	beq.n	80078da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b6:	4a7d      	ldr	r2, [pc, #500]	@ (8007aac <HAL_UART_IRQHandler+0x3dc>)
 80078b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fc fd2e 	bl	8004320 <HAL_DMA_Abort_IT>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d016      	beq.n	80078f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80078d4:	4610      	mov	r0, r2
 80078d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d8:	e00e      	b.n	80078f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f990 	bl	8007c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e0:	e00a      	b.n	80078f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f98c 	bl	8007c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e8:	e006      	b.n	80078f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f988 	bl	8007c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80078f6:	e170      	b.n	8007bda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f8:	bf00      	nop
    return;
 80078fa:	e16e      	b.n	8007bda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007900:	2b01      	cmp	r3, #1
 8007902:	f040 814a 	bne.w	8007b9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800790a:	f003 0310 	and.w	r3, r3, #16
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 8143 	beq.w	8007b9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007918:	f003 0310 	and.w	r3, r3, #16
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 813c 	beq.w	8007b9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007922:	2300      	movs	r3, #0
 8007924:	60bb      	str	r3, [r7, #8]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60bb      	str	r3, [r7, #8]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	60bb      	str	r3, [r7, #8]
 8007936:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007942:	2b40      	cmp	r3, #64	@ 0x40
 8007944:	f040 80b4 	bne.w	8007ab0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 8140 	beq.w	8007bde <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007966:	429a      	cmp	r2, r3
 8007968:	f080 8139 	bcs.w	8007bde <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007972:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800797e:	f000 8088 	beq.w	8007a92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	330c      	adds	r3, #12
 8007988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800799c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	330c      	adds	r3, #12
 80079aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80079ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80079ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80079c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1d9      	bne.n	8007982 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3314      	adds	r3, #20
 80079d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3314      	adds	r3, #20
 80079ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80079f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e1      	bne.n	80079ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3314      	adds	r3, #20
 8007a10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3314      	adds	r3, #20
 8007a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e3      	bne.n	8007a0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	330c      	adds	r3, #12
 8007a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a5a:	e853 3f00 	ldrex	r3, [r3]
 8007a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a62:	f023 0310 	bic.w	r3, r3, #16
 8007a66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	330c      	adds	r3, #12
 8007a70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007a74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007a76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e3      	bne.n	8007a50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fc fbd7 	bl	8004240 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f8b6 	bl	8007c14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007aa8:	e099      	b.n	8007bde <HAL_UART_IRQHandler+0x50e>
 8007aaa:	bf00      	nop
 8007aac:	08007e43 	.word	0x08007e43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 808b 	beq.w	8007be2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 8086 	beq.w	8007be2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	330c      	adds	r3, #12
 8007adc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	330c      	adds	r3, #12
 8007af6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007afa:	647a      	str	r2, [r7, #68]	@ 0x44
 8007afc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e3      	bne.n	8007ad6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3314      	adds	r3, #20
 8007b14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	f023 0301 	bic.w	r3, r3, #1
 8007b24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3314      	adds	r3, #20
 8007b2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b32:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e3      	bne.n	8007b0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	330c      	adds	r3, #12
 8007b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0310 	bic.w	r3, r3, #16
 8007b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	330c      	adds	r3, #12
 8007b74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007b78:	61fa      	str	r2, [r7, #28]
 8007b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	69b9      	ldr	r1, [r7, #24]
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	e841 2300 	strex	r3, r2, [r1]
 8007b84:	617b      	str	r3, [r7, #20]
   return(result);
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e3      	bne.n	8007b54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f83e 	bl	8007c14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b98:	e023      	b.n	8007be2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d009      	beq.n	8007bba <HAL_UART_IRQHandler+0x4ea>
 8007ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f959 	bl	8007e6a <UART_Transmit_IT>
    return;
 8007bb8:	e014      	b.n	8007be4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00e      	beq.n	8007be4 <HAL_UART_IRQHandler+0x514>
 8007bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d008      	beq.n	8007be4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f999 	bl	8007f0a <UART_EndTransmit_IT>
    return;
 8007bd8:	e004      	b.n	8007be4 <HAL_UART_IRQHandler+0x514>
    return;
 8007bda:	bf00      	nop
 8007bdc:	e002      	b.n	8007be4 <HAL_UART_IRQHandler+0x514>
      return;
 8007bde:	bf00      	nop
 8007be0:	e000      	b.n	8007be4 <HAL_UART_IRQHandler+0x514>
      return;
 8007be2:	bf00      	nop
  }
}
 8007be4:	37e8      	adds	r7, #232	@ 0xe8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop

08007bec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b090      	sub	sp, #64	@ 0x40
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c3c:	e050      	b.n	8007ce0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d04c      	beq.n	8007ce0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d007      	beq.n	8007c5c <UART_WaitOnFlagUntilTimeout+0x30>
 8007c4c:	f7fb fc9e 	bl	800358c <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d241      	bcs.n	8007ce0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	330c      	adds	r3, #12
 8007c62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	330c      	adds	r3, #12
 8007c7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c7c:	637a      	str	r2, [r7, #52]	@ 0x34
 8007c7e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e5      	bne.n	8007c5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3314      	adds	r3, #20
 8007c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f023 0301 	bic.w	r3, r3, #1
 8007ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3314      	adds	r3, #20
 8007cae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cb0:	623a      	str	r2, [r7, #32]
 8007cb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	69f9      	ldr	r1, [r7, #28]
 8007cb6:	6a3a      	ldr	r2, [r7, #32]
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e5      	bne.n	8007c90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e00f      	b.n	8007d00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	bf0c      	ite	eq
 8007cf0:	2301      	moveq	r3, #1
 8007cf2:	2300      	movne	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d09f      	beq.n	8007c3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3740      	adds	r7, #64	@ 0x40
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	4613      	mov	r3, r2
 8007d14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	88fa      	ldrh	r2, [r7, #6]
 8007d20:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	88fa      	ldrh	r2, [r7, #6]
 8007d26:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2222      	movs	r2, #34	@ 0x22
 8007d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d4c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	695a      	ldr	r2, [r3, #20]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f042 0201 	orr.w	r2, r2, #1
 8007d5c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68da      	ldr	r2, [r3, #12]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0220 	orr.w	r2, r2, #32
 8007d6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b095      	sub	sp, #84	@ 0x54
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	330c      	adds	r3, #12
 8007d8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d8e:	e853 3f00 	ldrex	r3, [r3]
 8007d92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	330c      	adds	r3, #12
 8007da2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007da4:	643a      	str	r2, [r7, #64]	@ 0x40
 8007da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007daa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dac:	e841 2300 	strex	r3, r2, [r1]
 8007db0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1e5      	bne.n	8007d84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3314      	adds	r3, #20
 8007dbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	f023 0301 	bic.w	r3, r3, #1
 8007dce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3314      	adds	r3, #20
 8007dd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e5      	bne.n	8007db8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d119      	bne.n	8007e28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	330c      	adds	r3, #12
 8007dfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	e853 3f00 	ldrex	r3, [r3]
 8007e02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	f023 0310 	bic.w	r3, r3, #16
 8007e0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	330c      	adds	r3, #12
 8007e12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e14:	61ba      	str	r2, [r7, #24]
 8007e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	6979      	ldr	r1, [r7, #20]
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	e841 2300 	strex	r3, r2, [r1]
 8007e20:	613b      	str	r3, [r7, #16]
   return(result);
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e5      	bne.n	8007df4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e36:	bf00      	nop
 8007e38:	3754      	adds	r7, #84	@ 0x54
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f7ff fecf 	bl	8007c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b21      	cmp	r3, #33	@ 0x21
 8007e7c:	d13e      	bne.n	8007efc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e86:	d114      	bne.n	8007eb2 <UART_Transmit_IT+0x48>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d110      	bne.n	8007eb2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ea4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	1c9a      	adds	r2, r3, #2
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	621a      	str	r2, [r3, #32]
 8007eb0:	e008      	b.n	8007ec4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	1c59      	adds	r1, r3, #1
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6211      	str	r1, [r2, #32]
 8007ebc:	781a      	ldrb	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10f      	bne.n	8007ef8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ee6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ef6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e000      	b.n	8007efe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007efc:	2302      	movs	r3, #2
  }
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff fe5e 	bl	8007bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b08c      	sub	sp, #48	@ 0x30
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b22      	cmp	r3, #34	@ 0x22
 8007f4c:	f040 80ab 	bne.w	80080a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f58:	d117      	bne.n	8007f8a <UART_Receive_IT+0x50>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d113      	bne.n	8007f8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f82:	1c9a      	adds	r2, r3, #2
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f88:	e026      	b.n	8007fd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007f90:	2300      	movs	r3, #0
 8007f92:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f9c:	d007      	beq.n	8007fae <UART_Receive_IT+0x74>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10a      	bne.n	8007fbc <UART_Receive_IT+0x82>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d106      	bne.n	8007fbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	e008      	b.n	8007fce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d15a      	bne.n	80080a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0220 	bic.w	r2, r2, #32
 8007ffa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800800a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695a      	ldr	r2, [r3, #20]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0201 	bic.w	r2, r2, #1
 800801a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008028:	2b01      	cmp	r3, #1
 800802a:	d135      	bne.n	8008098 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	330c      	adds	r3, #12
 8008038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	613b      	str	r3, [r7, #16]
   return(result);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f023 0310 	bic.w	r3, r3, #16
 8008048:	627b      	str	r3, [r7, #36]	@ 0x24
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	330c      	adds	r3, #12
 8008050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008052:	623a      	str	r2, [r7, #32]
 8008054:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	69f9      	ldr	r1, [r7, #28]
 8008058:	6a3a      	ldr	r2, [r7, #32]
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e5      	bne.n	8008032 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0310 	and.w	r3, r3, #16
 8008070:	2b10      	cmp	r3, #16
 8008072:	d10a      	bne.n	800808a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008074:	2300      	movs	r3, #0
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800808e:	4619      	mov	r1, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff fdbf 	bl	8007c14 <HAL_UARTEx_RxEventCallback>
 8008096:	e002      	b.n	800809e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7fb f899 	bl	80031d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	e002      	b.n	80080a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	e000      	b.n	80080a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080a6:	2302      	movs	r3, #2
  }
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3730      	adds	r7, #48	@ 0x30
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080b4:	b0c0      	sub	sp, #256	@ 0x100
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80080c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080cc:	68d9      	ldr	r1, [r3, #12]
 80080ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	ea40 0301 	orr.w	r3, r0, r1
 80080d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	431a      	orrs	r2, r3
 80080e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	431a      	orrs	r2, r3
 80080f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008108:	f021 010c 	bic.w	r1, r1, #12
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008116:	430b      	orrs	r3, r1
 8008118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800811a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800812a:	6999      	ldr	r1, [r3, #24]
 800812c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	ea40 0301 	orr.w	r3, r0, r1
 8008136:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	4b8f      	ldr	r3, [pc, #572]	@ (800837c <UART_SetConfig+0x2cc>)
 8008140:	429a      	cmp	r2, r3
 8008142:	d005      	beq.n	8008150 <UART_SetConfig+0xa0>
 8008144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	4b8d      	ldr	r3, [pc, #564]	@ (8008380 <UART_SetConfig+0x2d0>)
 800814c:	429a      	cmp	r2, r3
 800814e:	d104      	bne.n	800815a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008150:	f7fd fb0a 	bl	8005768 <HAL_RCC_GetPCLK2Freq>
 8008154:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008158:	e003      	b.n	8008162 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800815a:	f7fd faf1 	bl	8005740 <HAL_RCC_GetPCLK1Freq>
 800815e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008166:	69db      	ldr	r3, [r3, #28]
 8008168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800816c:	f040 810c 	bne.w	8008388 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008174:	2200      	movs	r2, #0
 8008176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800817a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800817e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008182:	4622      	mov	r2, r4
 8008184:	462b      	mov	r3, r5
 8008186:	1891      	adds	r1, r2, r2
 8008188:	65b9      	str	r1, [r7, #88]	@ 0x58
 800818a:	415b      	adcs	r3, r3
 800818c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800818e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008192:	4621      	mov	r1, r4
 8008194:	eb12 0801 	adds.w	r8, r2, r1
 8008198:	4629      	mov	r1, r5
 800819a:	eb43 0901 	adc.w	r9, r3, r1
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081b2:	4690      	mov	r8, r2
 80081b4:	4699      	mov	r9, r3
 80081b6:	4623      	mov	r3, r4
 80081b8:	eb18 0303 	adds.w	r3, r8, r3
 80081bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081c0:	462b      	mov	r3, r5
 80081c2:	eb49 0303 	adc.w	r3, r9, r3
 80081c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80081ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80081da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80081de:	460b      	mov	r3, r1
 80081e0:	18db      	adds	r3, r3, r3
 80081e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80081e4:	4613      	mov	r3, r2
 80081e6:	eb42 0303 	adc.w	r3, r2, r3
 80081ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80081ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80081f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80081f4:	f7f8 fc5a 	bl	8000aac <__aeabi_uldivmod>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4b61      	ldr	r3, [pc, #388]	@ (8008384 <UART_SetConfig+0x2d4>)
 80081fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	011c      	lsls	r4, r3, #4
 8008206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800820a:	2200      	movs	r2, #0
 800820c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008210:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008214:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008218:	4642      	mov	r2, r8
 800821a:	464b      	mov	r3, r9
 800821c:	1891      	adds	r1, r2, r2
 800821e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008220:	415b      	adcs	r3, r3
 8008222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008224:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008228:	4641      	mov	r1, r8
 800822a:	eb12 0a01 	adds.w	sl, r2, r1
 800822e:	4649      	mov	r1, r9
 8008230:	eb43 0b01 	adc.w	fp, r3, r1
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008240:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008248:	4692      	mov	sl, r2
 800824a:	469b      	mov	fp, r3
 800824c:	4643      	mov	r3, r8
 800824e:	eb1a 0303 	adds.w	r3, sl, r3
 8008252:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008256:	464b      	mov	r3, r9
 8008258:	eb4b 0303 	adc.w	r3, fp, r3
 800825c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800826c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008270:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008274:	460b      	mov	r3, r1
 8008276:	18db      	adds	r3, r3, r3
 8008278:	643b      	str	r3, [r7, #64]	@ 0x40
 800827a:	4613      	mov	r3, r2
 800827c:	eb42 0303 	adc.w	r3, r2, r3
 8008280:	647b      	str	r3, [r7, #68]	@ 0x44
 8008282:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008286:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800828a:	f7f8 fc0f 	bl	8000aac <__aeabi_uldivmod>
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	4611      	mov	r1, r2
 8008294:	4b3b      	ldr	r3, [pc, #236]	@ (8008384 <UART_SetConfig+0x2d4>)
 8008296:	fba3 2301 	umull	r2, r3, r3, r1
 800829a:	095b      	lsrs	r3, r3, #5
 800829c:	2264      	movs	r2, #100	@ 0x64
 800829e:	fb02 f303 	mul.w	r3, r2, r3
 80082a2:	1acb      	subs	r3, r1, r3
 80082a4:	00db      	lsls	r3, r3, #3
 80082a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80082aa:	4b36      	ldr	r3, [pc, #216]	@ (8008384 <UART_SetConfig+0x2d4>)
 80082ac:	fba3 2302 	umull	r2, r3, r3, r2
 80082b0:	095b      	lsrs	r3, r3, #5
 80082b2:	005b      	lsls	r3, r3, #1
 80082b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80082b8:	441c      	add	r4, r3
 80082ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082be:	2200      	movs	r2, #0
 80082c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80082c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80082cc:	4642      	mov	r2, r8
 80082ce:	464b      	mov	r3, r9
 80082d0:	1891      	adds	r1, r2, r2
 80082d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80082d4:	415b      	adcs	r3, r3
 80082d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80082dc:	4641      	mov	r1, r8
 80082de:	1851      	adds	r1, r2, r1
 80082e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80082e2:	4649      	mov	r1, r9
 80082e4:	414b      	adcs	r3, r1
 80082e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082e8:	f04f 0200 	mov.w	r2, #0
 80082ec:	f04f 0300 	mov.w	r3, #0
 80082f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80082f4:	4659      	mov	r1, fp
 80082f6:	00cb      	lsls	r3, r1, #3
 80082f8:	4651      	mov	r1, sl
 80082fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082fe:	4651      	mov	r1, sl
 8008300:	00ca      	lsls	r2, r1, #3
 8008302:	4610      	mov	r0, r2
 8008304:	4619      	mov	r1, r3
 8008306:	4603      	mov	r3, r0
 8008308:	4642      	mov	r2, r8
 800830a:	189b      	adds	r3, r3, r2
 800830c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008310:	464b      	mov	r3, r9
 8008312:	460a      	mov	r2, r1
 8008314:	eb42 0303 	adc.w	r3, r2, r3
 8008318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800831c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008328:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800832c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008330:	460b      	mov	r3, r1
 8008332:	18db      	adds	r3, r3, r3
 8008334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008336:	4613      	mov	r3, r2
 8008338:	eb42 0303 	adc.w	r3, r2, r3
 800833c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800833e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008342:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008346:	f7f8 fbb1 	bl	8000aac <__aeabi_uldivmod>
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	4b0d      	ldr	r3, [pc, #52]	@ (8008384 <UART_SetConfig+0x2d4>)
 8008350:	fba3 1302 	umull	r1, r3, r3, r2
 8008354:	095b      	lsrs	r3, r3, #5
 8008356:	2164      	movs	r1, #100	@ 0x64
 8008358:	fb01 f303 	mul.w	r3, r1, r3
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	3332      	adds	r3, #50	@ 0x32
 8008362:	4a08      	ldr	r2, [pc, #32]	@ (8008384 <UART_SetConfig+0x2d4>)
 8008364:	fba2 2303 	umull	r2, r3, r2, r3
 8008368:	095b      	lsrs	r3, r3, #5
 800836a:	f003 0207 	and.w	r2, r3, #7
 800836e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4422      	add	r2, r4
 8008376:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008378:	e106      	b.n	8008588 <UART_SetConfig+0x4d8>
 800837a:	bf00      	nop
 800837c:	40011000 	.word	0x40011000
 8008380:	40011400 	.word	0x40011400
 8008384:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800838c:	2200      	movs	r2, #0
 800838e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008392:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008396:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800839a:	4642      	mov	r2, r8
 800839c:	464b      	mov	r3, r9
 800839e:	1891      	adds	r1, r2, r2
 80083a0:	6239      	str	r1, [r7, #32]
 80083a2:	415b      	adcs	r3, r3
 80083a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80083a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083aa:	4641      	mov	r1, r8
 80083ac:	1854      	adds	r4, r2, r1
 80083ae:	4649      	mov	r1, r9
 80083b0:	eb43 0501 	adc.w	r5, r3, r1
 80083b4:	f04f 0200 	mov.w	r2, #0
 80083b8:	f04f 0300 	mov.w	r3, #0
 80083bc:	00eb      	lsls	r3, r5, #3
 80083be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083c2:	00e2      	lsls	r2, r4, #3
 80083c4:	4614      	mov	r4, r2
 80083c6:	461d      	mov	r5, r3
 80083c8:	4643      	mov	r3, r8
 80083ca:	18e3      	adds	r3, r4, r3
 80083cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80083d0:	464b      	mov	r3, r9
 80083d2:	eb45 0303 	adc.w	r3, r5, r3
 80083d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80083da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80083e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80083ea:	f04f 0200 	mov.w	r2, #0
 80083ee:	f04f 0300 	mov.w	r3, #0
 80083f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80083f6:	4629      	mov	r1, r5
 80083f8:	008b      	lsls	r3, r1, #2
 80083fa:	4621      	mov	r1, r4
 80083fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008400:	4621      	mov	r1, r4
 8008402:	008a      	lsls	r2, r1, #2
 8008404:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008408:	f7f8 fb50 	bl	8000aac <__aeabi_uldivmod>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4b60      	ldr	r3, [pc, #384]	@ (8008594 <UART_SetConfig+0x4e4>)
 8008412:	fba3 2302 	umull	r2, r3, r3, r2
 8008416:	095b      	lsrs	r3, r3, #5
 8008418:	011c      	lsls	r4, r3, #4
 800841a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800841e:	2200      	movs	r2, #0
 8008420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008424:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008428:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800842c:	4642      	mov	r2, r8
 800842e:	464b      	mov	r3, r9
 8008430:	1891      	adds	r1, r2, r2
 8008432:	61b9      	str	r1, [r7, #24]
 8008434:	415b      	adcs	r3, r3
 8008436:	61fb      	str	r3, [r7, #28]
 8008438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800843c:	4641      	mov	r1, r8
 800843e:	1851      	adds	r1, r2, r1
 8008440:	6139      	str	r1, [r7, #16]
 8008442:	4649      	mov	r1, r9
 8008444:	414b      	adcs	r3, r1
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	f04f 0200 	mov.w	r2, #0
 800844c:	f04f 0300 	mov.w	r3, #0
 8008450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008454:	4659      	mov	r1, fp
 8008456:	00cb      	lsls	r3, r1, #3
 8008458:	4651      	mov	r1, sl
 800845a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800845e:	4651      	mov	r1, sl
 8008460:	00ca      	lsls	r2, r1, #3
 8008462:	4610      	mov	r0, r2
 8008464:	4619      	mov	r1, r3
 8008466:	4603      	mov	r3, r0
 8008468:	4642      	mov	r2, r8
 800846a:	189b      	adds	r3, r3, r2
 800846c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008470:	464b      	mov	r3, r9
 8008472:	460a      	mov	r2, r1
 8008474:	eb42 0303 	adc.w	r3, r2, r3
 8008478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800847c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008486:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008488:	f04f 0200 	mov.w	r2, #0
 800848c:	f04f 0300 	mov.w	r3, #0
 8008490:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008494:	4649      	mov	r1, r9
 8008496:	008b      	lsls	r3, r1, #2
 8008498:	4641      	mov	r1, r8
 800849a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800849e:	4641      	mov	r1, r8
 80084a0:	008a      	lsls	r2, r1, #2
 80084a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80084a6:	f7f8 fb01 	bl	8000aac <__aeabi_uldivmod>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4611      	mov	r1, r2
 80084b0:	4b38      	ldr	r3, [pc, #224]	@ (8008594 <UART_SetConfig+0x4e4>)
 80084b2:	fba3 2301 	umull	r2, r3, r3, r1
 80084b6:	095b      	lsrs	r3, r3, #5
 80084b8:	2264      	movs	r2, #100	@ 0x64
 80084ba:	fb02 f303 	mul.w	r3, r2, r3
 80084be:	1acb      	subs	r3, r1, r3
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	3332      	adds	r3, #50	@ 0x32
 80084c4:	4a33      	ldr	r2, [pc, #204]	@ (8008594 <UART_SetConfig+0x4e4>)
 80084c6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ca:	095b      	lsrs	r3, r3, #5
 80084cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80084d0:	441c      	add	r4, r3
 80084d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084d6:	2200      	movs	r2, #0
 80084d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80084da:	677a      	str	r2, [r7, #116]	@ 0x74
 80084dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80084e0:	4642      	mov	r2, r8
 80084e2:	464b      	mov	r3, r9
 80084e4:	1891      	adds	r1, r2, r2
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	415b      	adcs	r3, r3
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084f0:	4641      	mov	r1, r8
 80084f2:	1851      	adds	r1, r2, r1
 80084f4:	6039      	str	r1, [r7, #0]
 80084f6:	4649      	mov	r1, r9
 80084f8:	414b      	adcs	r3, r1
 80084fa:	607b      	str	r3, [r7, #4]
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	f04f 0300 	mov.w	r3, #0
 8008504:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008508:	4659      	mov	r1, fp
 800850a:	00cb      	lsls	r3, r1, #3
 800850c:	4651      	mov	r1, sl
 800850e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008512:	4651      	mov	r1, sl
 8008514:	00ca      	lsls	r2, r1, #3
 8008516:	4610      	mov	r0, r2
 8008518:	4619      	mov	r1, r3
 800851a:	4603      	mov	r3, r0
 800851c:	4642      	mov	r2, r8
 800851e:	189b      	adds	r3, r3, r2
 8008520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008522:	464b      	mov	r3, r9
 8008524:	460a      	mov	r2, r1
 8008526:	eb42 0303 	adc.w	r3, r2, r3
 800852a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800852c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	663b      	str	r3, [r7, #96]	@ 0x60
 8008536:	667a      	str	r2, [r7, #100]	@ 0x64
 8008538:	f04f 0200 	mov.w	r2, #0
 800853c:	f04f 0300 	mov.w	r3, #0
 8008540:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008544:	4649      	mov	r1, r9
 8008546:	008b      	lsls	r3, r1, #2
 8008548:	4641      	mov	r1, r8
 800854a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800854e:	4641      	mov	r1, r8
 8008550:	008a      	lsls	r2, r1, #2
 8008552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008556:	f7f8 faa9 	bl	8000aac <__aeabi_uldivmod>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	4b0d      	ldr	r3, [pc, #52]	@ (8008594 <UART_SetConfig+0x4e4>)
 8008560:	fba3 1302 	umull	r1, r3, r3, r2
 8008564:	095b      	lsrs	r3, r3, #5
 8008566:	2164      	movs	r1, #100	@ 0x64
 8008568:	fb01 f303 	mul.w	r3, r1, r3
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	011b      	lsls	r3, r3, #4
 8008570:	3332      	adds	r3, #50	@ 0x32
 8008572:	4a08      	ldr	r2, [pc, #32]	@ (8008594 <UART_SetConfig+0x4e4>)
 8008574:	fba2 2303 	umull	r2, r3, r2, r3
 8008578:	095b      	lsrs	r3, r3, #5
 800857a:	f003 020f 	and.w	r2, r3, #15
 800857e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4422      	add	r2, r4
 8008586:	609a      	str	r2, [r3, #8]
}
 8008588:	bf00      	nop
 800858a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800858e:	46bd      	mov	sp, r7
 8008590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008594:	51eb851f 	.word	0x51eb851f

08008598 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4b20      	ldr	r3, [pc, #128]	@ (8008638 <FSMC_NORSRAM_Init+0xa0>)
 80085b6:	4013      	ands	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80085c2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80085c8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80085ce:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80085d4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80085da:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80085e0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80085e6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 80085ec:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 80085f2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 80085f8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 80085fe:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8008604:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4313      	orrs	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	2b08      	cmp	r3, #8
 8008612:	d103      	bne.n	800861c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800861a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68f9      	ldr	r1, [r7, #12]
 8008624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	fff00080 	.word	0xfff00080

0800863c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008648:	2300      	movs	r3, #0
 800864a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008656:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800865e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800866a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008672:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800867a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	3b01      	subs	r3, #1
 8008682:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008684:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	3b02      	subs	r3, #2
 800868c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800868e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008694:	4313      	orrs	r3, r2
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	4313      	orrs	r3, r2
 800869a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	1c5a      	adds	r2, r3, #1
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6979      	ldr	r1, [r7, #20]
 80086a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	371c      	adds	r7, #28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
	...

080086b8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086d0:	d122      	bne.n	8008718 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086da:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	4b15      	ldr	r3, [pc, #84]	@ (8008734 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80086e0:	4013      	ands	r3, r2
 80086e2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80086ee:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80086f6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80086fe:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008704:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	4313      	orrs	r3, r2
 800870a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	6979      	ldr	r1, [r7, #20]
 8008712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008716:	e005      	b.n	8008724 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	cff00000 	.word	0xcff00000

08008738 <siprintf>:
 8008738:	b40e      	push	{r1, r2, r3}
 800873a:	b500      	push	{lr}
 800873c:	b09c      	sub	sp, #112	@ 0x70
 800873e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008740:	9002      	str	r0, [sp, #8]
 8008742:	9006      	str	r0, [sp, #24]
 8008744:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008748:	4809      	ldr	r0, [pc, #36]	@ (8008770 <siprintf+0x38>)
 800874a:	9107      	str	r1, [sp, #28]
 800874c:	9104      	str	r1, [sp, #16]
 800874e:	4909      	ldr	r1, [pc, #36]	@ (8008774 <siprintf+0x3c>)
 8008750:	f853 2b04 	ldr.w	r2, [r3], #4
 8008754:	9105      	str	r1, [sp, #20]
 8008756:	6800      	ldr	r0, [r0, #0]
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	a902      	add	r1, sp, #8
 800875c:	f000 f994 	bl	8008a88 <_svfiprintf_r>
 8008760:	9b02      	ldr	r3, [sp, #8]
 8008762:	2200      	movs	r2, #0
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	b01c      	add	sp, #112	@ 0x70
 8008768:	f85d eb04 	ldr.w	lr, [sp], #4
 800876c:	b003      	add	sp, #12
 800876e:	4770      	bx	lr
 8008770:	20000014 	.word	0x20000014
 8008774:	ffff0208 	.word	0xffff0208

08008778 <memset>:
 8008778:	4402      	add	r2, r0
 800877a:	4603      	mov	r3, r0
 800877c:	4293      	cmp	r3, r2
 800877e:	d100      	bne.n	8008782 <memset+0xa>
 8008780:	4770      	bx	lr
 8008782:	f803 1b01 	strb.w	r1, [r3], #1
 8008786:	e7f9      	b.n	800877c <memset+0x4>

08008788 <__errno>:
 8008788:	4b01      	ldr	r3, [pc, #4]	@ (8008790 <__errno+0x8>)
 800878a:	6818      	ldr	r0, [r3, #0]
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	20000014 	.word	0x20000014

08008794 <__libc_init_array>:
 8008794:	b570      	push	{r4, r5, r6, lr}
 8008796:	4d0d      	ldr	r5, [pc, #52]	@ (80087cc <__libc_init_array+0x38>)
 8008798:	4c0d      	ldr	r4, [pc, #52]	@ (80087d0 <__libc_init_array+0x3c>)
 800879a:	1b64      	subs	r4, r4, r5
 800879c:	10a4      	asrs	r4, r4, #2
 800879e:	2600      	movs	r6, #0
 80087a0:	42a6      	cmp	r6, r4
 80087a2:	d109      	bne.n	80087b8 <__libc_init_array+0x24>
 80087a4:	4d0b      	ldr	r5, [pc, #44]	@ (80087d4 <__libc_init_array+0x40>)
 80087a6:	4c0c      	ldr	r4, [pc, #48]	@ (80087d8 <__libc_init_array+0x44>)
 80087a8:	f000 fc66 	bl	8009078 <_init>
 80087ac:	1b64      	subs	r4, r4, r5
 80087ae:	10a4      	asrs	r4, r4, #2
 80087b0:	2600      	movs	r6, #0
 80087b2:	42a6      	cmp	r6, r4
 80087b4:	d105      	bne.n	80087c2 <__libc_init_array+0x2e>
 80087b6:	bd70      	pop	{r4, r5, r6, pc}
 80087b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087bc:	4798      	blx	r3
 80087be:	3601      	adds	r6, #1
 80087c0:	e7ee      	b.n	80087a0 <__libc_init_array+0xc>
 80087c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087c6:	4798      	blx	r3
 80087c8:	3601      	adds	r6, #1
 80087ca:	e7f2      	b.n	80087b2 <__libc_init_array+0x1e>
 80087cc:	0800c0e0 	.word	0x0800c0e0
 80087d0:	0800c0e0 	.word	0x0800c0e0
 80087d4:	0800c0e0 	.word	0x0800c0e0
 80087d8:	0800c0e4 	.word	0x0800c0e4

080087dc <__retarget_lock_acquire_recursive>:
 80087dc:	4770      	bx	lr

080087de <__retarget_lock_release_recursive>:
 80087de:	4770      	bx	lr

080087e0 <_free_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4605      	mov	r5, r0
 80087e4:	2900      	cmp	r1, #0
 80087e6:	d041      	beq.n	800886c <_free_r+0x8c>
 80087e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ec:	1f0c      	subs	r4, r1, #4
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	bfb8      	it	lt
 80087f2:	18e4      	addlt	r4, r4, r3
 80087f4:	f000 f8e0 	bl	80089b8 <__malloc_lock>
 80087f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008870 <_free_r+0x90>)
 80087fa:	6813      	ldr	r3, [r2, #0]
 80087fc:	b933      	cbnz	r3, 800880c <_free_r+0x2c>
 80087fe:	6063      	str	r3, [r4, #4]
 8008800:	6014      	str	r4, [r2, #0]
 8008802:	4628      	mov	r0, r5
 8008804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008808:	f000 b8dc 	b.w	80089c4 <__malloc_unlock>
 800880c:	42a3      	cmp	r3, r4
 800880e:	d908      	bls.n	8008822 <_free_r+0x42>
 8008810:	6820      	ldr	r0, [r4, #0]
 8008812:	1821      	adds	r1, r4, r0
 8008814:	428b      	cmp	r3, r1
 8008816:	bf01      	itttt	eq
 8008818:	6819      	ldreq	r1, [r3, #0]
 800881a:	685b      	ldreq	r3, [r3, #4]
 800881c:	1809      	addeq	r1, r1, r0
 800881e:	6021      	streq	r1, [r4, #0]
 8008820:	e7ed      	b.n	80087fe <_free_r+0x1e>
 8008822:	461a      	mov	r2, r3
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	b10b      	cbz	r3, 800882c <_free_r+0x4c>
 8008828:	42a3      	cmp	r3, r4
 800882a:	d9fa      	bls.n	8008822 <_free_r+0x42>
 800882c:	6811      	ldr	r1, [r2, #0]
 800882e:	1850      	adds	r0, r2, r1
 8008830:	42a0      	cmp	r0, r4
 8008832:	d10b      	bne.n	800884c <_free_r+0x6c>
 8008834:	6820      	ldr	r0, [r4, #0]
 8008836:	4401      	add	r1, r0
 8008838:	1850      	adds	r0, r2, r1
 800883a:	4283      	cmp	r3, r0
 800883c:	6011      	str	r1, [r2, #0]
 800883e:	d1e0      	bne.n	8008802 <_free_r+0x22>
 8008840:	6818      	ldr	r0, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	6053      	str	r3, [r2, #4]
 8008846:	4408      	add	r0, r1
 8008848:	6010      	str	r0, [r2, #0]
 800884a:	e7da      	b.n	8008802 <_free_r+0x22>
 800884c:	d902      	bls.n	8008854 <_free_r+0x74>
 800884e:	230c      	movs	r3, #12
 8008850:	602b      	str	r3, [r5, #0]
 8008852:	e7d6      	b.n	8008802 <_free_r+0x22>
 8008854:	6820      	ldr	r0, [r4, #0]
 8008856:	1821      	adds	r1, r4, r0
 8008858:	428b      	cmp	r3, r1
 800885a:	bf04      	itt	eq
 800885c:	6819      	ldreq	r1, [r3, #0]
 800885e:	685b      	ldreq	r3, [r3, #4]
 8008860:	6063      	str	r3, [r4, #4]
 8008862:	bf04      	itt	eq
 8008864:	1809      	addeq	r1, r1, r0
 8008866:	6021      	streq	r1, [r4, #0]
 8008868:	6054      	str	r4, [r2, #4]
 800886a:	e7ca      	b.n	8008802 <_free_r+0x22>
 800886c:	bd38      	pop	{r3, r4, r5, pc}
 800886e:	bf00      	nop
 8008870:	200005a0 	.word	0x200005a0

08008874 <sbrk_aligned>:
 8008874:	b570      	push	{r4, r5, r6, lr}
 8008876:	4e0f      	ldr	r6, [pc, #60]	@ (80088b4 <sbrk_aligned+0x40>)
 8008878:	460c      	mov	r4, r1
 800887a:	6831      	ldr	r1, [r6, #0]
 800887c:	4605      	mov	r5, r0
 800887e:	b911      	cbnz	r1, 8008886 <sbrk_aligned+0x12>
 8008880:	f000 fba6 	bl	8008fd0 <_sbrk_r>
 8008884:	6030      	str	r0, [r6, #0]
 8008886:	4621      	mov	r1, r4
 8008888:	4628      	mov	r0, r5
 800888a:	f000 fba1 	bl	8008fd0 <_sbrk_r>
 800888e:	1c43      	adds	r3, r0, #1
 8008890:	d103      	bne.n	800889a <sbrk_aligned+0x26>
 8008892:	f04f 34ff 	mov.w	r4, #4294967295
 8008896:	4620      	mov	r0, r4
 8008898:	bd70      	pop	{r4, r5, r6, pc}
 800889a:	1cc4      	adds	r4, r0, #3
 800889c:	f024 0403 	bic.w	r4, r4, #3
 80088a0:	42a0      	cmp	r0, r4
 80088a2:	d0f8      	beq.n	8008896 <sbrk_aligned+0x22>
 80088a4:	1a21      	subs	r1, r4, r0
 80088a6:	4628      	mov	r0, r5
 80088a8:	f000 fb92 	bl	8008fd0 <_sbrk_r>
 80088ac:	3001      	adds	r0, #1
 80088ae:	d1f2      	bne.n	8008896 <sbrk_aligned+0x22>
 80088b0:	e7ef      	b.n	8008892 <sbrk_aligned+0x1e>
 80088b2:	bf00      	nop
 80088b4:	2000059c 	.word	0x2000059c

080088b8 <_malloc_r>:
 80088b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088bc:	1ccd      	adds	r5, r1, #3
 80088be:	f025 0503 	bic.w	r5, r5, #3
 80088c2:	3508      	adds	r5, #8
 80088c4:	2d0c      	cmp	r5, #12
 80088c6:	bf38      	it	cc
 80088c8:	250c      	movcc	r5, #12
 80088ca:	2d00      	cmp	r5, #0
 80088cc:	4606      	mov	r6, r0
 80088ce:	db01      	blt.n	80088d4 <_malloc_r+0x1c>
 80088d0:	42a9      	cmp	r1, r5
 80088d2:	d904      	bls.n	80088de <_malloc_r+0x26>
 80088d4:	230c      	movs	r3, #12
 80088d6:	6033      	str	r3, [r6, #0]
 80088d8:	2000      	movs	r0, #0
 80088da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089b4 <_malloc_r+0xfc>
 80088e2:	f000 f869 	bl	80089b8 <__malloc_lock>
 80088e6:	f8d8 3000 	ldr.w	r3, [r8]
 80088ea:	461c      	mov	r4, r3
 80088ec:	bb44      	cbnz	r4, 8008940 <_malloc_r+0x88>
 80088ee:	4629      	mov	r1, r5
 80088f0:	4630      	mov	r0, r6
 80088f2:	f7ff ffbf 	bl	8008874 <sbrk_aligned>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	4604      	mov	r4, r0
 80088fa:	d158      	bne.n	80089ae <_malloc_r+0xf6>
 80088fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008900:	4627      	mov	r7, r4
 8008902:	2f00      	cmp	r7, #0
 8008904:	d143      	bne.n	800898e <_malloc_r+0xd6>
 8008906:	2c00      	cmp	r4, #0
 8008908:	d04b      	beq.n	80089a2 <_malloc_r+0xea>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	4639      	mov	r1, r7
 800890e:	4630      	mov	r0, r6
 8008910:	eb04 0903 	add.w	r9, r4, r3
 8008914:	f000 fb5c 	bl	8008fd0 <_sbrk_r>
 8008918:	4581      	cmp	r9, r0
 800891a:	d142      	bne.n	80089a2 <_malloc_r+0xea>
 800891c:	6821      	ldr	r1, [r4, #0]
 800891e:	1a6d      	subs	r5, r5, r1
 8008920:	4629      	mov	r1, r5
 8008922:	4630      	mov	r0, r6
 8008924:	f7ff ffa6 	bl	8008874 <sbrk_aligned>
 8008928:	3001      	adds	r0, #1
 800892a:	d03a      	beq.n	80089a2 <_malloc_r+0xea>
 800892c:	6823      	ldr	r3, [r4, #0]
 800892e:	442b      	add	r3, r5
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	f8d8 3000 	ldr.w	r3, [r8]
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	bb62      	cbnz	r2, 8008994 <_malloc_r+0xdc>
 800893a:	f8c8 7000 	str.w	r7, [r8]
 800893e:	e00f      	b.n	8008960 <_malloc_r+0xa8>
 8008940:	6822      	ldr	r2, [r4, #0]
 8008942:	1b52      	subs	r2, r2, r5
 8008944:	d420      	bmi.n	8008988 <_malloc_r+0xd0>
 8008946:	2a0b      	cmp	r2, #11
 8008948:	d917      	bls.n	800897a <_malloc_r+0xc2>
 800894a:	1961      	adds	r1, r4, r5
 800894c:	42a3      	cmp	r3, r4
 800894e:	6025      	str	r5, [r4, #0]
 8008950:	bf18      	it	ne
 8008952:	6059      	strne	r1, [r3, #4]
 8008954:	6863      	ldr	r3, [r4, #4]
 8008956:	bf08      	it	eq
 8008958:	f8c8 1000 	streq.w	r1, [r8]
 800895c:	5162      	str	r2, [r4, r5]
 800895e:	604b      	str	r3, [r1, #4]
 8008960:	4630      	mov	r0, r6
 8008962:	f000 f82f 	bl	80089c4 <__malloc_unlock>
 8008966:	f104 000b 	add.w	r0, r4, #11
 800896a:	1d23      	adds	r3, r4, #4
 800896c:	f020 0007 	bic.w	r0, r0, #7
 8008970:	1ac2      	subs	r2, r0, r3
 8008972:	bf1c      	itt	ne
 8008974:	1a1b      	subne	r3, r3, r0
 8008976:	50a3      	strne	r3, [r4, r2]
 8008978:	e7af      	b.n	80088da <_malloc_r+0x22>
 800897a:	6862      	ldr	r2, [r4, #4]
 800897c:	42a3      	cmp	r3, r4
 800897e:	bf0c      	ite	eq
 8008980:	f8c8 2000 	streq.w	r2, [r8]
 8008984:	605a      	strne	r2, [r3, #4]
 8008986:	e7eb      	b.n	8008960 <_malloc_r+0xa8>
 8008988:	4623      	mov	r3, r4
 800898a:	6864      	ldr	r4, [r4, #4]
 800898c:	e7ae      	b.n	80088ec <_malloc_r+0x34>
 800898e:	463c      	mov	r4, r7
 8008990:	687f      	ldr	r7, [r7, #4]
 8008992:	e7b6      	b.n	8008902 <_malloc_r+0x4a>
 8008994:	461a      	mov	r2, r3
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	42a3      	cmp	r3, r4
 800899a:	d1fb      	bne.n	8008994 <_malloc_r+0xdc>
 800899c:	2300      	movs	r3, #0
 800899e:	6053      	str	r3, [r2, #4]
 80089a0:	e7de      	b.n	8008960 <_malloc_r+0xa8>
 80089a2:	230c      	movs	r3, #12
 80089a4:	6033      	str	r3, [r6, #0]
 80089a6:	4630      	mov	r0, r6
 80089a8:	f000 f80c 	bl	80089c4 <__malloc_unlock>
 80089ac:	e794      	b.n	80088d8 <_malloc_r+0x20>
 80089ae:	6005      	str	r5, [r0, #0]
 80089b0:	e7d6      	b.n	8008960 <_malloc_r+0xa8>
 80089b2:	bf00      	nop
 80089b4:	200005a0 	.word	0x200005a0

080089b8 <__malloc_lock>:
 80089b8:	4801      	ldr	r0, [pc, #4]	@ (80089c0 <__malloc_lock+0x8>)
 80089ba:	f7ff bf0f 	b.w	80087dc <__retarget_lock_acquire_recursive>
 80089be:	bf00      	nop
 80089c0:	20000598 	.word	0x20000598

080089c4 <__malloc_unlock>:
 80089c4:	4801      	ldr	r0, [pc, #4]	@ (80089cc <__malloc_unlock+0x8>)
 80089c6:	f7ff bf0a 	b.w	80087de <__retarget_lock_release_recursive>
 80089ca:	bf00      	nop
 80089cc:	20000598 	.word	0x20000598

080089d0 <__ssputs_r>:
 80089d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d4:	688e      	ldr	r6, [r1, #8]
 80089d6:	461f      	mov	r7, r3
 80089d8:	42be      	cmp	r6, r7
 80089da:	680b      	ldr	r3, [r1, #0]
 80089dc:	4682      	mov	sl, r0
 80089de:	460c      	mov	r4, r1
 80089e0:	4690      	mov	r8, r2
 80089e2:	d82d      	bhi.n	8008a40 <__ssputs_r+0x70>
 80089e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80089ec:	d026      	beq.n	8008a3c <__ssputs_r+0x6c>
 80089ee:	6965      	ldr	r5, [r4, #20]
 80089f0:	6909      	ldr	r1, [r1, #16]
 80089f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089f6:	eba3 0901 	sub.w	r9, r3, r1
 80089fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089fe:	1c7b      	adds	r3, r7, #1
 8008a00:	444b      	add	r3, r9
 8008a02:	106d      	asrs	r5, r5, #1
 8008a04:	429d      	cmp	r5, r3
 8008a06:	bf38      	it	cc
 8008a08:	461d      	movcc	r5, r3
 8008a0a:	0553      	lsls	r3, r2, #21
 8008a0c:	d527      	bpl.n	8008a5e <__ssputs_r+0x8e>
 8008a0e:	4629      	mov	r1, r5
 8008a10:	f7ff ff52 	bl	80088b8 <_malloc_r>
 8008a14:	4606      	mov	r6, r0
 8008a16:	b360      	cbz	r0, 8008a72 <__ssputs_r+0xa2>
 8008a18:	6921      	ldr	r1, [r4, #16]
 8008a1a:	464a      	mov	r2, r9
 8008a1c:	f000 fae8 	bl	8008ff0 <memcpy>
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a2a:	81a3      	strh	r3, [r4, #12]
 8008a2c:	6126      	str	r6, [r4, #16]
 8008a2e:	6165      	str	r5, [r4, #20]
 8008a30:	444e      	add	r6, r9
 8008a32:	eba5 0509 	sub.w	r5, r5, r9
 8008a36:	6026      	str	r6, [r4, #0]
 8008a38:	60a5      	str	r5, [r4, #8]
 8008a3a:	463e      	mov	r6, r7
 8008a3c:	42be      	cmp	r6, r7
 8008a3e:	d900      	bls.n	8008a42 <__ssputs_r+0x72>
 8008a40:	463e      	mov	r6, r7
 8008a42:	6820      	ldr	r0, [r4, #0]
 8008a44:	4632      	mov	r2, r6
 8008a46:	4641      	mov	r1, r8
 8008a48:	f000 faa8 	bl	8008f9c <memmove>
 8008a4c:	68a3      	ldr	r3, [r4, #8]
 8008a4e:	1b9b      	subs	r3, r3, r6
 8008a50:	60a3      	str	r3, [r4, #8]
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	4433      	add	r3, r6
 8008a56:	6023      	str	r3, [r4, #0]
 8008a58:	2000      	movs	r0, #0
 8008a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5e:	462a      	mov	r2, r5
 8008a60:	f000 fad4 	bl	800900c <_realloc_r>
 8008a64:	4606      	mov	r6, r0
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d1e0      	bne.n	8008a2c <__ssputs_r+0x5c>
 8008a6a:	6921      	ldr	r1, [r4, #16]
 8008a6c:	4650      	mov	r0, sl
 8008a6e:	f7ff feb7 	bl	80087e0 <_free_r>
 8008a72:	230c      	movs	r3, #12
 8008a74:	f8ca 3000 	str.w	r3, [sl]
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a7e:	81a3      	strh	r3, [r4, #12]
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	e7e9      	b.n	8008a5a <__ssputs_r+0x8a>
	...

08008a88 <_svfiprintf_r>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	4698      	mov	r8, r3
 8008a8e:	898b      	ldrh	r3, [r1, #12]
 8008a90:	061b      	lsls	r3, r3, #24
 8008a92:	b09d      	sub	sp, #116	@ 0x74
 8008a94:	4607      	mov	r7, r0
 8008a96:	460d      	mov	r5, r1
 8008a98:	4614      	mov	r4, r2
 8008a9a:	d510      	bpl.n	8008abe <_svfiprintf_r+0x36>
 8008a9c:	690b      	ldr	r3, [r1, #16]
 8008a9e:	b973      	cbnz	r3, 8008abe <_svfiprintf_r+0x36>
 8008aa0:	2140      	movs	r1, #64	@ 0x40
 8008aa2:	f7ff ff09 	bl	80088b8 <_malloc_r>
 8008aa6:	6028      	str	r0, [r5, #0]
 8008aa8:	6128      	str	r0, [r5, #16]
 8008aaa:	b930      	cbnz	r0, 8008aba <_svfiprintf_r+0x32>
 8008aac:	230c      	movs	r3, #12
 8008aae:	603b      	str	r3, [r7, #0]
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	b01d      	add	sp, #116	@ 0x74
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	2340      	movs	r3, #64	@ 0x40
 8008abc:	616b      	str	r3, [r5, #20]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ac2:	2320      	movs	r3, #32
 8008ac4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ac8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008acc:	2330      	movs	r3, #48	@ 0x30
 8008ace:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c6c <_svfiprintf_r+0x1e4>
 8008ad2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ad6:	f04f 0901 	mov.w	r9, #1
 8008ada:	4623      	mov	r3, r4
 8008adc:	469a      	mov	sl, r3
 8008ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ae2:	b10a      	cbz	r2, 8008ae8 <_svfiprintf_r+0x60>
 8008ae4:	2a25      	cmp	r2, #37	@ 0x25
 8008ae6:	d1f9      	bne.n	8008adc <_svfiprintf_r+0x54>
 8008ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8008aec:	d00b      	beq.n	8008b06 <_svfiprintf_r+0x7e>
 8008aee:	465b      	mov	r3, fp
 8008af0:	4622      	mov	r2, r4
 8008af2:	4629      	mov	r1, r5
 8008af4:	4638      	mov	r0, r7
 8008af6:	f7ff ff6b 	bl	80089d0 <__ssputs_r>
 8008afa:	3001      	adds	r0, #1
 8008afc:	f000 80a7 	beq.w	8008c4e <_svfiprintf_r+0x1c6>
 8008b00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b02:	445a      	add	r2, fp
 8008b04:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b06:	f89a 3000 	ldrb.w	r3, [sl]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 809f 	beq.w	8008c4e <_svfiprintf_r+0x1c6>
 8008b10:	2300      	movs	r3, #0
 8008b12:	f04f 32ff 	mov.w	r2, #4294967295
 8008b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b1a:	f10a 0a01 	add.w	sl, sl, #1
 8008b1e:	9304      	str	r3, [sp, #16]
 8008b20:	9307      	str	r3, [sp, #28]
 8008b22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b26:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b28:	4654      	mov	r4, sl
 8008b2a:	2205      	movs	r2, #5
 8008b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b30:	484e      	ldr	r0, [pc, #312]	@ (8008c6c <_svfiprintf_r+0x1e4>)
 8008b32:	f7f7 fb4d 	bl	80001d0 <memchr>
 8008b36:	9a04      	ldr	r2, [sp, #16]
 8008b38:	b9d8      	cbnz	r0, 8008b72 <_svfiprintf_r+0xea>
 8008b3a:	06d0      	lsls	r0, r2, #27
 8008b3c:	bf44      	itt	mi
 8008b3e:	2320      	movmi	r3, #32
 8008b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b44:	0711      	lsls	r1, r2, #28
 8008b46:	bf44      	itt	mi
 8008b48:	232b      	movmi	r3, #43	@ 0x2b
 8008b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b54:	d015      	beq.n	8008b82 <_svfiprintf_r+0xfa>
 8008b56:	9a07      	ldr	r2, [sp, #28]
 8008b58:	4654      	mov	r4, sl
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	f04f 0c0a 	mov.w	ip, #10
 8008b60:	4621      	mov	r1, r4
 8008b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b66:	3b30      	subs	r3, #48	@ 0x30
 8008b68:	2b09      	cmp	r3, #9
 8008b6a:	d94b      	bls.n	8008c04 <_svfiprintf_r+0x17c>
 8008b6c:	b1b0      	cbz	r0, 8008b9c <_svfiprintf_r+0x114>
 8008b6e:	9207      	str	r2, [sp, #28]
 8008b70:	e014      	b.n	8008b9c <_svfiprintf_r+0x114>
 8008b72:	eba0 0308 	sub.w	r3, r0, r8
 8008b76:	fa09 f303 	lsl.w	r3, r9, r3
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	9304      	str	r3, [sp, #16]
 8008b7e:	46a2      	mov	sl, r4
 8008b80:	e7d2      	b.n	8008b28 <_svfiprintf_r+0xa0>
 8008b82:	9b03      	ldr	r3, [sp, #12]
 8008b84:	1d19      	adds	r1, r3, #4
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	9103      	str	r1, [sp, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	bfbb      	ittet	lt
 8008b8e:	425b      	neglt	r3, r3
 8008b90:	f042 0202 	orrlt.w	r2, r2, #2
 8008b94:	9307      	strge	r3, [sp, #28]
 8008b96:	9307      	strlt	r3, [sp, #28]
 8008b98:	bfb8      	it	lt
 8008b9a:	9204      	strlt	r2, [sp, #16]
 8008b9c:	7823      	ldrb	r3, [r4, #0]
 8008b9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ba0:	d10a      	bne.n	8008bb8 <_svfiprintf_r+0x130>
 8008ba2:	7863      	ldrb	r3, [r4, #1]
 8008ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ba6:	d132      	bne.n	8008c0e <_svfiprintf_r+0x186>
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	1d1a      	adds	r2, r3, #4
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	9203      	str	r2, [sp, #12]
 8008bb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bb4:	3402      	adds	r4, #2
 8008bb6:	9305      	str	r3, [sp, #20]
 8008bb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008c7c <_svfiprintf_r+0x1f4>
 8008bbc:	7821      	ldrb	r1, [r4, #0]
 8008bbe:	2203      	movs	r2, #3
 8008bc0:	4650      	mov	r0, sl
 8008bc2:	f7f7 fb05 	bl	80001d0 <memchr>
 8008bc6:	b138      	cbz	r0, 8008bd8 <_svfiprintf_r+0x150>
 8008bc8:	9b04      	ldr	r3, [sp, #16]
 8008bca:	eba0 000a 	sub.w	r0, r0, sl
 8008bce:	2240      	movs	r2, #64	@ 0x40
 8008bd0:	4082      	lsls	r2, r0
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	3401      	adds	r4, #1
 8008bd6:	9304      	str	r3, [sp, #16]
 8008bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bdc:	4824      	ldr	r0, [pc, #144]	@ (8008c70 <_svfiprintf_r+0x1e8>)
 8008bde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008be2:	2206      	movs	r2, #6
 8008be4:	f7f7 faf4 	bl	80001d0 <memchr>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d036      	beq.n	8008c5a <_svfiprintf_r+0x1d2>
 8008bec:	4b21      	ldr	r3, [pc, #132]	@ (8008c74 <_svfiprintf_r+0x1ec>)
 8008bee:	bb1b      	cbnz	r3, 8008c38 <_svfiprintf_r+0x1b0>
 8008bf0:	9b03      	ldr	r3, [sp, #12]
 8008bf2:	3307      	adds	r3, #7
 8008bf4:	f023 0307 	bic.w	r3, r3, #7
 8008bf8:	3308      	adds	r3, #8
 8008bfa:	9303      	str	r3, [sp, #12]
 8008bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bfe:	4433      	add	r3, r6
 8008c00:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c02:	e76a      	b.n	8008ada <_svfiprintf_r+0x52>
 8008c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c08:	460c      	mov	r4, r1
 8008c0a:	2001      	movs	r0, #1
 8008c0c:	e7a8      	b.n	8008b60 <_svfiprintf_r+0xd8>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	3401      	adds	r4, #1
 8008c12:	9305      	str	r3, [sp, #20]
 8008c14:	4619      	mov	r1, r3
 8008c16:	f04f 0c0a 	mov.w	ip, #10
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c20:	3a30      	subs	r2, #48	@ 0x30
 8008c22:	2a09      	cmp	r2, #9
 8008c24:	d903      	bls.n	8008c2e <_svfiprintf_r+0x1a6>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d0c6      	beq.n	8008bb8 <_svfiprintf_r+0x130>
 8008c2a:	9105      	str	r1, [sp, #20]
 8008c2c:	e7c4      	b.n	8008bb8 <_svfiprintf_r+0x130>
 8008c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c32:	4604      	mov	r4, r0
 8008c34:	2301      	movs	r3, #1
 8008c36:	e7f0      	b.n	8008c1a <_svfiprintf_r+0x192>
 8008c38:	ab03      	add	r3, sp, #12
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	462a      	mov	r2, r5
 8008c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c78 <_svfiprintf_r+0x1f0>)
 8008c40:	a904      	add	r1, sp, #16
 8008c42:	4638      	mov	r0, r7
 8008c44:	f3af 8000 	nop.w
 8008c48:	1c42      	adds	r2, r0, #1
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	d1d6      	bne.n	8008bfc <_svfiprintf_r+0x174>
 8008c4e:	89ab      	ldrh	r3, [r5, #12]
 8008c50:	065b      	lsls	r3, r3, #25
 8008c52:	f53f af2d 	bmi.w	8008ab0 <_svfiprintf_r+0x28>
 8008c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c58:	e72c      	b.n	8008ab4 <_svfiprintf_r+0x2c>
 8008c5a:	ab03      	add	r3, sp, #12
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	462a      	mov	r2, r5
 8008c60:	4b05      	ldr	r3, [pc, #20]	@ (8008c78 <_svfiprintf_r+0x1f0>)
 8008c62:	a904      	add	r1, sp, #16
 8008c64:	4638      	mov	r0, r7
 8008c66:	f000 f879 	bl	8008d5c <_printf_i>
 8008c6a:	e7ed      	b.n	8008c48 <_svfiprintf_r+0x1c0>
 8008c6c:	0800c0a4 	.word	0x0800c0a4
 8008c70:	0800c0ae 	.word	0x0800c0ae
 8008c74:	00000000 	.word	0x00000000
 8008c78:	080089d1 	.word	0x080089d1
 8008c7c:	0800c0aa 	.word	0x0800c0aa

08008c80 <_printf_common>:
 8008c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c84:	4616      	mov	r6, r2
 8008c86:	4698      	mov	r8, r3
 8008c88:	688a      	ldr	r2, [r1, #8]
 8008c8a:	690b      	ldr	r3, [r1, #16]
 8008c8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c90:	4293      	cmp	r3, r2
 8008c92:	bfb8      	it	lt
 8008c94:	4613      	movlt	r3, r2
 8008c96:	6033      	str	r3, [r6, #0]
 8008c98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	b10a      	cbz	r2, 8008ca6 <_printf_common+0x26>
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	6033      	str	r3, [r6, #0]
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	0699      	lsls	r1, r3, #26
 8008caa:	bf42      	ittt	mi
 8008cac:	6833      	ldrmi	r3, [r6, #0]
 8008cae:	3302      	addmi	r3, #2
 8008cb0:	6033      	strmi	r3, [r6, #0]
 8008cb2:	6825      	ldr	r5, [r4, #0]
 8008cb4:	f015 0506 	ands.w	r5, r5, #6
 8008cb8:	d106      	bne.n	8008cc8 <_printf_common+0x48>
 8008cba:	f104 0a19 	add.w	sl, r4, #25
 8008cbe:	68e3      	ldr	r3, [r4, #12]
 8008cc0:	6832      	ldr	r2, [r6, #0]
 8008cc2:	1a9b      	subs	r3, r3, r2
 8008cc4:	42ab      	cmp	r3, r5
 8008cc6:	dc26      	bgt.n	8008d16 <_printf_common+0x96>
 8008cc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ccc:	6822      	ldr	r2, [r4, #0]
 8008cce:	3b00      	subs	r3, #0
 8008cd0:	bf18      	it	ne
 8008cd2:	2301      	movne	r3, #1
 8008cd4:	0692      	lsls	r2, r2, #26
 8008cd6:	d42b      	bmi.n	8008d30 <_printf_common+0xb0>
 8008cd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008cdc:	4641      	mov	r1, r8
 8008cde:	4638      	mov	r0, r7
 8008ce0:	47c8      	blx	r9
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d01e      	beq.n	8008d24 <_printf_common+0xa4>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	6922      	ldr	r2, [r4, #16]
 8008cea:	f003 0306 	and.w	r3, r3, #6
 8008cee:	2b04      	cmp	r3, #4
 8008cf0:	bf02      	ittt	eq
 8008cf2:	68e5      	ldreq	r5, [r4, #12]
 8008cf4:	6833      	ldreq	r3, [r6, #0]
 8008cf6:	1aed      	subeq	r5, r5, r3
 8008cf8:	68a3      	ldr	r3, [r4, #8]
 8008cfa:	bf0c      	ite	eq
 8008cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d00:	2500      	movne	r5, #0
 8008d02:	4293      	cmp	r3, r2
 8008d04:	bfc4      	itt	gt
 8008d06:	1a9b      	subgt	r3, r3, r2
 8008d08:	18ed      	addgt	r5, r5, r3
 8008d0a:	2600      	movs	r6, #0
 8008d0c:	341a      	adds	r4, #26
 8008d0e:	42b5      	cmp	r5, r6
 8008d10:	d11a      	bne.n	8008d48 <_printf_common+0xc8>
 8008d12:	2000      	movs	r0, #0
 8008d14:	e008      	b.n	8008d28 <_printf_common+0xa8>
 8008d16:	2301      	movs	r3, #1
 8008d18:	4652      	mov	r2, sl
 8008d1a:	4641      	mov	r1, r8
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	47c8      	blx	r9
 8008d20:	3001      	adds	r0, #1
 8008d22:	d103      	bne.n	8008d2c <_printf_common+0xac>
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2c:	3501      	adds	r5, #1
 8008d2e:	e7c6      	b.n	8008cbe <_printf_common+0x3e>
 8008d30:	18e1      	adds	r1, r4, r3
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	2030      	movs	r0, #48	@ 0x30
 8008d36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d3a:	4422      	add	r2, r4
 8008d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d44:	3302      	adds	r3, #2
 8008d46:	e7c7      	b.n	8008cd8 <_printf_common+0x58>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	4622      	mov	r2, r4
 8008d4c:	4641      	mov	r1, r8
 8008d4e:	4638      	mov	r0, r7
 8008d50:	47c8      	blx	r9
 8008d52:	3001      	adds	r0, #1
 8008d54:	d0e6      	beq.n	8008d24 <_printf_common+0xa4>
 8008d56:	3601      	adds	r6, #1
 8008d58:	e7d9      	b.n	8008d0e <_printf_common+0x8e>
	...

08008d5c <_printf_i>:
 8008d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d60:	7e0f      	ldrb	r7, [r1, #24]
 8008d62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d64:	2f78      	cmp	r7, #120	@ 0x78
 8008d66:	4691      	mov	r9, r2
 8008d68:	4680      	mov	r8, r0
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	469a      	mov	sl, r3
 8008d6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d72:	d807      	bhi.n	8008d84 <_printf_i+0x28>
 8008d74:	2f62      	cmp	r7, #98	@ 0x62
 8008d76:	d80a      	bhi.n	8008d8e <_printf_i+0x32>
 8008d78:	2f00      	cmp	r7, #0
 8008d7a:	f000 80d2 	beq.w	8008f22 <_printf_i+0x1c6>
 8008d7e:	2f58      	cmp	r7, #88	@ 0x58
 8008d80:	f000 80b9 	beq.w	8008ef6 <_printf_i+0x19a>
 8008d84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d8c:	e03a      	b.n	8008e04 <_printf_i+0xa8>
 8008d8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d92:	2b15      	cmp	r3, #21
 8008d94:	d8f6      	bhi.n	8008d84 <_printf_i+0x28>
 8008d96:	a101      	add	r1, pc, #4	@ (adr r1, 8008d9c <_printf_i+0x40>)
 8008d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d9c:	08008df5 	.word	0x08008df5
 8008da0:	08008e09 	.word	0x08008e09
 8008da4:	08008d85 	.word	0x08008d85
 8008da8:	08008d85 	.word	0x08008d85
 8008dac:	08008d85 	.word	0x08008d85
 8008db0:	08008d85 	.word	0x08008d85
 8008db4:	08008e09 	.word	0x08008e09
 8008db8:	08008d85 	.word	0x08008d85
 8008dbc:	08008d85 	.word	0x08008d85
 8008dc0:	08008d85 	.word	0x08008d85
 8008dc4:	08008d85 	.word	0x08008d85
 8008dc8:	08008f09 	.word	0x08008f09
 8008dcc:	08008e33 	.word	0x08008e33
 8008dd0:	08008ec3 	.word	0x08008ec3
 8008dd4:	08008d85 	.word	0x08008d85
 8008dd8:	08008d85 	.word	0x08008d85
 8008ddc:	08008f2b 	.word	0x08008f2b
 8008de0:	08008d85 	.word	0x08008d85
 8008de4:	08008e33 	.word	0x08008e33
 8008de8:	08008d85 	.word	0x08008d85
 8008dec:	08008d85 	.word	0x08008d85
 8008df0:	08008ecb 	.word	0x08008ecb
 8008df4:	6833      	ldr	r3, [r6, #0]
 8008df6:	1d1a      	adds	r2, r3, #4
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6032      	str	r2, [r6, #0]
 8008dfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e04:	2301      	movs	r3, #1
 8008e06:	e09d      	b.n	8008f44 <_printf_i+0x1e8>
 8008e08:	6833      	ldr	r3, [r6, #0]
 8008e0a:	6820      	ldr	r0, [r4, #0]
 8008e0c:	1d19      	adds	r1, r3, #4
 8008e0e:	6031      	str	r1, [r6, #0]
 8008e10:	0606      	lsls	r6, r0, #24
 8008e12:	d501      	bpl.n	8008e18 <_printf_i+0xbc>
 8008e14:	681d      	ldr	r5, [r3, #0]
 8008e16:	e003      	b.n	8008e20 <_printf_i+0xc4>
 8008e18:	0645      	lsls	r5, r0, #25
 8008e1a:	d5fb      	bpl.n	8008e14 <_printf_i+0xb8>
 8008e1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e20:	2d00      	cmp	r5, #0
 8008e22:	da03      	bge.n	8008e2c <_printf_i+0xd0>
 8008e24:	232d      	movs	r3, #45	@ 0x2d
 8008e26:	426d      	negs	r5, r5
 8008e28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e2c:	4859      	ldr	r0, [pc, #356]	@ (8008f94 <_printf_i+0x238>)
 8008e2e:	230a      	movs	r3, #10
 8008e30:	e011      	b.n	8008e56 <_printf_i+0xfa>
 8008e32:	6821      	ldr	r1, [r4, #0]
 8008e34:	6833      	ldr	r3, [r6, #0]
 8008e36:	0608      	lsls	r0, r1, #24
 8008e38:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e3c:	d402      	bmi.n	8008e44 <_printf_i+0xe8>
 8008e3e:	0649      	lsls	r1, r1, #25
 8008e40:	bf48      	it	mi
 8008e42:	b2ad      	uxthmi	r5, r5
 8008e44:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e46:	4853      	ldr	r0, [pc, #332]	@ (8008f94 <_printf_i+0x238>)
 8008e48:	6033      	str	r3, [r6, #0]
 8008e4a:	bf14      	ite	ne
 8008e4c:	230a      	movne	r3, #10
 8008e4e:	2308      	moveq	r3, #8
 8008e50:	2100      	movs	r1, #0
 8008e52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e56:	6866      	ldr	r6, [r4, #4]
 8008e58:	60a6      	str	r6, [r4, #8]
 8008e5a:	2e00      	cmp	r6, #0
 8008e5c:	bfa2      	ittt	ge
 8008e5e:	6821      	ldrge	r1, [r4, #0]
 8008e60:	f021 0104 	bicge.w	r1, r1, #4
 8008e64:	6021      	strge	r1, [r4, #0]
 8008e66:	b90d      	cbnz	r5, 8008e6c <_printf_i+0x110>
 8008e68:	2e00      	cmp	r6, #0
 8008e6a:	d04b      	beq.n	8008f04 <_printf_i+0x1a8>
 8008e6c:	4616      	mov	r6, r2
 8008e6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e72:	fb03 5711 	mls	r7, r3, r1, r5
 8008e76:	5dc7      	ldrb	r7, [r0, r7]
 8008e78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e7c:	462f      	mov	r7, r5
 8008e7e:	42bb      	cmp	r3, r7
 8008e80:	460d      	mov	r5, r1
 8008e82:	d9f4      	bls.n	8008e6e <_printf_i+0x112>
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	d10b      	bne.n	8008ea0 <_printf_i+0x144>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	07df      	lsls	r7, r3, #31
 8008e8c:	d508      	bpl.n	8008ea0 <_printf_i+0x144>
 8008e8e:	6923      	ldr	r3, [r4, #16]
 8008e90:	6861      	ldr	r1, [r4, #4]
 8008e92:	4299      	cmp	r1, r3
 8008e94:	bfde      	ittt	le
 8008e96:	2330      	movle	r3, #48	@ 0x30
 8008e98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ea0:	1b92      	subs	r2, r2, r6
 8008ea2:	6122      	str	r2, [r4, #16]
 8008ea4:	f8cd a000 	str.w	sl, [sp]
 8008ea8:	464b      	mov	r3, r9
 8008eaa:	aa03      	add	r2, sp, #12
 8008eac:	4621      	mov	r1, r4
 8008eae:	4640      	mov	r0, r8
 8008eb0:	f7ff fee6 	bl	8008c80 <_printf_common>
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d14a      	bne.n	8008f4e <_printf_i+0x1f2>
 8008eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebc:	b004      	add	sp, #16
 8008ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	f043 0320 	orr.w	r3, r3, #32
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	4833      	ldr	r0, [pc, #204]	@ (8008f98 <_printf_i+0x23c>)
 8008ecc:	2778      	movs	r7, #120	@ 0x78
 8008ece:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	6831      	ldr	r1, [r6, #0]
 8008ed6:	061f      	lsls	r7, r3, #24
 8008ed8:	f851 5b04 	ldr.w	r5, [r1], #4
 8008edc:	d402      	bmi.n	8008ee4 <_printf_i+0x188>
 8008ede:	065f      	lsls	r7, r3, #25
 8008ee0:	bf48      	it	mi
 8008ee2:	b2ad      	uxthmi	r5, r5
 8008ee4:	6031      	str	r1, [r6, #0]
 8008ee6:	07d9      	lsls	r1, r3, #31
 8008ee8:	bf44      	itt	mi
 8008eea:	f043 0320 	orrmi.w	r3, r3, #32
 8008eee:	6023      	strmi	r3, [r4, #0]
 8008ef0:	b11d      	cbz	r5, 8008efa <_printf_i+0x19e>
 8008ef2:	2310      	movs	r3, #16
 8008ef4:	e7ac      	b.n	8008e50 <_printf_i+0xf4>
 8008ef6:	4827      	ldr	r0, [pc, #156]	@ (8008f94 <_printf_i+0x238>)
 8008ef8:	e7e9      	b.n	8008ece <_printf_i+0x172>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	f023 0320 	bic.w	r3, r3, #32
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	e7f6      	b.n	8008ef2 <_printf_i+0x196>
 8008f04:	4616      	mov	r6, r2
 8008f06:	e7bd      	b.n	8008e84 <_printf_i+0x128>
 8008f08:	6833      	ldr	r3, [r6, #0]
 8008f0a:	6825      	ldr	r5, [r4, #0]
 8008f0c:	6961      	ldr	r1, [r4, #20]
 8008f0e:	1d18      	adds	r0, r3, #4
 8008f10:	6030      	str	r0, [r6, #0]
 8008f12:	062e      	lsls	r6, r5, #24
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	d501      	bpl.n	8008f1c <_printf_i+0x1c0>
 8008f18:	6019      	str	r1, [r3, #0]
 8008f1a:	e002      	b.n	8008f22 <_printf_i+0x1c6>
 8008f1c:	0668      	lsls	r0, r5, #25
 8008f1e:	d5fb      	bpl.n	8008f18 <_printf_i+0x1bc>
 8008f20:	8019      	strh	r1, [r3, #0]
 8008f22:	2300      	movs	r3, #0
 8008f24:	6123      	str	r3, [r4, #16]
 8008f26:	4616      	mov	r6, r2
 8008f28:	e7bc      	b.n	8008ea4 <_printf_i+0x148>
 8008f2a:	6833      	ldr	r3, [r6, #0]
 8008f2c:	1d1a      	adds	r2, r3, #4
 8008f2e:	6032      	str	r2, [r6, #0]
 8008f30:	681e      	ldr	r6, [r3, #0]
 8008f32:	6862      	ldr	r2, [r4, #4]
 8008f34:	2100      	movs	r1, #0
 8008f36:	4630      	mov	r0, r6
 8008f38:	f7f7 f94a 	bl	80001d0 <memchr>
 8008f3c:	b108      	cbz	r0, 8008f42 <_printf_i+0x1e6>
 8008f3e:	1b80      	subs	r0, r0, r6
 8008f40:	6060      	str	r0, [r4, #4]
 8008f42:	6863      	ldr	r3, [r4, #4]
 8008f44:	6123      	str	r3, [r4, #16]
 8008f46:	2300      	movs	r3, #0
 8008f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f4c:	e7aa      	b.n	8008ea4 <_printf_i+0x148>
 8008f4e:	6923      	ldr	r3, [r4, #16]
 8008f50:	4632      	mov	r2, r6
 8008f52:	4649      	mov	r1, r9
 8008f54:	4640      	mov	r0, r8
 8008f56:	47d0      	blx	sl
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d0ad      	beq.n	8008eb8 <_printf_i+0x15c>
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	079b      	lsls	r3, r3, #30
 8008f60:	d413      	bmi.n	8008f8a <_printf_i+0x22e>
 8008f62:	68e0      	ldr	r0, [r4, #12]
 8008f64:	9b03      	ldr	r3, [sp, #12]
 8008f66:	4298      	cmp	r0, r3
 8008f68:	bfb8      	it	lt
 8008f6a:	4618      	movlt	r0, r3
 8008f6c:	e7a6      	b.n	8008ebc <_printf_i+0x160>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	4632      	mov	r2, r6
 8008f72:	4649      	mov	r1, r9
 8008f74:	4640      	mov	r0, r8
 8008f76:	47d0      	blx	sl
 8008f78:	3001      	adds	r0, #1
 8008f7a:	d09d      	beq.n	8008eb8 <_printf_i+0x15c>
 8008f7c:	3501      	adds	r5, #1
 8008f7e:	68e3      	ldr	r3, [r4, #12]
 8008f80:	9903      	ldr	r1, [sp, #12]
 8008f82:	1a5b      	subs	r3, r3, r1
 8008f84:	42ab      	cmp	r3, r5
 8008f86:	dcf2      	bgt.n	8008f6e <_printf_i+0x212>
 8008f88:	e7eb      	b.n	8008f62 <_printf_i+0x206>
 8008f8a:	2500      	movs	r5, #0
 8008f8c:	f104 0619 	add.w	r6, r4, #25
 8008f90:	e7f5      	b.n	8008f7e <_printf_i+0x222>
 8008f92:	bf00      	nop
 8008f94:	0800c0b5 	.word	0x0800c0b5
 8008f98:	0800c0c6 	.word	0x0800c0c6

08008f9c <memmove>:
 8008f9c:	4288      	cmp	r0, r1
 8008f9e:	b510      	push	{r4, lr}
 8008fa0:	eb01 0402 	add.w	r4, r1, r2
 8008fa4:	d902      	bls.n	8008fac <memmove+0x10>
 8008fa6:	4284      	cmp	r4, r0
 8008fa8:	4623      	mov	r3, r4
 8008faa:	d807      	bhi.n	8008fbc <memmove+0x20>
 8008fac:	1e43      	subs	r3, r0, #1
 8008fae:	42a1      	cmp	r1, r4
 8008fb0:	d008      	beq.n	8008fc4 <memmove+0x28>
 8008fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fba:	e7f8      	b.n	8008fae <memmove+0x12>
 8008fbc:	4402      	add	r2, r0
 8008fbe:	4601      	mov	r1, r0
 8008fc0:	428a      	cmp	r2, r1
 8008fc2:	d100      	bne.n	8008fc6 <memmove+0x2a>
 8008fc4:	bd10      	pop	{r4, pc}
 8008fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fce:	e7f7      	b.n	8008fc0 <memmove+0x24>

08008fd0 <_sbrk_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d06      	ldr	r5, [pc, #24]	@ (8008fec <_sbrk_r+0x1c>)
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	4608      	mov	r0, r1
 8008fda:	602b      	str	r3, [r5, #0]
 8008fdc:	f7f9 fefc 	bl	8002dd8 <_sbrk>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d102      	bne.n	8008fea <_sbrk_r+0x1a>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	b103      	cbz	r3, 8008fea <_sbrk_r+0x1a>
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	20000594 	.word	0x20000594

08008ff0 <memcpy>:
 8008ff0:	440a      	add	r2, r1
 8008ff2:	4291      	cmp	r1, r2
 8008ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ff8:	d100      	bne.n	8008ffc <memcpy+0xc>
 8008ffa:	4770      	bx	lr
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009006:	4291      	cmp	r1, r2
 8009008:	d1f9      	bne.n	8008ffe <memcpy+0xe>
 800900a:	bd10      	pop	{r4, pc}

0800900c <_realloc_r>:
 800900c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009010:	4680      	mov	r8, r0
 8009012:	4615      	mov	r5, r2
 8009014:	460c      	mov	r4, r1
 8009016:	b921      	cbnz	r1, 8009022 <_realloc_r+0x16>
 8009018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800901c:	4611      	mov	r1, r2
 800901e:	f7ff bc4b 	b.w	80088b8 <_malloc_r>
 8009022:	b92a      	cbnz	r2, 8009030 <_realloc_r+0x24>
 8009024:	f7ff fbdc 	bl	80087e0 <_free_r>
 8009028:	2400      	movs	r4, #0
 800902a:	4620      	mov	r0, r4
 800902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009030:	f000 f81a 	bl	8009068 <_malloc_usable_size_r>
 8009034:	4285      	cmp	r5, r0
 8009036:	4606      	mov	r6, r0
 8009038:	d802      	bhi.n	8009040 <_realloc_r+0x34>
 800903a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800903e:	d8f4      	bhi.n	800902a <_realloc_r+0x1e>
 8009040:	4629      	mov	r1, r5
 8009042:	4640      	mov	r0, r8
 8009044:	f7ff fc38 	bl	80088b8 <_malloc_r>
 8009048:	4607      	mov	r7, r0
 800904a:	2800      	cmp	r0, #0
 800904c:	d0ec      	beq.n	8009028 <_realloc_r+0x1c>
 800904e:	42b5      	cmp	r5, r6
 8009050:	462a      	mov	r2, r5
 8009052:	4621      	mov	r1, r4
 8009054:	bf28      	it	cs
 8009056:	4632      	movcs	r2, r6
 8009058:	f7ff ffca 	bl	8008ff0 <memcpy>
 800905c:	4621      	mov	r1, r4
 800905e:	4640      	mov	r0, r8
 8009060:	f7ff fbbe 	bl	80087e0 <_free_r>
 8009064:	463c      	mov	r4, r7
 8009066:	e7e0      	b.n	800902a <_realloc_r+0x1e>

08009068 <_malloc_usable_size_r>:
 8009068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800906c:	1f18      	subs	r0, r3, #4
 800906e:	2b00      	cmp	r3, #0
 8009070:	bfbc      	itt	lt
 8009072:	580b      	ldrlt	r3, [r1, r0]
 8009074:	18c0      	addlt	r0, r0, r3
 8009076:	4770      	bx	lr

08009078 <_init>:
 8009078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907a:	bf00      	nop
 800907c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907e:	bc08      	pop	{r3}
 8009080:	469e      	mov	lr, r3
 8009082:	4770      	bx	lr

08009084 <_fini>:
 8009084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009086:	bf00      	nop
 8009088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800908a:	bc08      	pop	{r3}
 800908c:	469e      	mov	lr, r3
 800908e:	4770      	bx	lr
