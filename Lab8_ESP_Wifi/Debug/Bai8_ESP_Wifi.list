
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bca8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033d8  0800be38  0800be38  0001be38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f210  0800f210  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f210  0800f210  0001f210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f218  0800f218  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f218  0800f218  0001f218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f21c  0800f21c  0001f21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800f220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000004a0  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000067c  2000067c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019869  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004352  00000000  00000000  00039ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001748  00000000  00000000  0003de10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001207  00000000  00000000  0003f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026cbe  00000000  00000000  0004075f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020011  00000000  00000000  0006741d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e213c  00000000  00000000  0008742e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000757c  00000000  00000000  0016956c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00170ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be20 	.word	0x0800be20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800be20 	.word	0x0800be20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001004:	4a3d      	ldr	r2, [pc, #244]	; (80010fc <MX_ADC1_Init+0x10c>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001008:	4b3b      	ldr	r3, [pc, #236]	; (80010f8 <MX_ADC1_Init+0x108>)
 800100a:	2200      	movs	r2, #0
 800100c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800100e:	4b3a      	ldr	r3, [pc, #232]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001014:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001016:	2201      	movs	r2, #1
 8001018:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800101a:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <MX_ADC1_Init+0x108>)
 800101c:	2200      	movs	r2, #0
 800101e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001020:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001028:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <MX_ADC1_Init+0x108>)
 800102a:	2200      	movs	r2, #0
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001030:	4a33      	ldr	r2, [pc, #204]	; (8001100 <MX_ADC1_Init+0x110>)
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001034:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800103a:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <MX_ADC1_Init+0x108>)
 800103c:	2205      	movs	r2, #5
 800103e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <MX_ADC1_Init+0x108>)
 800104a:	2201      	movs	r2, #1
 800104c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104e:	482a      	ldr	r0, [pc, #168]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001050:	f001 fe5a 	bl	8002d08 <HAL_ADC_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800105a:	f001 f87b 	bl	8002154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800105e:	2308      	movs	r3, #8
 8001060:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4822      	ldr	r0, [pc, #136]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001070:	f001 ffbc 	bl	8002fec <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800107a:	f001 f86b 	bl	8002154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800107e:	2309      	movs	r3, #9
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001082:	2302      	movs	r3, #2
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	481b      	ldr	r0, [pc, #108]	; (80010f8 <MX_ADC1_Init+0x108>)
 800108c:	f001 ffae 	bl	8002fec <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001096:	f001 f85d 	bl	8002154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800109a:	230a      	movs	r3, #10
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800109e:	2303      	movs	r3, #3
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4814      	ldr	r0, [pc, #80]	; (80010f8 <MX_ADC1_Init+0x108>)
 80010a8:	f001 ffa0 	bl	8002fec <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80010b2:	f001 f84f 	bl	8002154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010b6:	230b      	movs	r3, #11
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_ADC1_Init+0x108>)
 80010c4:	f001 ff92 	bl	8002fec <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80010ce:	f001 f841 	bl	8002154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010d2:	230c      	movs	r3, #12
 80010d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80010d6:	2305      	movs	r3, #5
 80010d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <MX_ADC1_Init+0x108>)
 80010e0:	f001 ff84 	bl	8002fec <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80010ea:	f001 f833 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001f8 	.word	0x200001f8
 80010fc:	40012000 	.word	0x40012000
 8001100:	0f000001 	.word	0x0f000001

08001104 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a3c      	ldr	r2, [pc, #240]	; (8001214 <HAL_ADC_MspInit+0x110>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d171      	bne.n	800120a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HAL_ADC_MspInit+0x114>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a3a      	ldr	r2, [pc, #232]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b34      	ldr	r3, [pc, #208]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a33      	ldr	r2, [pc, #204]	; (8001218 <HAL_ADC_MspInit+0x114>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b31      	ldr	r3, [pc, #196]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800117a:	2307      	movs	r3, #7
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4823      	ldr	r0, [pc, #140]	; (800121c <HAL_ADC_MspInit+0x118>)
 800118e:	f002 fee1 	bl	8003f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001192:	2303      	movs	r3, #3
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	481e      	ldr	r0, [pc, #120]	; (8001220 <HAL_ADC_MspInit+0x11c>)
 80011a6:	f002 fed5 	bl	8003f54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011ac:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <HAL_ADC_MspInit+0x124>)
 80011ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011f0:	f002 faae 	bl	8003750 <HAL_DMA_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80011fa:	f000 ffab 	bl	8002154 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_ADC_MspInit+0x120>)
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_ADC_MspInit+0x120>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40012000 	.word	0x40012000
 8001218:	40023800 	.word	0x40023800
 800121c:	40020800 	.word	0x40020800
 8001220:	40020400 	.word	0x40020400
 8001224:	20000240 	.word	0x20000240
 8001228:	40026410 	.word	0x40026410

0800122c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001230:	2201      	movs	r2, #1
 8001232:	2108      	movs	r1, #8
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <button_init+0x14>)
 8001236:	f003 f829 	bl	800428c <HAL_GPIO_WritePin>
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020c00 	.word	0x40020c00

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_DMA_Init+0x3c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <MX_DMA_Init+0x3c>)
 8001254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_DMA_Init+0x3c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	2038      	movs	r0, #56	; 0x38
 800126c:	f002 fa39 	bl	80036e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001270:	2038      	movs	r0, #56	; 0x38
 8001272:	f002 fa52 	bl	800371a <HAL_NVIC_EnableIRQ>

}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	; 0x38
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]
 80012ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <MX_FSMC_Init+0xec>)
 80012b2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012b6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <MX_FSMC_Init+0xec>)
 80012ba:	4a2e      	ldr	r2, [pc, #184]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012bc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80012be:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <MX_FSMC_Init+0xec>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80012c4:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <MX_FSMC_Init+0xec>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <MX_FSMC_Init+0xec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <MX_FSMC_Init+0xec>)
 80012d2:	2210      	movs	r2, #16
 80012d4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <MX_FSMC_Init+0xec>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <MX_FSMC_Init+0xec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <MX_FSMC_Init+0xec>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_FSMC_Init+0xec>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_FSMC_Init+0xec>)
 80012f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_FSMC_Init+0xec>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_FSMC_Init+0xec>)
 80012fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001302:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_FSMC_Init+0xec>)
 8001306:	2200      	movs	r2, #0
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_FSMC_Init+0xec>)
 800130c:	2200      	movs	r2, #0
 800130e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_FSMC_Init+0xec>)
 8001312:	2200      	movs	r2, #0
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001316:	230f      	movs	r3, #15
 8001318:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800131a:	230f      	movs	r3, #15
 800131c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800131e:	233c      	movs	r3, #60	; 0x3c
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001326:	2310      	movs	r3, #16
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800132a:	2311      	movs	r3, #17
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800132e:	2300      	movs	r3, #0
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001332:	2308      	movs	r3, #8
 8001334:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001336:	230f      	movs	r3, #15
 8001338:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800133a:	2309      	movs	r3, #9
 800133c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001342:	2310      	movs	r3, #16
 8001344:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001346:	2311      	movs	r3, #17
 8001348:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800134e:	463a      	mov	r2, r7
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_FSMC_Init+0xec>)
 8001358:	f004 f838 	bl	80053cc <HAL_SRAM_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001362:	f000 fef7 	bl	8002154 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001366:	bf00      	nop
 8001368:	3738      	adds	r7, #56	; 0x38
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200002a0 	.word	0x200002a0
 8001374:	a0000104 	.word	0xa0000104

08001378 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_FSMC_MspInit+0x88>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d131      	bne.n	80013f8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <HAL_FSMC_MspInit+0x88>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_FSMC_MspInit+0x8c>)
 80013a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a2:	4a18      	ldr	r2, [pc, #96]	; (8001404 <HAL_FSMC_MspInit+0x8c>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6393      	str	r3, [r2, #56]	; 0x38
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <HAL_FSMC_MspInit+0x8c>)
 80013ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80013b6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80013ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013c8:	230c      	movs	r3, #12
 80013ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <HAL_FSMC_MspInit+0x90>)
 80013d2:	f002 fdbf 	bl	8003f54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013d6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80013da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013e8:	230c      	movs	r3, #12
 80013ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4806      	ldr	r0, [pc, #24]	; (800140c <HAL_FSMC_MspInit+0x94>)
 80013f2:	f002 fdaf 	bl	8003f54 <HAL_GPIO_Init>
 80013f6:	e000      	b.n	80013fa <HAL_FSMC_MspInit+0x82>
    return;
 80013f8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200002f0 	.word	0x200002f0
 8001404:	40023800 	.word	0x40023800
 8001408:	40021000 	.word	0x40021000
 800140c:	40020c00 	.word	0x40020c00

08001410 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001418:	f7ff ffae 	bl	8001378 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	; 0x38
 8001428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	623b      	str	r3, [r7, #32]
 800143e:	4b8f      	ldr	r3, [pc, #572]	; (800167c <MX_GPIO_Init+0x258>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a8e      	ldr	r2, [pc, #568]	; (800167c <MX_GPIO_Init+0x258>)
 8001444:	f043 0310 	orr.w	r3, r3, #16
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b8c      	ldr	r3, [pc, #560]	; (800167c <MX_GPIO_Init+0x258>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	623b      	str	r3, [r7, #32]
 8001454:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	4b88      	ldr	r3, [pc, #544]	; (800167c <MX_GPIO_Init+0x258>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a87      	ldr	r2, [pc, #540]	; (800167c <MX_GPIO_Init+0x258>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b85      	ldr	r3, [pc, #532]	; (800167c <MX_GPIO_Init+0x258>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	4b81      	ldr	r3, [pc, #516]	; (800167c <MX_GPIO_Init+0x258>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a80      	ldr	r2, [pc, #512]	; (800167c <MX_GPIO_Init+0x258>)
 800147c:	f043 0320 	orr.w	r3, r3, #32
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b7e      	ldr	r3, [pc, #504]	; (800167c <MX_GPIO_Init+0x258>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	4b7a      	ldr	r3, [pc, #488]	; (800167c <MX_GPIO_Init+0x258>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a79      	ldr	r2, [pc, #484]	; (800167c <MX_GPIO_Init+0x258>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b77      	ldr	r3, [pc, #476]	; (800167c <MX_GPIO_Init+0x258>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b73      	ldr	r3, [pc, #460]	; (800167c <MX_GPIO_Init+0x258>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a72      	ldr	r2, [pc, #456]	; (800167c <MX_GPIO_Init+0x258>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b70      	ldr	r3, [pc, #448]	; (800167c <MX_GPIO_Init+0x258>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b6c      	ldr	r3, [pc, #432]	; (800167c <MX_GPIO_Init+0x258>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a6b      	ldr	r2, [pc, #428]	; (800167c <MX_GPIO_Init+0x258>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b69      	ldr	r3, [pc, #420]	; (800167c <MX_GPIO_Init+0x258>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	4b65      	ldr	r3, [pc, #404]	; (800167c <MX_GPIO_Init+0x258>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a64      	ldr	r2, [pc, #400]	; (800167c <MX_GPIO_Init+0x258>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <MX_GPIO_Init+0x258>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b5e      	ldr	r3, [pc, #376]	; (800167c <MX_GPIO_Init+0x258>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a5d      	ldr	r2, [pc, #372]	; (800167c <MX_GPIO_Init+0x258>)
 8001508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b5b      	ldr	r3, [pc, #364]	; (800167c <MX_GPIO_Init+0x258>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2170      	movs	r1, #112	; 0x70
 800151e:	4858      	ldr	r0, [pc, #352]	; (8001680 <MX_GPIO_Init+0x25c>)
 8001520:	f002 feb4 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 800152a:	4856      	ldr	r0, [pc, #344]	; (8001684 <MX_GPIO_Init+0x260>)
 800152c:	f002 feae 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001536:	4854      	ldr	r0, [pc, #336]	; (8001688 <MX_GPIO_Init+0x264>)
 8001538:	f002 fea8 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001542:	4852      	ldr	r0, [pc, #328]	; (800168c <MX_GPIO_Init+0x268>)
 8001544:	f002 fea2 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154e:	4850      	ldr	r0, [pc, #320]	; (8001690 <MX_GPIO_Init+0x26c>)
 8001550:	f002 fe9c 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2108      	movs	r1, #8
 8001558:	484e      	ldr	r0, [pc, #312]	; (8001694 <MX_GPIO_Init+0x270>)
 800155a:	f002 fe97 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800155e:	2370      	movs	r3, #112	; 0x70
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	4842      	ldr	r0, [pc, #264]	; (8001680 <MX_GPIO_Init+0x25c>)
 8001576:	f002 fced 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 800157a:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	483c      	ldr	r0, [pc, #240]	; (8001684 <MX_GPIO_Init+0x260>)
 8001594:	f002 fcde 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8001598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	4836      	ldr	r0, [pc, #216]	; (8001688 <MX_GPIO_Init+0x264>)
 80015ae:	f002 fcd1 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 80015b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	482f      	ldr	r0, [pc, #188]	; (8001688 <MX_GPIO_Init+0x264>)
 80015cc:	f002 fcc2 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80015d0:	23c0      	movs	r3, #192	; 0xc0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	482b      	ldr	r0, [pc, #172]	; (8001690 <MX_GPIO_Init+0x26c>)
 80015e4:	f002 fcb6 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80015e8:	2330      	movs	r3, #48	; 0x30
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	4619      	mov	r1, r3
 80015fa:	4822      	ldr	r0, [pc, #136]	; (8001684 <MX_GPIO_Init+0x260>)
 80015fc:	f002 fcaa 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001600:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	481c      	ldr	r0, [pc, #112]	; (800168c <MX_GPIO_Init+0x268>)
 800161a:	f002 fc9b 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 800161e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001628:	2301      	movs	r3, #1
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4814      	ldr	r0, [pc, #80]	; (8001684 <MX_GPIO_Init+0x260>)
 8001634:	f002 fc8e 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164e:	4619      	mov	r1, r3
 8001650:	480f      	ldr	r0, [pc, #60]	; (8001690 <MX_GPIO_Init+0x26c>)
 8001652:	f002 fc7f 	bl	8003f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001656:	2308      	movs	r3, #8
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <MX_GPIO_Init+0x270>)
 800166e:	f002 fc71 	bl	8003f54 <HAL_GPIO_Init>

}
 8001672:	bf00      	nop
 8001674:	3738      	adds	r7, #56	; 0x38
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40021000 	.word	0x40021000
 8001684:	40020800 	.word	0x40020800
 8001688:	40021400 	.word	0x40021400
 800168c:	40021800 	.word	0x40021800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020c00 	.word	0x40020c00

08001698 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MX_I2C1_Init+0x50>)
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <MX_I2C1_Init+0x54>)
 80016a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016a4:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <MX_I2C1_Init+0x58>)
 80016a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016d6:	f002 fdf3 	bl	80042c0 <HAL_I2C_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016e0:	f000 fd38 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200002f4 	.word	0x200002f4
 80016ec:	40005400 	.word	0x40005400
 80016f0:	000186a0 	.word	0x000186a0

080016f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a19      	ldr	r2, [pc, #100]	; (8001778 <HAL_I2C_MspInit+0x84>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12b      	bne.n	800176e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_I2C_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_I2C_MspInit+0x88>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_I2C_MspInit+0x88>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001732:	23c0      	movs	r3, #192	; 0xc0
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001736:	2312      	movs	r3, #18
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001742:	2304      	movs	r3, #4
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <HAL_I2C_MspInit+0x8c>)
 800174e:	f002 fc01 	bl	8003f54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_I2C_MspInit+0x88>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a08      	ldr	r2, [pc, #32]	; (800177c <HAL_I2C_MspInit+0x88>)
 800175c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_I2C_MspInit+0x88>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40005400 	.word	0x40005400
 800177c:	40023800 	.word	0x40023800
 8001780:	40020400 	.word	0x40020400

08001784 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <LCD_WR_REG+0x1c>)
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	8013      	strh	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	600ffffe 	.word	0x600ffffe

080017a4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <LCD_WR_DATA+0x1c>)
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	8053      	strh	r3, [r2, #2]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	600ffffe 	.word	0x600ffffe

080017c4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <LCD_RD_DATA+0x20>)
 80017cc:	885b      	ldrh	r3, [r3, #2]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	b29b      	uxth	r3, r3
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	600ffffe 	.word	0x600ffffe

080017e8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4604      	mov	r4, r0
 80017f0:	4608      	mov	r0, r1
 80017f2:	4611      	mov	r1, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	4623      	mov	r3, r4
 80017f8:	80fb      	strh	r3, [r7, #6]
 80017fa:	4603      	mov	r3, r0
 80017fc:	80bb      	strh	r3, [r7, #4]
 80017fe:	460b      	mov	r3, r1
 8001800:	807b      	strh	r3, [r7, #2]
 8001802:	4613      	mov	r3, r2
 8001804:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001806:	202a      	movs	r0, #42	; 0x2a
 8001808:	f7ff ffbc 	bl	8001784 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	b29b      	uxth	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffc6 	bl	80017a4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	b29b      	uxth	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ffc0 	bl	80017a4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001824:	887b      	ldrh	r3, [r7, #2]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	b29b      	uxth	r3, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ffba 	bl	80017a4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	b29b      	uxth	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ffb4 	bl	80017a4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800183c:	202b      	movs	r0, #43	; 0x2b
 800183e:	f7ff ffa1 	bl	8001784 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001842:	88bb      	ldrh	r3, [r7, #4]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	b29b      	uxth	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ffab 	bl	80017a4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800184e:	88bb      	ldrh	r3, [r7, #4]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	b29b      	uxth	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ffa5 	bl	80017a4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800185a:	883b      	ldrh	r3, [r7, #0]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	b29b      	uxth	r3, r3
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff9f 	bl	80017a4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001866:	883b      	ldrh	r3, [r7, #0]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	b29b      	uxth	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff99 	bl	80017a4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001872:	202c      	movs	r0, #44	; 0x2c
 8001874:	f7ff ff86 	bl	8001784 <LCD_WR_REG>
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bd90      	pop	{r4, r7, pc}

08001880 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <lcd_Clear+0x60>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <lcd_Clear+0x60>)
 8001894:	885b      	ldrh	r3, [r3, #2]
 8001896:	3b01      	subs	r3, #1
 8001898:	b29b      	uxth	r3, r3
 800189a:	2100      	movs	r1, #0
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff ffa3 	bl	80017e8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	81fb      	strh	r3, [r7, #14]
 80018a6:	e011      	b.n	80018cc <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	81bb      	strh	r3, [r7, #12]
 80018ac:	e006      	b.n	80018bc <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff77 	bl	80017a4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80018b6:	89bb      	ldrh	r3, [r7, #12]
 80018b8:	3301      	adds	r3, #1
 80018ba:	81bb      	strh	r3, [r7, #12]
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <lcd_Clear+0x60>)
 80018be:	885b      	ldrh	r3, [r3, #2]
 80018c0:	89ba      	ldrh	r2, [r7, #12]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d3f3      	bcc.n	80018ae <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80018c6:	89fb      	ldrh	r3, [r7, #14]
 80018c8:	3301      	adds	r3, #1
 80018ca:	81fb      	strh	r3, [r7, #14]
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <lcd_Clear+0x60>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	89fa      	ldrh	r2, [r7, #14]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3e8      	bcc.n	80018a8 <lcd_Clear+0x28>
		}
	}
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000348 	.word	0x20000348

080018e4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	80fb      	strh	r3, [r7, #6]
 80018ee:	460b      	mov	r3, r1
 80018f0:	80bb      	strh	r3, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80018f6:	88bb      	ldrh	r3, [r7, #4]
 80018f8:	88fa      	ldrh	r2, [r7, #6]
 80018fa:	88b9      	ldrh	r1, [r7, #4]
 80018fc:	88f8      	ldrh	r0, [r7, #6]
 80018fe:	f7ff ff73 	bl	80017e8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff4d 	bl	80017a4 <LCD_WR_DATA>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	4604      	mov	r4, r0
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4623      	mov	r3, r4
 8001924:	80fb      	strh	r3, [r7, #6]
 8001926:	4603      	mov	r3, r0
 8001928:	80bb      	strh	r3, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	70fb      	strb	r3, [r7, #3]
 800192e:	4613      	mov	r3, r2
 8001930:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001932:	2300      	movs	r3, #0
 8001934:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800193a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800193e:	085b      	lsrs	r3, r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf14      	ite	ne
 8001956:	2301      	movne	r3, #1
 8001958:	2300      	moveq	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4413      	add	r3, r2
 800195e:	b29a      	uxth	r2, r3
 8001960:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001964:	b29b      	uxth	r3, r3
 8001966:	fb12 f303 	smulbb	r3, r2, r3
 800196a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	3b20      	subs	r3, #32
 8001970:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	b29a      	uxth	r2, r3
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	4413      	add	r3, r2
 800197a:	b29b      	uxth	r3, r3
 800197c:	3b01      	subs	r3, #1
 800197e:	b29c      	uxth	r4, r3
 8001980:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001984:	b29a      	uxth	r2, r3
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	b29b      	uxth	r3, r3
 800198c:	3b01      	subs	r3, #1
 800198e:	b29b      	uxth	r3, r3
 8001990:	88b9      	ldrh	r1, [r7, #4]
 8001992:	88f8      	ldrh	r0, [r7, #6]
 8001994:	4622      	mov	r2, r4
 8001996:	f7ff ff27 	bl	80017e8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800199a:	2300      	movs	r3, #0
 800199c:	827b      	strh	r3, [r7, #18]
 800199e:	e07a      	b.n	8001a96 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80019a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	d028      	beq.n	80019fa <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80019a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019ac:	2b10      	cmp	r3, #16
 80019ae:	d108      	bne.n	80019c2 <lcd_ShowChar+0xae>
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	8a7b      	ldrh	r3, [r7, #18]
 80019b4:	493c      	ldr	r1, [pc, #240]	; (8001aa8 <lcd_ShowChar+0x194>)
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	440a      	add	r2, r1
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	75fb      	strb	r3, [r7, #23]
 80019c0:	e01b      	b.n	80019fa <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 80019c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019c6:	2b18      	cmp	r3, #24
 80019c8:	d10b      	bne.n	80019e2 <lcd_ShowChar+0xce>
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	8a79      	ldrh	r1, [r7, #18]
 80019ce:	4837      	ldr	r0, [pc, #220]	; (8001aac <lcd_ShowChar+0x198>)
 80019d0:	4613      	mov	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	4403      	add	r3, r0
 80019da:	440b      	add	r3, r1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	75fb      	strb	r3, [r7, #23]
 80019e0:	e00b      	b.n	80019fa <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80019e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	d15a      	bne.n	8001aa0 <lcd_ShowChar+0x18c>
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	8a7b      	ldrh	r3, [r7, #18]
 80019ee:	4930      	ldr	r1, [pc, #192]	; (8001ab0 <lcd_ShowChar+0x19c>)
 80019f0:	0192      	lsls	r2, r2, #6
 80019f2:	440a      	add	r2, r1
 80019f4:	4413      	add	r3, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	75bb      	strb	r3, [r7, #22]
 80019fe:	e044      	b.n	8001a8a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001a00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d120      	bne.n	8001a4a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001a08:	7dfa      	ldrb	r2, [r7, #23]
 8001a0a:	7dbb      	ldrb	r3, [r7, #22]
 8001a0c:	fa42 f303 	asr.w	r3, r2, r3
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <lcd_ShowChar+0x10e>
 8001a18:	883b      	ldrh	r3, [r7, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fec2 	bl	80017a4 <LCD_WR_DATA>
 8001a20:	e003      	b.n	8001a2a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001a22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff febd 	bl	80017a4 <LCD_WR_DATA>
				m++;
 8001a2a:	7d7b      	ldrb	r3, [r7, #21]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001a30:	7d7b      	ldrb	r3, [r7, #21]
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a38:	fb01 f202 	mul.w	r2, r1, r2
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d11f      	bne.n	8001a84 <lcd_ShowChar+0x170>
				{
					m=0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	757b      	strb	r3, [r7, #21]
					break;
 8001a48:	e022      	b.n	8001a90 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001a4a:	7dfa      	ldrb	r2, [r7, #23]
 8001a4c:	7dbb      	ldrb	r3, [r7, #22]
 8001a4e:	fa42 f303 	asr.w	r3, r2, r3
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <lcd_ShowChar+0x152>
 8001a5a:	883a      	ldrh	r2, [r7, #0]
 8001a5c:	88b9      	ldrh	r1, [r7, #4]
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff3f 	bl	80018e4 <lcd_DrawPoint>
				x++;
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001a6c:	88fa      	ldrh	r2, [r7, #6]
 8001a6e:	8a3b      	ldrh	r3, [r7, #16]
 8001a70:	1ad2      	subs	r2, r2, r3
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d105      	bne.n	8001a84 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001a78:	8a3b      	ldrh	r3, [r7, #16]
 8001a7a:	80fb      	strh	r3, [r7, #6]
					y++;
 8001a7c:	88bb      	ldrh	r3, [r7, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	80bb      	strh	r3, [r7, #4]
					break;
 8001a82:	e005      	b.n	8001a90 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001a84:	7dbb      	ldrb	r3, [r7, #22]
 8001a86:	3301      	adds	r3, #1
 8001a88:	75bb      	strb	r3, [r7, #22]
 8001a8a:	7dbb      	ldrb	r3, [r7, #22]
 8001a8c:	2b07      	cmp	r3, #7
 8001a8e:	d9b7      	bls.n	8001a00 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001a90:	8a7b      	ldrh	r3, [r7, #18]
 8001a92:	3301      	adds	r3, #1
 8001a94:	827b      	strh	r3, [r7, #18]
 8001a96:	8a7a      	ldrh	r2, [r7, #18]
 8001a98:	89bb      	ldrh	r3, [r7, #12]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d380      	bcc.n	80019a0 <lcd_ShowChar+0x8c>
 8001a9e:	e000      	b.n	8001aa2 <lcd_ShowChar+0x18e>
		else return;
 8001aa0:	bf00      	nop
				}
			}
		}
	}
}
 8001aa2:	371c      	adds	r7, #28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd90      	pop	{r4, r7, pc}
 8001aa8:	0800be44 	.word	0x0800be44
 8001aac:	0800c434 	.word	0x0800c434
 8001ab0:	0800d604 	.word	0x0800d604

08001ab4 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <lcd_SetDir+0x44>)
 8001ad0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ad4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <lcd_SetDir+0x44>)
 8001ad8:	22f0      	movs	r2, #240	; 0xf0
 8001ada:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001adc:	e006      	b.n	8001aec <lcd_SetDir+0x38>
		lcddev.width=240;
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <lcd_SetDir+0x44>)
 8001ae0:	22f0      	movs	r2, #240	; 0xf0
 8001ae2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <lcd_SetDir+0x44>)
 8001ae6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001aea:	805a      	strh	r2, [r3, #2]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	20000348 	.word	0x20000348

08001afc <lcd_init>:


void lcd_init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b06:	48aa      	ldr	r0, [pc, #680]	; (8001db0 <lcd_init+0x2b4>)
 8001b08:	f002 fbc0 	bl	800428c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001b0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b10:	f001 f8d6 	bl	8002cc0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1a:	48a5      	ldr	r0, [pc, #660]	; (8001db0 <lcd_init+0x2b4>)
 8001b1c:	f002 fbb6 	bl	800428c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b24:	f001 f8cc 	bl	8002cc0 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff ffc3 	bl	8001ab4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001b2e:	20d3      	movs	r0, #211	; 0xd3
 8001b30:	f7ff fe28 	bl	8001784 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001b34:	f7ff fe46 	bl	80017c4 <LCD_RD_DATA>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b9d      	ldr	r3, [pc, #628]	; (8001db4 <lcd_init+0x2b8>)
 8001b3e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001b40:	f7ff fe40 	bl	80017c4 <LCD_RD_DATA>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b9a      	ldr	r3, [pc, #616]	; (8001db4 <lcd_init+0x2b8>)
 8001b4a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001b4c:	f7ff fe3a 	bl	80017c4 <LCD_RD_DATA>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b97      	ldr	r3, [pc, #604]	; (8001db4 <lcd_init+0x2b8>)
 8001b56:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001b58:	4b96      	ldr	r3, [pc, #600]	; (8001db4 <lcd_init+0x2b8>)
 8001b5a:	889b      	ldrh	r3, [r3, #4]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	4b94      	ldr	r3, [pc, #592]	; (8001db4 <lcd_init+0x2b8>)
 8001b62:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001b64:	f7ff fe2e 	bl	80017c4 <LCD_RD_DATA>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b91      	ldr	r3, [pc, #580]	; (8001db4 <lcd_init+0x2b8>)
 8001b6e:	889b      	ldrh	r3, [r3, #4]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	4b8f      	ldr	r3, [pc, #572]	; (8001db4 <lcd_init+0x2b8>)
 8001b76:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001b78:	20cf      	movs	r0, #207	; 0xcf
 8001b7a:	f7ff fe03 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff fe10 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001b84:	20c1      	movs	r0, #193	; 0xc1
 8001b86:	f7ff fe0d 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001b8a:	2030      	movs	r0, #48	; 0x30
 8001b8c:	f7ff fe0a 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001b90:	20ed      	movs	r0, #237	; 0xed
 8001b92:	f7ff fdf7 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001b96:	2064      	movs	r0, #100	; 0x64
 8001b98:	f7ff fe04 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f7ff fe01 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001ba2:	2012      	movs	r0, #18
 8001ba4:	f7ff fdfe 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001ba8:	2081      	movs	r0, #129	; 0x81
 8001baa:	f7ff fdfb 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001bae:	20e8      	movs	r0, #232	; 0xe8
 8001bb0:	f7ff fde8 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001bb4:	2085      	movs	r0, #133	; 0x85
 8001bb6:	f7ff fdf5 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001bba:	2010      	movs	r0, #16
 8001bbc:	f7ff fdf2 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001bc0:	207a      	movs	r0, #122	; 0x7a
 8001bc2:	f7ff fdef 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001bc6:	20cb      	movs	r0, #203	; 0xcb
 8001bc8:	f7ff fddc 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001bcc:	2039      	movs	r0, #57	; 0x39
 8001bce:	f7ff fde9 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001bd2:	202c      	movs	r0, #44	; 0x2c
 8001bd4:	f7ff fde6 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff fde3 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001bde:	2034      	movs	r0, #52	; 0x34
 8001be0:	f7ff fde0 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001be4:	2002      	movs	r0, #2
 8001be6:	f7ff fddd 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001bea:	20f7      	movs	r0, #247	; 0xf7
 8001bec:	f7ff fdca 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001bf0:	2020      	movs	r0, #32
 8001bf2:	f7ff fdd7 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001bf6:	20ea      	movs	r0, #234	; 0xea
 8001bf8:	f7ff fdc4 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff fdd1 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff fdce 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001c08:	20c0      	movs	r0, #192	; 0xc0
 8001c0a:	f7ff fdbb 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001c0e:	201b      	movs	r0, #27
 8001c10:	f7ff fdc8 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001c14:	20c1      	movs	r0, #193	; 0xc1
 8001c16:	f7ff fdb5 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f7ff fdc2 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001c20:	20c5      	movs	r0, #197	; 0xc5
 8001c22:	f7ff fdaf 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001c26:	2030      	movs	r0, #48	; 0x30
 8001c28:	f7ff fdbc 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001c2c:	2030      	movs	r0, #48	; 0x30
 8001c2e:	f7ff fdb9 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001c32:	20c7      	movs	r0, #199	; 0xc7
 8001c34:	f7ff fda6 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001c38:	20b7      	movs	r0, #183	; 0xb7
 8001c3a:	f7ff fdb3 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001c3e:	2036      	movs	r0, #54	; 0x36
 8001c40:	f7ff fda0 	bl	8001784 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001c44:	2008      	movs	r0, #8
 8001c46:	f7ff fdad 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001c4a:	203a      	movs	r0, #58	; 0x3a
 8001c4c:	f7ff fd9a 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001c50:	2055      	movs	r0, #85	; 0x55
 8001c52:	f7ff fda7 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001c56:	20b1      	movs	r0, #177	; 0xb1
 8001c58:	f7ff fd94 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7ff fda1 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001c62:	201a      	movs	r0, #26
 8001c64:	f7ff fd9e 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001c68:	20b6      	movs	r0, #182	; 0xb6
 8001c6a:	f7ff fd8b 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001c6e:	200a      	movs	r0, #10
 8001c70:	f7ff fd98 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001c74:	20a2      	movs	r0, #162	; 0xa2
 8001c76:	f7ff fd95 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001c7a:	20f2      	movs	r0, #242	; 0xf2
 8001c7c:	f7ff fd82 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7ff fd8f 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001c86:	2026      	movs	r0, #38	; 0x26
 8001c88:	f7ff fd7c 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7ff fd89 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001c92:	20e0      	movs	r0, #224	; 0xe0
 8001c94:	f7ff fd76 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001c98:	200f      	movs	r0, #15
 8001c9a:	f7ff fd83 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001c9e:	202a      	movs	r0, #42	; 0x2a
 8001ca0:	f7ff fd80 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001ca4:	2028      	movs	r0, #40	; 0x28
 8001ca6:	f7ff fd7d 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001caa:	2008      	movs	r0, #8
 8001cac:	f7ff fd7a 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001cb0:	200e      	movs	r0, #14
 8001cb2:	f7ff fd77 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001cb6:	2008      	movs	r0, #8
 8001cb8:	f7ff fd74 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001cbc:	2054      	movs	r0, #84	; 0x54
 8001cbe:	f7ff fd71 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001cc2:	20a9      	movs	r0, #169	; 0xa9
 8001cc4:	f7ff fd6e 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001cc8:	2043      	movs	r0, #67	; 0x43
 8001cca:	f7ff fd6b 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001cce:	200a      	movs	r0, #10
 8001cd0:	f7ff fd68 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001cd4:	200f      	movs	r0, #15
 8001cd6:	f7ff fd65 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f7ff fd62 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f7ff fd5f 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff fd5c 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7ff fd59 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001cf2:	20e1      	movs	r0, #225	; 0xe1
 8001cf4:	f7ff fd46 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff fd53 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001cfe:	2015      	movs	r0, #21
 8001d00:	f7ff fd50 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001d04:	2017      	movs	r0, #23
 8001d06:	f7ff fd4d 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001d0a:	2007      	movs	r0, #7
 8001d0c:	f7ff fd4a 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001d10:	2011      	movs	r0, #17
 8001d12:	f7ff fd47 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001d16:	2006      	movs	r0, #6
 8001d18:	f7ff fd44 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001d1c:	202b      	movs	r0, #43	; 0x2b
 8001d1e:	f7ff fd41 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001d22:	2056      	movs	r0, #86	; 0x56
 8001d24:	f7ff fd3e 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001d28:	203c      	movs	r0, #60	; 0x3c
 8001d2a:	f7ff fd3b 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001d2e:	2005      	movs	r0, #5
 8001d30:	f7ff fd38 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d34:	2010      	movs	r0, #16
 8001d36:	f7ff fd35 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f7ff fd32 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001d40:	203f      	movs	r0, #63	; 0x3f
 8001d42:	f7ff fd2f 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001d46:	203f      	movs	r0, #63	; 0x3f
 8001d48:	f7ff fd2c 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001d4c:	200f      	movs	r0, #15
 8001d4e:	f7ff fd29 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001d52:	202b      	movs	r0, #43	; 0x2b
 8001d54:	f7ff fd16 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff fd23 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff fd20 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f7ff fd1d 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001d6a:	203f      	movs	r0, #63	; 0x3f
 8001d6c:	f7ff fd1a 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001d70:	202a      	movs	r0, #42	; 0x2a
 8001d72:	f7ff fd07 	bl	8001784 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f7ff fd14 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff fd11 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff fd0e 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001d88:	20ef      	movs	r0, #239	; 0xef
 8001d8a:	f7ff fd0b 	bl	80017a4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001d8e:	2011      	movs	r0, #17
 8001d90:	f7ff fcf8 	bl	8001784 <LCD_WR_REG>
	HAL_Delay(120);
 8001d94:	2078      	movs	r0, #120	; 0x78
 8001d96:	f000 ff93 	bl	8002cc0 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001d9a:	2029      	movs	r0, #41	; 0x29
 8001d9c:	f7ff fcf2 	bl	8001784 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001da0:	2201      	movs	r2, #1
 8001da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da6:	4804      	ldr	r0, [pc, #16]	; (8001db8 <lcd_init+0x2bc>)
 8001da8:	f002 fa70 	bl	800428c <HAL_GPIO_WritePin>
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40020800 	.word	0x40020800
 8001db4:	20000348 	.word	0x20000348
 8001db8:	40020000 	.word	0x40020000

08001dbc <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b08b      	sub	sp, #44	; 0x2c
 8001dc0:	af04      	add	r7, sp, #16
 8001dc2:	60ba      	str	r2, [r7, #8]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	81fb      	strh	r3, [r7, #14]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	81bb      	strh	r3, [r7, #12]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
 8001dd4:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001dda:	e048      	b.n	8001e6e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d145      	bne.n	8001e6e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001de2:	89fa      	ldrh	r2, [r7, #14]
 8001de4:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <lcd_ShowStr+0xc4>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	1acb      	subs	r3, r1, r3
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dc3f      	bgt.n	8001e78 <lcd_ShowStr+0xbc>
 8001df8:	89ba      	ldrh	r2, [r7, #12]
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <lcd_ShowStr+0xc4>)
 8001dfc:	885b      	ldrh	r3, [r3, #2]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e04:	1acb      	subs	r3, r1, r3
 8001e06:	429a      	cmp	r2, r3
 8001e08:	dc36      	bgt.n	8001e78 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b80      	cmp	r3, #128	; 0x80
 8001e10:	d902      	bls.n	8001e18 <lcd_ShowStr+0x5c>
 8001e12:	2301      	movs	r3, #1
 8001e14:	75fb      	strb	r3, [r7, #23]
 8001e16:	e02a      	b.n	8001e6e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b0d      	cmp	r3, #13
 8001e1e:	d10b      	bne.n	8001e38 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001e20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	89bb      	ldrh	r3, [r7, #12]
 8001e28:	4413      	add	r3, r2
 8001e2a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001e2c:	8abb      	ldrh	r3, [r7, #20]
 8001e2e:	81fb      	strh	r3, [r7, #14]
					str++;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	3301      	adds	r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	e017      	b.n	8001e68 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	88fc      	ldrh	r4, [r7, #6]
 8001e3e:	89b9      	ldrh	r1, [r7, #12]
 8001e40:	89f8      	ldrh	r0, [r7, #14]
 8001e42:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	4623      	mov	r3, r4
 8001e54:	f7ff fd5e 	bl	8001914 <lcd_ShowChar>
					x+=sizey/2;
 8001e58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	89fb      	ldrh	r3, [r7, #14]
 8001e64:	4413      	add	r3, r2
 8001e66:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1b2      	bne.n	8001ddc <lcd_ShowStr+0x20>
 8001e76:	e000      	b.n	8001e7a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001e78:	bf00      	nop
			}
		}
	}
}
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd90      	pop	{r4, r7, pc}
 8001e80:	20000348 	.word	0x20000348

08001e84 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001e88:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <led7_Scan+0x104>)
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <led7_Scan+0x104>)
 8001e92:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001e94:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <led7_Scan+0x108>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a3d      	ldr	r2, [pc, #244]	; (8001f90 <led7_Scan+0x10c>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <led7_Scan+0x104>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <led7_Scan+0x104>)
 8001eae:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001eb0:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <led7_Scan+0x108>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d847      	bhi.n	8001f48 <led7_Scan+0xc4>
 8001eb8:	a201      	add	r2, pc, #4	; (adr r2, 8001ec0 <led7_Scan+0x3c>)
 8001eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebe:	bf00      	nop
 8001ec0:	08001ed1 	.word	0x08001ed1
 8001ec4:	08001eef 	.word	0x08001eef
 8001ec8:	08001f0d 	.word	0x08001f0d
 8001ecc:	08001f2b 	.word	0x08001f2b
	case 0:
		spi_buffer |= 0x00b0;
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <led7_Scan+0x104>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <led7_Scan+0x104>)
 8001edc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001ede:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <led7_Scan+0x104>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <led7_Scan+0x104>)
 8001eea:	801a      	strh	r2, [r3, #0]
		break;
 8001eec:	e02d      	b.n	8001f4a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <led7_Scan+0x104>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <led7_Scan+0x104>)
 8001efa:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001efc:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <led7_Scan+0x104>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	f023 0320 	bic.w	r3, r3, #32
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <led7_Scan+0x104>)
 8001f08:	801a      	strh	r2, [r3, #0]
		break;
 8001f0a:	e01e      	b.n	8001f4a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <led7_Scan+0x104>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <led7_Scan+0x104>)
 8001f18:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <led7_Scan+0x104>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	f023 0310 	bic.w	r3, r3, #16
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <led7_Scan+0x104>)
 8001f26:	801a      	strh	r2, [r3, #0]
		break;
 8001f28:	e00f      	b.n	8001f4a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <led7_Scan+0x104>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <led7_Scan+0x104>)
 8001f36:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <led7_Scan+0x104>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <led7_Scan+0x104>)
 8001f44:	801a      	strh	r2, [r3, #0]
		break;
 8001f46:	e000      	b.n	8001f4a <led7_Scan+0xc6>
	default:
		break;
 8001f48:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <led7_Scan+0x108>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	425a      	negs	r2, r3
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	f002 0203 	and.w	r2, r2, #3
 8001f5a:	bf58      	it	pl
 8001f5c:	4253      	negpl	r3, r2
 8001f5e:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <led7_Scan+0x108>)
 8001f60:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2140      	movs	r1, #64	; 0x40
 8001f66:	480b      	ldr	r0, [pc, #44]	; (8001f94 <led7_Scan+0x110>)
 8001f68:	f002 f990 	bl	800428c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4905      	ldr	r1, [pc, #20]	; (8001f88 <led7_Scan+0x104>)
 8001f72:	4809      	ldr	r0, [pc, #36]	; (8001f98 <led7_Scan+0x114>)
 8001f74:	f003 f809 	bl	8004f8a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	2140      	movs	r1, #64	; 0x40
 8001f7c:	4805      	ldr	r0, [pc, #20]	; (8001f94 <led7_Scan+0x110>)
 8001f7e:	f002 f985 	bl	800428c <HAL_GPIO_WritePin>
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000004 	.word	0x20000004
 8001f8c:	20000350 	.word	0x20000350
 8001f90:	20000000 	.word	0x20000000
 8001f94:	40021800 	.word	0x40021800
 8001f98:	20000364 	.word	0x20000364

08001f9c <system_init>:
void test_LedDebug();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void system_init(){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	  timer_init();
 8001fa0:	f000 f918 	bl	80021d4 <timer_init>
	  button_init();
 8001fa4:	f7ff f942 	bl	800122c <button_init>
	  lcd_init();
 8001fa8:	f7ff fda8 	bl	8001afc <lcd_init>
	  uart_init_esp();
 8001fac:	f000 fcac 	bl	8002908 <uart_init_esp>
	  sensor_init();
 8001fb0:	f000 f8d6 	bl	8002160 <sensor_init>
	  setTimer2(50);
 8001fb4:	2032      	movs	r0, #50	; 0x32
 8001fb6:	f000 f91b 	bl	80021f0 <setTimer2>
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc6:	f000 fe09 	bl	8002bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fca:	f000 f859 	bl	8002080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fce:	f7ff fa29 	bl	8001424 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fd2:	f7ff f937 	bl	8001244 <MX_DMA_Init>
  MX_SPI1_Init();
 8001fd6:	f000 f951 	bl	800227c <MX_SPI1_Init>
  MX_FSMC_Init();
 8001fda:	f7ff f953 	bl	8001284 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001fde:	f7ff fb5b 	bl	8001698 <MX_I2C1_Init>
  MX_TIM13_Init();
 8001fe2:	f000 fbb7 	bl	8002754 <MX_TIM13_Init>
  MX_TIM2_Init();
 8001fe6:	f000 fb69 	bl	80026bc <MX_TIM2_Init>
  MX_ADC1_Init();
 8001fea:	f7ff f801 	bl	8000ff0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001fee:	f000 fb15 	bl	800261c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001ff2:	f000 fd13 	bl	8002a1c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001ff6:	f000 fce7 	bl	80029c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001ffa:	f7ff ffcf 	bl	8001f9c <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
// char result[20];
 lcd_Clear(BLACK);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7ff fc3e 	bl	8001880 <lcd_Clear>
 while (1)
  {
    /* USER CODE END WHILE */
	 if(flag_timer2 == 1){
 8002004:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <main+0xb8>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d1fb      	bne.n	8002004 <main+0x44>
		 	sensor_Read();
 800200c:	f000 f8b6 	bl	800217c <sensor_Read>

		    char result[20];
		    memset(result, 0, sizeof(result));  // Initialize result with null characters
 8002010:	463b      	mov	r3, r7
 8002012:	2214      	movs	r2, #20
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f006 fac7 	bl	80085aa <memset>

		    float temperature = sensor_GetTemperature();
 800201c:	f000 f8bc 	bl	8002198 <sensor_GetTemperature>
 8002020:	ed87 0a05 	vstr	s0, [r7, #20]

		    // Create the string without decimal places // Temporary buffer for formatting temperature as string
		    snprintf(result, sizeof(result), "!TEMP:%.2f#", temperature);
 8002024:	6978      	ldr	r0, [r7, #20]
 8002026:	f7fe fa8f 	bl	8000548 <__aeabi_f2d>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4638      	mov	r0, r7
 8002030:	e9cd 2300 	strd	r2, r3, [sp]
 8002034:	4a11      	ldr	r2, [pc, #68]	; (800207c <main+0xbc>)
 8002036:	2114      	movs	r1, #20
 8002038:	f006 fa20 	bl	800847c <sniprintf>

		    // Construct the final result string


		    lcd_ShowStr(10, 50, result, GREEN, BLACK, 24, 0);
 800203c:	463a      	mov	r2, r7
 800203e:	2300      	movs	r3, #0
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	2318      	movs	r3, #24
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	2300      	movs	r3, #0
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800204e:	2132      	movs	r1, #50	; 0x32
 8002050:	200a      	movs	r0, #10
 8002052:	f7ff feb3 	bl	8001dbc <lcd_ShowStr>

		    // Send the result string through UART
		    uart_EspSendBytes((uint8_t*)result, strlen(result));
 8002056:	463b      	mov	r3, r7
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe f909 	bl	8000270 <strlen>
 800205e:	4603      	mov	r3, r0
 8002060:	b29a      	uxth	r2, r3
 8002062:	463b      	mov	r3, r7
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fc64 	bl	8002934 <uart_EspSendBytes>

		    setTimer2(30000);
 800206c:	f247 5030 	movw	r0, #30000	; 0x7530
 8002070:	f000 f8be 	bl	80021f0 <setTimer2>
	 if(flag_timer2 == 1){
 8002074:	e7c6      	b.n	8002004 <main+0x44>
 8002076:	bf00      	nop
 8002078:	2000035e 	.word	0x2000035e
 800207c:	0800be38 	.word	0x0800be38

08002080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b094      	sub	sp, #80	; 0x50
 8002084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002086:	f107 0320 	add.w	r3, r7, #32
 800208a:	2230      	movs	r2, #48	; 0x30
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f006 fa8b 	bl	80085aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <SystemClock_Config+0xcc>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	4a27      	ldr	r2, [pc, #156]	; (800214c <SystemClock_Config+0xcc>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b2:	6413      	str	r3, [r2, #64]	; 0x40
 80020b4:	4b25      	ldr	r3, [pc, #148]	; (800214c <SystemClock_Config+0xcc>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c0:	2300      	movs	r3, #0
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <SystemClock_Config+0xd0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a21      	ldr	r2, [pc, #132]	; (8002150 <SystemClock_Config+0xd0>)
 80020ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <SystemClock_Config+0xd0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020dc:	2302      	movs	r3, #2
 80020de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020e0:	2301      	movs	r3, #1
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020e4:	2310      	movs	r3, #16
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e8:	2302      	movs	r3, #2
 80020ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020f0:	2308      	movs	r3, #8
 80020f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80020f4:	23a8      	movs	r3, #168	; 0xa8
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020f8:	2302      	movs	r3, #2
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020fc:	2304      	movs	r3, #4
 80020fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002100:	f107 0320 	add.w	r3, r7, #32
 8002104:	4618      	mov	r0, r3
 8002106:	f002 fa1f 	bl	8004548 <HAL_RCC_OscConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002110:	f000 f820 	bl	8002154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002114:	230f      	movs	r3, #15
 8002116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002118:	2302      	movs	r3, #2
 800211a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002120:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002126:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800212a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	2105      	movs	r1, #5
 8002132:	4618      	mov	r0, r3
 8002134:	f002 fc80 	bl	8004a38 <HAL_RCC_ClockConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800213e:	f000 f809 	bl	8002154 <Error_Handler>
  }
}
 8002142:	bf00      	nop
 8002144:	3750      	adds	r7, #80	; 0x50
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800
 8002150:	40007000 	.word	0x40007000

08002154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002158:	b672      	cpsid	i
}
 800215a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800215c:	e7fe      	b.n	800215c <Error_Handler+0x8>
	...

08002160 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002164:	2205      	movs	r2, #5
 8002166:	4903      	ldr	r1, [pc, #12]	; (8002174 <sensor_init+0x14>)
 8002168:	4803      	ldr	r0, [pc, #12]	; (8002178 <sensor_init+0x18>)
 800216a:	f000 fe11 	bl	8002d90 <HAL_ADC_Start_DMA>
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000354 	.word	0x20000354
 8002178:	200001f8 	.word	0x200001f8

0800217c <sensor_Read>:

void sensor_Read(){
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002180:	2205      	movs	r2, #5
 8002182:	4903      	ldr	r1, [pc, #12]	; (8002190 <sensor_Read+0x14>)
 8002184:	4803      	ldr	r0, [pc, #12]	; (8002194 <sensor_Read+0x18>)
 8002186:	f000 fe03 	bl	8002d90 <HAL_ADC_Start_DMA>
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000354 	.word	0x20000354
 8002194:	200001f8 	.word	0x200001f8

08002198 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <sensor_GetTemperature+0x30>)
 800219e:	891b      	ldrh	r3, [r3, #8]
 80021a0:	ee07 3a90 	vmov	s15, r3
 80021a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021a8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80021cc <sensor_GetTemperature+0x34>
 80021ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80021d0 <sensor_GetTemperature+0x38>
 80021b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80021bc:	eeb0 0a67 	vmov.f32	s0, s15
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	20000354 	.word	0x20000354
 80021cc:	43a50000 	.word	0x43a50000
 80021d0:	457ff000 	.word	0x457ff000

080021d4 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80021d8:	4803      	ldr	r0, [pc, #12]	; (80021e8 <timer_init+0x14>)
 80021da:	f003 f9f7 	bl	80055cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80021de:	4803      	ldr	r0, [pc, #12]	; (80021ec <timer_init+0x18>)
 80021e0:	f003 f98c 	bl	80054fc <HAL_TIM_Base_Start>
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000408 	.word	0x20000408
 80021ec:	200003c0 	.word	0x200003c0

080021f0 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <setTimer2+0x2c>)
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <setTimer2+0x2c>)
 8002202:	881a      	ldrh	r2, [r3, #0]
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <setTimer2+0x30>)
 8002206:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <setTimer2+0x34>)
 800220a:	2200      	movs	r2, #0
 800220c:	801a      	strh	r2, [r3, #0]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000362 	.word	0x20000362
 8002220:	20000360 	.word	0x20000360
 8002224:	2000035e 	.word	0x2000035e

08002228 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002238:	d116      	bne.n	8002268 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	3b01      	subs	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800224c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002258:	2201      	movs	r2, #1
 800225a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800225e:	881a      	ldrh	r2, [r3, #0]
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002262:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002264:	f7ff fe0e 	bl	8001e84 <led7_Scan>
	}
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000360 	.word	0x20000360
 8002274:	2000035e 	.word	0x2000035e
 8002278:	20000362 	.word	0x20000362

0800227c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <MX_SPI1_Init+0x64>)
 8002282:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <MX_SPI1_Init+0x68>)
 8002284:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <MX_SPI1_Init+0x64>)
 8002288:	f44f 7282 	mov.w	r2, #260	; 0x104
 800228c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_SPI1_Init+0x64>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <MX_SPI1_Init+0x64>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_SPI1_Init+0x64>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_SPI1_Init+0x64>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_SPI1_Init+0x64>)
 80022a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_SPI1_Init+0x64>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <MX_SPI1_Init+0x64>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_SPI1_Init+0x64>)
 80022bc:	2200      	movs	r2, #0
 80022be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <MX_SPI1_Init+0x64>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_SPI1_Init+0x64>)
 80022c8:	220a      	movs	r2, #10
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022cc:	4804      	ldr	r0, [pc, #16]	; (80022e0 <MX_SPI1_Init+0x64>)
 80022ce:	f002 fdd3 	bl	8004e78 <HAL_SPI_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022d8:	f7ff ff3c 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000364 	.word	0x20000364
 80022e4:	40013000 	.word	0x40013000

080022e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a19      	ldr	r2, [pc, #100]	; (800236c <HAL_SPI_MspInit+0x84>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d12b      	bne.n	8002362 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_SPI_MspInit+0x88>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_SPI_MspInit+0x88>)
 8002314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_SPI_MspInit+0x88>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_SPI_MspInit+0x88>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a10      	ldr	r2, [pc, #64]	; (8002370 <HAL_SPI_MspInit+0x88>)
 8002330:	f043 0302 	orr.w	r3, r3, #2
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <HAL_SPI_MspInit+0x88>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002342:	2338      	movs	r3, #56	; 0x38
 8002344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002352:	2305      	movs	r3, #5
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	4619      	mov	r1, r3
 800235c:	4805      	ldr	r0, [pc, #20]	; (8002374 <HAL_SPI_MspInit+0x8c>)
 800235e:	f001 fdf9 	bl	8003f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40013000 	.word	0x40013000
 8002370:	40023800 	.word	0x40023800
 8002374:	40020400 	.word	0x40020400

08002378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_MspInit+0x4c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <HAL_MspInit+0x4c>)
 8002388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_MspInit+0x4c>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_MspInit+0x4c>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <HAL_MspInit+0x4c>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_MspInit+0x4c>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800

080023c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <NMI_Handler+0x4>

080023ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <HardFault_Handler+0x4>

080023d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <MemManage_Handler+0x4>

080023da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023de:	e7fe      	b.n	80023de <BusFault_Handler+0x4>

080023e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <UsageFault_Handler+0x4>

080023e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002414:	f000 fc34 	bl	8002c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}

0800241c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <TIM2_IRQHandler+0x10>)
 8002422:	f003 f99c 	bl	800575e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000408 	.word	0x20000408

08002430 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <USART1_IRQHandler+0x10>)
 8002436:	f004 f8bb 	bl	80065b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000049c 	.word	0x2000049c

08002444 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <USART2_IRQHandler+0x10>)
 800244a:	f004 f8b1 	bl	80065b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200004e4 	.word	0x200004e4

08002458 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <DMA2_Stream0_IRQHandler+0x10>)
 800245e:	f001 fb0f 	bl	8003a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000240 	.word	0x20000240

0800246c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
	return 1;
 8002470:	2301      	movs	r3, #1
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_kill>:

int _kill(int pid, int sig)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002486:	f006 f8e3 	bl	8008650 <__errno>
 800248a:	4603      	mov	r3, r0
 800248c:	2216      	movs	r2, #22
 800248e:	601a      	str	r2, [r3, #0]
	return -1;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <_exit>:

void _exit (int status)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ffe7 	bl	800247c <_kill>
	while (1) {}		/* Make sure we hang here */
 80024ae:	e7fe      	b.n	80024ae <_exit+0x12>

080024b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	e00a      	b.n	80024d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024c2:	f3af 8000 	nop.w
 80024c6:	4601      	mov	r1, r0
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	60ba      	str	r2, [r7, #8]
 80024ce:	b2ca      	uxtb	r2, r1
 80024d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3301      	adds	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	dbf0      	blt.n	80024c2 <_read+0x12>
	}

return len;
 80024e0:	687b      	ldr	r3, [r7, #4]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e009      	b.n	8002510 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	60ba      	str	r2, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	429a      	cmp	r2, r3
 8002516:	dbf1      	blt.n	80024fc <_write+0x12>
	}
	return len;
 8002518:	687b      	ldr	r3, [r7, #4]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <_close>:

int _close(int file)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
	return -1;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800254a:	605a      	str	r2, [r3, #4]
	return 0;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_isatty>:

int _isatty(int file)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
	return 1;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
	return 0;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <_sbrk+0x5c>)
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <_sbrk+0x60>)
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <_sbrk+0x64>)
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <_sbrk+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d207      	bcs.n	80025cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025bc:	f006 f848 	bl	8008650 <__errno>
 80025c0:	4603      	mov	r3, r0
 80025c2:	220c      	movs	r2, #12
 80025c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	e009      	b.n	80025e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <_sbrk+0x64>)
 80025dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20020000 	.word	0x20020000
 80025ec:	00000400 	.word	0x00000400
 80025f0:	200003bc 	.word	0x200003bc
 80025f4:	20000680 	.word	0x20000680

080025f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <SystemInit+0x20>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <SystemInit+0x20>)
 8002604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002630:	463b      	mov	r3, r7
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002638:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <MX_TIM1_Init+0x98>)
 800263a:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <MX_TIM1_Init+0x9c>)
 800263c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <MX_TIM1_Init+0x98>)
 8002640:	2253      	movs	r2, #83	; 0x53
 8002642:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <MX_TIM1_Init+0x98>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800264a:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <MX_TIM1_Init+0x98>)
 800264c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002650:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <MX_TIM1_Init+0x98>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002658:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <MX_TIM1_Init+0x98>)
 800265a:	2200      	movs	r2, #0
 800265c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <MX_TIM1_Init+0x98>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002664:	4813      	ldr	r0, [pc, #76]	; (80026b4 <MX_TIM1_Init+0x98>)
 8002666:	f002 fef9 	bl	800545c <HAL_TIM_Base_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002670:	f7ff fd70 	bl	8002154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002678:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	4619      	mov	r1, r3
 8002680:	480c      	ldr	r0, [pc, #48]	; (80026b4 <MX_TIM1_Init+0x98>)
 8002682:	f003 fa1f 	bl	8005ac4 <HAL_TIM_ConfigClockSource>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800268c:	f7ff fd62 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002698:	463b      	mov	r3, r7
 800269a:	4619      	mov	r1, r3
 800269c:	4805      	ldr	r0, [pc, #20]	; (80026b4 <MX_TIM1_Init+0x98>)
 800269e:	f003 fdf7 	bl	8006290 <HAL_TIMEx_MasterConfigSynchronization>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80026a8:	f7ff fd54 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026ac:	bf00      	nop
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200003c0 	.word	0x200003c0
 80026b8:	40010000 	.word	0x40010000

080026bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026c2:	f107 0308 	add.w	r3, r7, #8
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d0:	463b      	mov	r3, r7
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <MX_TIM2_Init+0x94>)
 80026da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80026e0:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <MX_TIM2_Init+0x94>)
 80026e2:	f240 3247 	movw	r2, #839	; 0x347
 80026e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <MX_TIM2_Init+0x94>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <MX_TIM2_Init+0x94>)
 80026f0:	2263      	movs	r2, #99	; 0x63
 80026f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f4:	4b16      	ldr	r3, [pc, #88]	; (8002750 <MX_TIM2_Init+0x94>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fa:	4b15      	ldr	r3, [pc, #84]	; (8002750 <MX_TIM2_Init+0x94>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002700:	4813      	ldr	r0, [pc, #76]	; (8002750 <MX_TIM2_Init+0x94>)
 8002702:	f002 feab 	bl	800545c <HAL_TIM_Base_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800270c:	f7ff fd22 	bl	8002154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002714:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002716:	f107 0308 	add.w	r3, r7, #8
 800271a:	4619      	mov	r1, r3
 800271c:	480c      	ldr	r0, [pc, #48]	; (8002750 <MX_TIM2_Init+0x94>)
 800271e:	f003 f9d1 	bl	8005ac4 <HAL_TIM_ConfigClockSource>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002728:	f7ff fd14 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272c:	2300      	movs	r3, #0
 800272e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002734:	463b      	mov	r3, r7
 8002736:	4619      	mov	r1, r3
 8002738:	4805      	ldr	r0, [pc, #20]	; (8002750 <MX_TIM2_Init+0x94>)
 800273a:	f003 fda9 	bl	8006290 <HAL_TIMEx_MasterConfigSynchronization>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002744:	f7ff fd06 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002748:	bf00      	nop
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000408 	.word	0x20000408

08002754 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
 8002768:	615a      	str	r2, [r3, #20]
 800276a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800276c:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <MX_TIM13_Init+0x94>)
 800276e:	4a1f      	ldr	r2, [pc, #124]	; (80027ec <MX_TIM13_Init+0x98>)
 8002770:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <MX_TIM13_Init+0x94>)
 8002774:	f240 3247 	movw	r2, #839	; 0x347
 8002778:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <MX_TIM13_Init+0x94>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <MX_TIM13_Init+0x94>)
 8002782:	2263      	movs	r2, #99	; 0x63
 8002784:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <MX_TIM13_Init+0x94>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278c:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <MX_TIM13_Init+0x94>)
 800278e:	2200      	movs	r2, #0
 8002790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002792:	4815      	ldr	r0, [pc, #84]	; (80027e8 <MX_TIM13_Init+0x94>)
 8002794:	f002 fe62 	bl	800545c <HAL_TIM_Base_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800279e:	f7ff fcd9 	bl	8002154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80027a2:	4811      	ldr	r0, [pc, #68]	; (80027e8 <MX_TIM13_Init+0x94>)
 80027a4:	f002 ff82 	bl	80056ac <HAL_TIM_PWM_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80027ae:	f7ff fcd1 	bl	8002154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027b2:	2360      	movs	r3, #96	; 0x60
 80027b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2200      	movs	r2, #0
 80027c6:	4619      	mov	r1, r3
 80027c8:	4807      	ldr	r0, [pc, #28]	; (80027e8 <MX_TIM13_Init+0x94>)
 80027ca:	f003 f8b9 	bl	8005940 <HAL_TIM_PWM_ConfigChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80027d4:	f7ff fcbe 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80027d8:	4803      	ldr	r0, [pc, #12]	; (80027e8 <MX_TIM13_Init+0x94>)
 80027da:	f000 f85b 	bl	8002894 <HAL_TIM_MspPostInit>

}
 80027de:	bf00      	nop
 80027e0:	3720      	adds	r7, #32
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000450 	.word	0x20000450
 80027ec:	40001c00 	.word	0x40001c00

080027f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a22      	ldr	r2, [pc, #136]	; (8002888 <HAL_TIM_Base_MspInit+0x98>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d10e      	bne.n	8002820 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <HAL_TIM_Base_MspInit+0x9c>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a20      	ldr	r2, [pc, #128]	; (800288c <HAL_TIM_Base_MspInit+0x9c>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <HAL_TIM_Base_MspInit+0x9c>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800281e:	e02e      	b.n	800287e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002828:	d116      	bne.n	8002858 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <HAL_TIM_Base_MspInit+0x9c>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	4a16      	ldr	r2, [pc, #88]	; (800288c <HAL_TIM_Base_MspInit+0x9c>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6413      	str	r3, [r2, #64]	; 0x40
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_TIM_Base_MspInit+0x9c>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	2100      	movs	r1, #0
 800284a:	201c      	movs	r0, #28
 800284c:	f000 ff49 	bl	80036e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002850:	201c      	movs	r0, #28
 8002852:	f000 ff62 	bl	800371a <HAL_NVIC_EnableIRQ>
}
 8002856:	e012      	b.n	800287e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0c      	ldr	r2, [pc, #48]	; (8002890 <HAL_TIM_Base_MspInit+0xa0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10d      	bne.n	800287e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_TIM_Base_MspInit+0x9c>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	4a08      	ldr	r2, [pc, #32]	; (800288c <HAL_TIM_Base_MspInit+0x9c>)
 800286c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002870:	6413      	str	r3, [r2, #64]	; 0x40
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_TIM_Base_MspInit+0x9c>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
}
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40010000 	.word	0x40010000
 800288c:	40023800 	.word	0x40023800
 8002890:	40001c00 	.word	0x40001c00

08002894 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a12      	ldr	r2, [pc, #72]	; (80028fc <HAL_TIM_MspPostInit+0x68>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d11e      	bne.n	80028f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_TIM_MspPostInit+0x6c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	4a10      	ldr	r2, [pc, #64]	; (8002900 <HAL_TIM_MspPostInit+0x6c>)
 80028c0:	f043 0320 	orr.w	r3, r3, #32
 80028c4:	6313      	str	r3, [r2, #48]	; 0x30
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <HAL_TIM_MspPostInit+0x6c>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80028e4:	2309      	movs	r3, #9
 80028e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	4619      	mov	r1, r3
 80028ee:	4805      	ldr	r0, [pc, #20]	; (8002904 <HAL_TIM_MspPostInit+0x70>)
 80028f0:	f001 fb30 	bl	8003f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80028f4:	bf00      	nop
 80028f6:	3720      	adds	r7, #32
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40001c00 	.word	0x40001c00
 8002900:	40023800 	.word	0x40023800
 8002904:	40021400 	.word	0x40021400

08002908 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 800290c:	2201      	movs	r2, #1
 800290e:	4906      	ldr	r1, [pc, #24]	; (8002928 <uart_init_esp+0x20>)
 8002910:	4806      	ldr	r0, [pc, #24]	; (800292c <uart_init_esp+0x24>)
 8002912:	f003 fe28 	bl	8006566 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8002916:	2201      	movs	r2, #1
 8002918:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800291c:	4804      	ldr	r0, [pc, #16]	; (8002930 <uart_init_esp+0x28>)
 800291e:	f001 fcb5 	bl	800428c <HAL_GPIO_WritePin>
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000499 	.word	0x20000499
 800292c:	200004e4 	.word	0x200004e4
 8002930:	40021400 	.word	0x40021400

08002934 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8002940:	887a      	ldrh	r2, [r7, #2]
 8002942:	230a      	movs	r3, #10
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4803      	ldr	r0, [pc, #12]	; (8002954 <uart_EspSendBytes+0x20>)
 8002948:	f003 fd82 	bl	8006450 <HAL_UART_Transmit>
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	200004e4 	.word	0x200004e4

08002958 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a11      	ldr	r2, [pc, #68]	; (80029ac <HAL_UART_RxCpltCallback+0x54>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10a      	bne.n	8002980 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800296a:	230a      	movs	r3, #10
 800296c:	2201      	movs	r2, #1
 800296e:	4910      	ldr	r1, [pc, #64]	; (80029b0 <HAL_UART_RxCpltCallback+0x58>)
 8002970:	4810      	ldr	r0, [pc, #64]	; (80029b4 <HAL_UART_RxCpltCallback+0x5c>)
 8002972:	f003 fd6d 	bl	8006450 <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002976:	2201      	movs	r2, #1
 8002978:	490d      	ldr	r1, [pc, #52]	; (80029b0 <HAL_UART_RxCpltCallback+0x58>)
 800297a:	480e      	ldr	r0, [pc, #56]	; (80029b4 <HAL_UART_RxCpltCallback+0x5c>)
 800297c:	f003 fdf3 	bl	8006566 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <HAL_UART_RxCpltCallback+0x60>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10b      	bne.n	80029a2 <HAL_UART_RxCpltCallback+0x4a>
		if(receive_buffer2 == 'O') check_esp = 1;
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_UART_RxCpltCallback+0x64>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b4f      	cmp	r3, #79	; 0x4f
 8002990:	d102      	bne.n	8002998 <HAL_UART_RxCpltCallback+0x40>
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_UART_RxCpltCallback+0x68>)
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002998:	2201      	movs	r2, #1
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <HAL_UART_RxCpltCallback+0x64>)
 800299c:	4809      	ldr	r0, [pc, #36]	; (80029c4 <HAL_UART_RxCpltCallback+0x6c>)
 800299e:	f003 fde2 	bl	8006566 <HAL_UART_Receive_IT>
	}
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40011000 	.word	0x40011000
 80029b0:	20000498 	.word	0x20000498
 80029b4:	2000049c 	.word	0x2000049c
 80029b8:	40004400 	.word	0x40004400
 80029bc:	20000499 	.word	0x20000499
 80029c0:	2000049a 	.word	0x2000049a
 80029c4:	200004e4 	.word	0x200004e4

080029c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <MX_USART1_UART_Init+0x4c>)
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <MX_USART1_UART_Init+0x50>)
 80029d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <MX_USART1_UART_Init+0x4c>)
 80029d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_USART1_UART_Init+0x4c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <MX_USART1_UART_Init+0x4c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <MX_USART1_UART_Init+0x4c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <MX_USART1_UART_Init+0x4c>)
 80029ee:	220c      	movs	r2, #12
 80029f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <MX_USART1_UART_Init+0x4c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <MX_USART1_UART_Init+0x4c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029fe:	4805      	ldr	r0, [pc, #20]	; (8002a14 <MX_USART1_UART_Init+0x4c>)
 8002a00:	f003 fcd6 	bl	80063b0 <HAL_UART_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a0a:	f7ff fba3 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	2000049c 	.word	0x2000049c
 8002a18:	40011000 	.word	0x40011000

08002a1c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MX_USART2_UART_Init+0x4c>)
 8002a22:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <MX_USART2_UART_Init+0x50>)
 8002a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <MX_USART2_UART_Init+0x4c>)
 8002a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <MX_USART2_UART_Init+0x4c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <MX_USART2_UART_Init+0x4c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <MX_USART2_UART_Init+0x4c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <MX_USART2_UART_Init+0x4c>)
 8002a42:	220c      	movs	r2, #12
 8002a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <MX_USART2_UART_Init+0x4c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MX_USART2_UART_Init+0x4c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a52:	4805      	ldr	r0, [pc, #20]	; (8002a68 <MX_USART2_UART_Init+0x4c>)
 8002a54:	f003 fcac 	bl	80063b0 <HAL_UART_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a5e:	f7ff fb79 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200004e4 	.word	0x200004e4
 8002a6c:	40004400 	.word	0x40004400

08002a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 031c 	add.w	r3, r7, #28
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a3a      	ldr	r2, [pc, #232]	; (8002b78 <HAL_UART_MspInit+0x108>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d135      	bne.n	8002afe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	4b39      	ldr	r3, [pc, #228]	; (8002b7c <HAL_UART_MspInit+0x10c>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	4a38      	ldr	r2, [pc, #224]	; (8002b7c <HAL_UART_MspInit+0x10c>)
 8002a9c:	f043 0310 	orr.w	r3, r3, #16
 8002aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa2:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <HAL_UART_MspInit+0x10c>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HAL_UART_MspInit+0x10c>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a31      	ldr	r2, [pc, #196]	; (8002b7c <HAL_UART_MspInit+0x10c>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b2f      	ldr	r3, [pc, #188]	; (8002b7c <HAL_UART_MspInit+0x10c>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002aca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002adc:	2307      	movs	r3, #7
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4826      	ldr	r0, [pc, #152]	; (8002b80 <HAL_UART_MspInit+0x110>)
 8002ae8:	f001 fa34 	bl	8003f54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2100      	movs	r1, #0
 8002af0:	2025      	movs	r0, #37	; 0x25
 8002af2:	f000 fdf6 	bl	80036e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002af6:	2025      	movs	r0, #37	; 0x25
 8002af8:	f000 fe0f 	bl	800371a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002afc:	e038      	b.n	8002b70 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <HAL_UART_MspInit+0x114>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d133      	bne.n	8002b70 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_UART_MspInit+0x10c>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <HAL_UART_MspInit+0x10c>)
 8002b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b16:	6413      	str	r3, [r2, #64]	; 0x40
 8002b18:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <HAL_UART_MspInit+0x10c>)
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <HAL_UART_MspInit+0x10c>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	4a13      	ldr	r2, [pc, #76]	; (8002b7c <HAL_UART_MspInit+0x10c>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6313      	str	r3, [r2, #48]	; 0x30
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_UART_MspInit+0x10c>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b40:	230c      	movs	r3, #12
 8002b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b50:	2307      	movs	r3, #7
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b54:	f107 031c 	add.w	r3, r7, #28
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4809      	ldr	r0, [pc, #36]	; (8002b80 <HAL_UART_MspInit+0x110>)
 8002b5c:	f001 f9fa 	bl	8003f54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b60:	2200      	movs	r2, #0
 8002b62:	2100      	movs	r1, #0
 8002b64:	2026      	movs	r0, #38	; 0x26
 8002b66:	f000 fdbc 	bl	80036e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b6a:	2026      	movs	r0, #38	; 0x26
 8002b6c:	f000 fdd5 	bl	800371a <HAL_NVIC_EnableIRQ>
}
 8002b70:	bf00      	nop
 8002b72:	3730      	adds	r7, #48	; 0x30
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40011000 	.word	0x40011000
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40020000 	.word	0x40020000
 8002b84:	40004400 	.word	0x40004400

08002b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b8c:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b8e:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b90:	4a0e      	ldr	r2, [pc, #56]	; (8002bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b94:	e002      	b.n	8002b9c <LoopCopyDataInit>

08002b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b9a:	3304      	adds	r3, #4

08002b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba0:	d3f9      	bcc.n	8002b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ba2:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ba4:	4c0b      	ldr	r4, [pc, #44]	; (8002bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba8:	e001      	b.n	8002bae <LoopFillZerobss>

08002baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bac:	3204      	adds	r2, #4

08002bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb0:	d3fb      	bcc.n	8002baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bb2:	f7ff fd21 	bl	80025f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bb6:	f005 fd51 	bl	800865c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bba:	f7ff fa01 	bl	8001fc0 <main>
  bx  lr    
 8002bbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002bcc:	0800f220 	.word	0x0800f220
  ldr r2, =_sbss
 8002bd0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002bd4:	2000067c 	.word	0x2000067c

08002bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd8:	e7fe      	b.n	8002bd8 <ADC_IRQHandler>
	...

08002bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be0:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <HAL_Init+0x40>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0d      	ldr	r2, [pc, #52]	; (8002c1c <HAL_Init+0x40>)
 8002be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_Init+0x40>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <HAL_Init+0x40>)
 8002bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HAL_Init+0x40>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <HAL_Init+0x40>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c04:	2003      	movs	r0, #3
 8002c06:	f000 fd61 	bl	80036cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c0a:	200f      	movs	r0, #15
 8002c0c:	f000 f808 	bl	8002c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c10:	f7ff fbb2 	bl	8002378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023c00 	.word	0x40023c00

08002c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_InitTick+0x54>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_InitTick+0x58>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	4619      	mov	r1, r3
 8002c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fd79 	bl	8003736 <HAL_SYSTICK_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00e      	b.n	8002c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b0f      	cmp	r3, #15
 8002c52:	d80a      	bhi.n	8002c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c54:	2200      	movs	r2, #0
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f000 fd41 	bl	80036e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c60:	4a06      	ldr	r2, [pc, #24]	; (8002c7c <HAL_InitTick+0x5c>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e000      	b.n	8002c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000008 	.word	0x20000008
 8002c78:	20000010 	.word	0x20000010
 8002c7c:	2000000c 	.word	0x2000000c

08002c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_IncTick+0x20>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_IncTick+0x24>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <HAL_IncTick+0x24>)
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000010 	.word	0x20000010
 8002ca4:	2000052c 	.word	0x2000052c

08002ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_GetTick+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	2000052c 	.word	0x2000052c

08002cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff ffee 	bl	8002ca8 <HAL_GetTick>
 8002ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d005      	beq.n	8002ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_Delay+0x44>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ce6:	bf00      	nop
 8002ce8:	f7ff ffde 	bl	8002ca8 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d8f7      	bhi.n	8002ce8 <HAL_Delay+0x28>
  {
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000010 	.word	0x20000010

08002d08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e033      	b.n	8002d86 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe f9ec 	bl	8001104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d118      	bne.n	8002d78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d4e:	f023 0302 	bic.w	r3, r3, #2
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fa68 	bl	8003230 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f023 0303 	bic.w	r3, r3, #3
 8002d6e:	f043 0201 	orr.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
 8002d76:	e001      	b.n	8002d7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_Start_DMA+0x1e>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e0e9      	b.n	8002f82 <HAL_ADC_Start_DMA+0x1f2>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d018      	beq.n	8002df6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002dd4:	4b6d      	ldr	r3, [pc, #436]	; (8002f8c <HAL_ADC_Start_DMA+0x1fc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a6d      	ldr	r2, [pc, #436]	; (8002f90 <HAL_ADC_Start_DMA+0x200>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	0c9a      	lsrs	r2, r3, #18
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002de8:	e002      	b.n	8002df0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f9      	bne.n	8002dea <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e04:	d107      	bne.n	8002e16 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e14:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	f040 80a1 	bne.w	8002f68 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e64:	d106      	bne.n	8002e74 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f023 0206 	bic.w	r2, r3, #6
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
 8002e72:	e002      	b.n	8002e7a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e82:	4b44      	ldr	r3, [pc, #272]	; (8002f94 <HAL_ADC_Start_DMA+0x204>)
 8002e84:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	4a43      	ldr	r2, [pc, #268]	; (8002f98 <HAL_ADC_Start_DMA+0x208>)
 8002e8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	4a42      	ldr	r2, [pc, #264]	; (8002f9c <HAL_ADC_Start_DMA+0x20c>)
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	4a41      	ldr	r2, [pc, #260]	; (8002fa0 <HAL_ADC_Start_DMA+0x210>)
 8002e9c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ea6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002eb6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	334c      	adds	r3, #76	; 0x4c
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f000 fce8 	bl	80038ac <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d12a      	bne.n	8002f3e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <HAL_ADC_Start_DMA+0x214>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d015      	beq.n	8002f1e <HAL_ADC_Start_DMA+0x18e>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <HAL_ADC_Start_DMA+0x218>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d105      	bne.n	8002f08 <HAL_ADC_Start_DMA+0x178>
 8002efc:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_ADC_Start_DMA+0x204>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a27      	ldr	r2, [pc, #156]	; (8002fac <HAL_ADC_Start_DMA+0x21c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d136      	bne.n	8002f80 <HAL_ADC_Start_DMA+0x1f0>
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_ADC_Start_DMA+0x204>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d130      	bne.n	8002f80 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d129      	bne.n	8002f80 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	e020      	b.n	8002f80 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <HAL_ADC_Start_DMA+0x214>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d11b      	bne.n	8002f80 <HAL_ADC_Start_DMA+0x1f0>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d114      	bne.n	8002f80 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	e00b      	b.n	8002f80 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f043 0210 	orr.w	r2, r3, #16
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000008 	.word	0x20000008
 8002f90:	431bde83 	.word	0x431bde83
 8002f94:	40012300 	.word	0x40012300
 8002f98:	08003429 	.word	0x08003429
 8002f9c:	080034e3 	.word	0x080034e3
 8002fa0:	080034ff 	.word	0x080034ff
 8002fa4:	40012000 	.word	0x40012000
 8002fa8:	40012100 	.word	0x40012100
 8002fac:	40012200 	.word	0x40012200

08002fb0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x1c>
 8003004:	2302      	movs	r3, #2
 8003006:	e105      	b.n	8003214 <HAL_ADC_ConfigChannel+0x228>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b09      	cmp	r3, #9
 8003016:	d925      	bls.n	8003064 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68d9      	ldr	r1, [r3, #12]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	4613      	mov	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4413      	add	r3, r2
 800302c:	3b1e      	subs	r3, #30
 800302e:	2207      	movs	r2, #7
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43da      	mvns	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	400a      	ands	r2, r1
 800303c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68d9      	ldr	r1, [r3, #12]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	b29b      	uxth	r3, r3
 800304e:	4618      	mov	r0, r3
 8003050:	4603      	mov	r3, r0
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4403      	add	r3, r0
 8003056:	3b1e      	subs	r3, #30
 8003058:	409a      	lsls	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	e022      	b.n	80030aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6919      	ldr	r1, [r3, #16]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	2207      	movs	r2, #7
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	400a      	ands	r2, r1
 8003086:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6919      	ldr	r1, [r3, #16]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	4618      	mov	r0, r3
 800309a:	4603      	mov	r3, r0
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4403      	add	r3, r0
 80030a0:	409a      	lsls	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b06      	cmp	r3, #6
 80030b0:	d824      	bhi.n	80030fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	3b05      	subs	r3, #5
 80030c4:	221f      	movs	r2, #31
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43da      	mvns	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	400a      	ands	r2, r1
 80030d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	4618      	mov	r0, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	3b05      	subs	r3, #5
 80030ee:	fa00 f203 	lsl.w	r2, r0, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34
 80030fa:	e04c      	b.n	8003196 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b0c      	cmp	r3, #12
 8003102:	d824      	bhi.n	800314e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	3b23      	subs	r3, #35	; 0x23
 8003116:	221f      	movs	r2, #31
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43da      	mvns	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	400a      	ands	r2, r1
 8003124:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	4618      	mov	r0, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	3b23      	subs	r3, #35	; 0x23
 8003140:	fa00 f203 	lsl.w	r2, r0, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
 800314c:	e023      	b.n	8003196 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	3b41      	subs	r3, #65	; 0x41
 8003160:	221f      	movs	r2, #31
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	400a      	ands	r2, r1
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	4618      	mov	r0, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	3b41      	subs	r3, #65	; 0x41
 800318a:	fa00 f203 	lsl.w	r2, r0, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003196:	4b22      	ldr	r3, [pc, #136]	; (8003220 <HAL_ADC_ConfigChannel+0x234>)
 8003198:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a21      	ldr	r2, [pc, #132]	; (8003224 <HAL_ADC_ConfigChannel+0x238>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d109      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x1cc>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b12      	cmp	r3, #18
 80031aa:	d105      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a19      	ldr	r2, [pc, #100]	; (8003224 <HAL_ADC_ConfigChannel+0x238>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d123      	bne.n	800320a <HAL_ADC_ConfigChannel+0x21e>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b10      	cmp	r3, #16
 80031c8:	d003      	beq.n	80031d2 <HAL_ADC_ConfigChannel+0x1e6>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b11      	cmp	r3, #17
 80031d0:	d11b      	bne.n	800320a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d111      	bne.n	800320a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <HAL_ADC_ConfigChannel+0x23c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a10      	ldr	r2, [pc, #64]	; (800322c <HAL_ADC_ConfigChannel+0x240>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	0c9a      	lsrs	r2, r3, #18
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80031fc:	e002      	b.n	8003204 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3b01      	subs	r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f9      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40012300 	.word	0x40012300
 8003224:	40012000 	.word	0x40012000
 8003228:	20000008 	.word	0x20000008
 800322c:	431bde83 	.word	0x431bde83

08003230 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003238:	4b79      	ldr	r3, [pc, #484]	; (8003420 <ADC_Init+0x1f0>)
 800323a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003264:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	021a      	lsls	r2, r3, #8
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003288:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6899      	ldr	r1, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	4a58      	ldr	r2, [pc, #352]	; (8003424 <ADC_Init+0x1f4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d022      	beq.n	800330e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6899      	ldr	r1, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6899      	ldr	r1, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	e00f      	b.n	800332e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800331c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800332c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0202 	bic.w	r2, r2, #2
 800333c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7e1b      	ldrb	r3, [r3, #24]
 8003348:	005a      	lsls	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01b      	beq.n	8003394 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800336a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800337a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	3b01      	subs	r3, #1
 8003388:	035a      	lsls	r2, r3, #13
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	e007      	b.n	80033a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	3b01      	subs	r3, #1
 80033c0:	051a      	lsls	r2, r3, #20
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6899      	ldr	r1, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033e6:	025a      	lsls	r2, r3, #9
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6899      	ldr	r1, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	029a      	lsls	r2, r3, #10
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	609a      	str	r2, [r3, #8]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40012300 	.word	0x40012300
 8003424:	0f000001 	.word	0x0f000001

08003428 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800343e:	2b00      	cmp	r3, #0
 8003440:	d13c      	bne.n	80034bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d12b      	bne.n	80034b4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003460:	2b00      	cmp	r3, #0
 8003462:	d127      	bne.n	80034b4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800346e:	2b00      	cmp	r3, #0
 8003470:	d006      	beq.n	8003480 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800347c:	2b00      	cmp	r3, #0
 800347e:	d119      	bne.n	80034b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0220 	bic.w	r2, r2, #32
 800348e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff fd7b 	bl	8002fb0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034ba:	e00e      	b.n	80034da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f7ff fd85 	bl	8002fd8 <HAL_ADC_ErrorCallback>
}
 80034ce:	e004      	b.n	80034da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
}
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f7ff fd67 	bl	8002fc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2240      	movs	r2, #64	; 0x40
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f043 0204 	orr.w	r2, r3, #4
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7ff fd5a 	bl	8002fd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <__NVIC_SetPriorityGrouping+0x44>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003548:	4013      	ands	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355e:	4a04      	ldr	r2, [pc, #16]	; (8003570 <__NVIC_SetPriorityGrouping+0x44>)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	60d3      	str	r3, [r2, #12]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003578:	4b04      	ldr	r3, [pc, #16]	; (800358c <__NVIC_GetPriorityGrouping+0x18>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	0a1b      	lsrs	r3, r3, #8
 800357e:	f003 0307 	and.w	r3, r3, #7
}
 8003582:	4618      	mov	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	db0b      	blt.n	80035ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	f003 021f 	and.w	r2, r3, #31
 80035a8:	4907      	ldr	r1, [pc, #28]	; (80035c8 <__NVIC_EnableIRQ+0x38>)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	2001      	movs	r0, #1
 80035b2:	fa00 f202 	lsl.w	r2, r0, r2
 80035b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	e000e100 	.word	0xe000e100

080035cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	6039      	str	r1, [r7, #0]
 80035d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	db0a      	blt.n	80035f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	490c      	ldr	r1, [pc, #48]	; (8003618 <__NVIC_SetPriority+0x4c>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	0112      	lsls	r2, r2, #4
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	440b      	add	r3, r1
 80035f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f4:	e00a      	b.n	800360c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	4908      	ldr	r1, [pc, #32]	; (800361c <__NVIC_SetPriority+0x50>)
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	3b04      	subs	r3, #4
 8003604:	0112      	lsls	r2, r2, #4
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	440b      	add	r3, r1
 800360a:	761a      	strb	r2, [r3, #24]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	e000e100 	.word	0xe000e100
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	; 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f1c3 0307 	rsb	r3, r3, #7
 800363a:	2b04      	cmp	r3, #4
 800363c:	bf28      	it	cs
 800363e:	2304      	movcs	r3, #4
 8003640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3304      	adds	r3, #4
 8003646:	2b06      	cmp	r3, #6
 8003648:	d902      	bls.n	8003650 <NVIC_EncodePriority+0x30>
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3b03      	subs	r3, #3
 800364e:	e000      	b.n	8003652 <NVIC_EncodePriority+0x32>
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003654:	f04f 32ff 	mov.w	r2, #4294967295
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43da      	mvns	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	401a      	ands	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003668:	f04f 31ff 	mov.w	r1, #4294967295
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	43d9      	mvns	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	4313      	orrs	r3, r2
         );
}
 800367a:	4618      	mov	r0, r3
 800367c:	3724      	adds	r7, #36	; 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3b01      	subs	r3, #1
 8003694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003698:	d301      	bcc.n	800369e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800369a:	2301      	movs	r3, #1
 800369c:	e00f      	b.n	80036be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369e:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <SysTick_Config+0x40>)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036a6:	210f      	movs	r1, #15
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	f7ff ff8e 	bl	80035cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <SysTick_Config+0x40>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b6:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <SysTick_Config+0x40>)
 80036b8:	2207      	movs	r2, #7
 80036ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	e000e010 	.word	0xe000e010

080036cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff ff29 	bl	800352c <__NVIC_SetPriorityGrouping>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4603      	mov	r3, r0
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036f4:	f7ff ff3e 	bl	8003574 <__NVIC_GetPriorityGrouping>
 80036f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	6978      	ldr	r0, [r7, #20]
 8003700:	f7ff ff8e 	bl	8003620 <NVIC_EncodePriority>
 8003704:	4602      	mov	r2, r0
 8003706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff ff5d 	bl	80035cc <__NVIC_SetPriority>
}
 8003712:	bf00      	nop
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	4603      	mov	r3, r0
 8003722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff ff31 	bl	8003590 <__NVIC_EnableIRQ>
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff ffa2 	bl	8003688 <SysTick_Config>
 8003744:	4603      	mov	r3, r0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800375c:	f7ff faa4 	bl	8002ca8 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e099      	b.n	80038a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0201 	bic.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800378c:	e00f      	b.n	80037ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800378e:	f7ff fa8b 	bl	8002ca8 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b05      	cmp	r3, #5
 800379a:	d908      	bls.n	80037ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2203      	movs	r2, #3
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e078      	b.n	80038a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e8      	bne.n	800378e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4b38      	ldr	r3, [pc, #224]	; (80038a8 <HAL_DMA_Init+0x158>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	2b04      	cmp	r3, #4
 8003806:	d107      	bne.n	8003818 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	4313      	orrs	r3, r2
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0307 	bic.w	r3, r3, #7
 800382e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	2b04      	cmp	r3, #4
 8003840:	d117      	bne.n	8003872 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00e      	beq.n	8003872 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fb01 	bl	8003e5c <DMA_CheckFifoParam>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2240      	movs	r2, #64	; 0x40
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800386e:	2301      	movs	r3, #1
 8003870:	e016      	b.n	80038a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fab8 	bl	8003df0 <DMA_CalcBaseAndBitshift>
 8003880:	4603      	mov	r3, r0
 8003882:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	223f      	movs	r2, #63	; 0x3f
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	f010803f 	.word	0xf010803f

080038ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_DMA_Start_IT+0x26>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e040      	b.n	8003954 <HAL_DMA_Start_IT+0xa8>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d12f      	bne.n	8003946 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2202      	movs	r2, #2
 80038ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 fa4a 	bl	8003d94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	223f      	movs	r2, #63	; 0x3f
 8003906:	409a      	lsls	r2, r3
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0216 	orr.w	r2, r2, #22
 800391a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0208 	orr.w	r2, r2, #8
 8003932:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e005      	b.n	8003952 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800394e:	2302      	movs	r3, #2
 8003950:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003952:	7dfb      	ldrb	r3, [r7, #23]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800396a:	f7ff f99d 	bl	8002ca8 <HAL_GetTick>
 800396e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d008      	beq.n	800398e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e052      	b.n	8003a34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0216 	bic.w	r2, r2, #22
 800399c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d103      	bne.n	80039be <HAL_DMA_Abort+0x62>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0208 	bic.w	r2, r2, #8
 80039cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039de:	e013      	b.n	8003a08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039e0:	f7ff f962 	bl	8002ca8 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b05      	cmp	r3, #5
 80039ec:	d90c      	bls.n	8003a08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2203      	movs	r2, #3
 80039f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e015      	b.n	8003a34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e4      	bne.n	80039e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	223f      	movs	r2, #63	; 0x3f
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d004      	beq.n	8003a5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e00c      	b.n	8003a74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2205      	movs	r2, #5
 8003a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0201 	bic.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a8c:	4b8e      	ldr	r3, [pc, #568]	; (8003cc8 <HAL_DMA_IRQHandler+0x248>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a8e      	ldr	r2, [pc, #568]	; (8003ccc <HAL_DMA_IRQHandler+0x24c>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0a9b      	lsrs	r3, r3, #10
 8003a98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aaa:	2208      	movs	r2, #8
 8003aac:	409a      	lsls	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01a      	beq.n	8003aec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0204 	bic.w	r2, r2, #4
 8003ad2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	2208      	movs	r2, #8
 8003ada:	409a      	lsls	r2, r3
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	f043 0201 	orr.w	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	2201      	movs	r2, #1
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d012      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	2201      	movs	r2, #1
 8003b10:	409a      	lsls	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	f043 0202 	orr.w	r2, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b26:	2204      	movs	r2, #4
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d012      	beq.n	8003b58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	2204      	movs	r2, #4
 8003b46:	409a      	lsls	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f043 0204 	orr.w	r2, r3, #4
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d043      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d03c      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	2210      	movs	r2, #16
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d018      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d108      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d024      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
 8003bae:	e01f      	b.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d01b      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
 8003bc0:	e016      	b.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d107      	bne.n	8003be0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0208 	bic.w	r2, r2, #8
 8003bde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 808f 	beq.w	8003d20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8087 	beq.w	8003d20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c16:	2220      	movs	r2, #32
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b05      	cmp	r3, #5
 8003c28:	d136      	bne.n	8003c98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0216 	bic.w	r2, r2, #22
 8003c38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695a      	ldr	r2, [r3, #20]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <HAL_DMA_IRQHandler+0x1da>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0208 	bic.w	r2, r2, #8
 8003c68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6e:	223f      	movs	r2, #63	; 0x3f
 8003c70:	409a      	lsls	r2, r3
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d07e      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
        }
        return;
 8003c96:	e079      	b.n	8003d8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01d      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10d      	bne.n	8003cd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d031      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
 8003cc4:	e02c      	b.n	8003d20 <HAL_DMA_IRQHandler+0x2a0>
 8003cc6:	bf00      	nop
 8003cc8:	20000008 	.word	0x20000008
 8003ccc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d023      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
 8003ce0:	e01e      	b.n	8003d20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10f      	bne.n	8003d10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0210 	bic.w	r2, r2, #16
 8003cfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d032      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d022      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2205      	movs	r2, #5
 8003d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d307      	bcc.n	8003d68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f2      	bne.n	8003d4c <HAL_DMA_IRQHandler+0x2cc>
 8003d66:	e000      	b.n	8003d6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
 8003d8a:	e000      	b.n	8003d8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d8c:	bf00      	nop
    }
  }
}
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003db0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d108      	bne.n	8003dd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003dd2:	e007      	b.n	8003de4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	3b10      	subs	r3, #16
 8003e00:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <DMA_CalcBaseAndBitshift+0x64>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e0a:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <DMA_CalcBaseAndBitshift+0x68>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d909      	bls.n	8003e32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	1d1a      	adds	r2, r3, #4
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	659a      	str	r2, [r3, #88]	; 0x58
 8003e30:	e007      	b.n	8003e42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	aaaaaaab 	.word	0xaaaaaaab
 8003e58:	0800eddc 	.word	0x0800eddc

08003e5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d11f      	bne.n	8003eb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d856      	bhi.n	8003f2a <DMA_CheckFifoParam+0xce>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <DMA_CheckFifoParam+0x28>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003e95 	.word	0x08003e95
 8003e88:	08003ea7 	.word	0x08003ea7
 8003e8c:	08003e95 	.word	0x08003e95
 8003e90:	08003f2b 	.word	0x08003f2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d046      	beq.n	8003f2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ea4:	e043      	b.n	8003f2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eae:	d140      	bne.n	8003f32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb4:	e03d      	b.n	8003f32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebe:	d121      	bne.n	8003f04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d837      	bhi.n	8003f36 <DMA_CheckFifoParam+0xda>
 8003ec6:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <DMA_CheckFifoParam+0x70>)
 8003ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ecc:	08003edd 	.word	0x08003edd
 8003ed0:	08003ee3 	.word	0x08003ee3
 8003ed4:	08003edd 	.word	0x08003edd
 8003ed8:	08003ef5 	.word	0x08003ef5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee0:	e030      	b.n	8003f44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d025      	beq.n	8003f3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef2:	e022      	b.n	8003f3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003efc:	d11f      	bne.n	8003f3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f02:	e01c      	b.n	8003f3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d903      	bls.n	8003f12 <DMA_CheckFifoParam+0xb6>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d003      	beq.n	8003f18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f10:	e018      	b.n	8003f44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
      break;
 8003f16:	e015      	b.n	8003f44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00e      	beq.n	8003f42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
      break;
 8003f28:	e00b      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      break;
 8003f2a:	bf00      	nop
 8003f2c:	e00a      	b.n	8003f44 <DMA_CheckFifoParam+0xe8>
      break;
 8003f2e:	bf00      	nop
 8003f30:	e008      	b.n	8003f44 <DMA_CheckFifoParam+0xe8>
      break;
 8003f32:	bf00      	nop
 8003f34:	e006      	b.n	8003f44 <DMA_CheckFifoParam+0xe8>
      break;
 8003f36:	bf00      	nop
 8003f38:	e004      	b.n	8003f44 <DMA_CheckFifoParam+0xe8>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e002      	b.n	8003f44 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f3e:	bf00      	nop
 8003f40:	e000      	b.n	8003f44 <DMA_CheckFifoParam+0xe8>
      break;
 8003f42:	bf00      	nop
    }
  } 
  
  return status; 
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop

08003f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b089      	sub	sp, #36	; 0x24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	e16b      	b.n	8004248 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f70:	2201      	movs	r2, #1
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4013      	ands	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	f040 815a 	bne.w	8004242 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d005      	beq.n	8003fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d130      	bne.n	8004008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fdc:	2201      	movs	r2, #1
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 0201 	and.w	r2, r3, #1
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	2b03      	cmp	r3, #3
 8004012:	d017      	beq.n	8004044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	2203      	movs	r2, #3
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d123      	bne.n	8004098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	08da      	lsrs	r2, r3, #3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3208      	adds	r2, #8
 8004058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800405c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	220f      	movs	r2, #15
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4313      	orrs	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	08da      	lsrs	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3208      	adds	r2, #8
 8004092:	69b9      	ldr	r1, [r7, #24]
 8004094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	2203      	movs	r2, #3
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 0203 	and.w	r2, r3, #3
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80b4 	beq.w	8004242 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	4b60      	ldr	r3, [pc, #384]	; (8004260 <HAL_GPIO_Init+0x30c>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	4a5f      	ldr	r2, [pc, #380]	; (8004260 <HAL_GPIO_Init+0x30c>)
 80040e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ea:	4b5d      	ldr	r3, [pc, #372]	; (8004260 <HAL_GPIO_Init+0x30c>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040f6:	4a5b      	ldr	r2, [pc, #364]	; (8004264 <HAL_GPIO_Init+0x310>)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	3302      	adds	r3, #2
 80040fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	220f      	movs	r2, #15
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a52      	ldr	r2, [pc, #328]	; (8004268 <HAL_GPIO_Init+0x314>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d02b      	beq.n	800417a <HAL_GPIO_Init+0x226>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a51      	ldr	r2, [pc, #324]	; (800426c <HAL_GPIO_Init+0x318>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d025      	beq.n	8004176 <HAL_GPIO_Init+0x222>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a50      	ldr	r2, [pc, #320]	; (8004270 <HAL_GPIO_Init+0x31c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01f      	beq.n	8004172 <HAL_GPIO_Init+0x21e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a4f      	ldr	r2, [pc, #316]	; (8004274 <HAL_GPIO_Init+0x320>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d019      	beq.n	800416e <HAL_GPIO_Init+0x21a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a4e      	ldr	r2, [pc, #312]	; (8004278 <HAL_GPIO_Init+0x324>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_GPIO_Init+0x216>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a4d      	ldr	r2, [pc, #308]	; (800427c <HAL_GPIO_Init+0x328>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00d      	beq.n	8004166 <HAL_GPIO_Init+0x212>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a4c      	ldr	r2, [pc, #304]	; (8004280 <HAL_GPIO_Init+0x32c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <HAL_GPIO_Init+0x20e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a4b      	ldr	r2, [pc, #300]	; (8004284 <HAL_GPIO_Init+0x330>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <HAL_GPIO_Init+0x20a>
 800415a:	2307      	movs	r3, #7
 800415c:	e00e      	b.n	800417c <HAL_GPIO_Init+0x228>
 800415e:	2308      	movs	r3, #8
 8004160:	e00c      	b.n	800417c <HAL_GPIO_Init+0x228>
 8004162:	2306      	movs	r3, #6
 8004164:	e00a      	b.n	800417c <HAL_GPIO_Init+0x228>
 8004166:	2305      	movs	r3, #5
 8004168:	e008      	b.n	800417c <HAL_GPIO_Init+0x228>
 800416a:	2304      	movs	r3, #4
 800416c:	e006      	b.n	800417c <HAL_GPIO_Init+0x228>
 800416e:	2303      	movs	r3, #3
 8004170:	e004      	b.n	800417c <HAL_GPIO_Init+0x228>
 8004172:	2302      	movs	r3, #2
 8004174:	e002      	b.n	800417c <HAL_GPIO_Init+0x228>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_GPIO_Init+0x228>
 800417a:	2300      	movs	r3, #0
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	f002 0203 	and.w	r2, r2, #3
 8004182:	0092      	lsls	r2, r2, #2
 8004184:	4093      	lsls	r3, r2
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800418c:	4935      	ldr	r1, [pc, #212]	; (8004264 <HAL_GPIO_Init+0x310>)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	3302      	adds	r3, #2
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <HAL_GPIO_Init+0x334>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041be:	4a32      	ldr	r2, [pc, #200]	; (8004288 <HAL_GPIO_Init+0x334>)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041c4:	4b30      	ldr	r3, [pc, #192]	; (8004288 <HAL_GPIO_Init+0x334>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041e8:	4a27      	ldr	r2, [pc, #156]	; (8004288 <HAL_GPIO_Init+0x334>)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041ee:	4b26      	ldr	r3, [pc, #152]	; (8004288 <HAL_GPIO_Init+0x334>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004212:	4a1d      	ldr	r2, [pc, #116]	; (8004288 <HAL_GPIO_Init+0x334>)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004218:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <HAL_GPIO_Init+0x334>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800423c:	4a12      	ldr	r2, [pc, #72]	; (8004288 <HAL_GPIO_Init+0x334>)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3301      	adds	r3, #1
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	2b0f      	cmp	r3, #15
 800424c:	f67f ae90 	bls.w	8003f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004250:	bf00      	nop
 8004252:	bf00      	nop
 8004254:	3724      	adds	r7, #36	; 0x24
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800
 8004264:	40013800 	.word	0x40013800
 8004268:	40020000 	.word	0x40020000
 800426c:	40020400 	.word	0x40020400
 8004270:	40020800 	.word	0x40020800
 8004274:	40020c00 	.word	0x40020c00
 8004278:	40021000 	.word	0x40021000
 800427c:	40021400 	.word	0x40021400
 8004280:	40021800 	.word	0x40021800
 8004284:	40021c00 	.word	0x40021c00
 8004288:	40013c00 	.word	0x40013c00

0800428c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
 8004298:	4613      	mov	r3, r2
 800429a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800429c:	787b      	ldrb	r3, [r7, #1]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042a2:	887a      	ldrh	r2, [r7, #2]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042a8:	e003      	b.n	80042b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	041a      	lsls	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	619a      	str	r2, [r3, #24]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e12b      	b.n	800452a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd fa04 	bl	80016f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	; 0x24
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004312:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004322:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004324:	f000 fd80 	bl	8004e28 <HAL_RCC_GetPCLK1Freq>
 8004328:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4a81      	ldr	r2, [pc, #516]	; (8004534 <HAL_I2C_Init+0x274>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d807      	bhi.n	8004344 <HAL_I2C_Init+0x84>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a80      	ldr	r2, [pc, #512]	; (8004538 <HAL_I2C_Init+0x278>)
 8004338:	4293      	cmp	r3, r2
 800433a:	bf94      	ite	ls
 800433c:	2301      	movls	r3, #1
 800433e:	2300      	movhi	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e006      	b.n	8004352 <HAL_I2C_Init+0x92>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a7d      	ldr	r2, [pc, #500]	; (800453c <HAL_I2C_Init+0x27c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	bf94      	ite	ls
 800434c:	2301      	movls	r3, #1
 800434e:	2300      	movhi	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e0e7      	b.n	800452a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4a78      	ldr	r2, [pc, #480]	; (8004540 <HAL_I2C_Init+0x280>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	0c9b      	lsrs	r3, r3, #18
 8004364:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4a6a      	ldr	r2, [pc, #424]	; (8004534 <HAL_I2C_Init+0x274>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d802      	bhi.n	8004394 <HAL_I2C_Init+0xd4>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3301      	adds	r3, #1
 8004392:	e009      	b.n	80043a8 <HAL_I2C_Init+0xe8>
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	4a69      	ldr	r2, [pc, #420]	; (8004544 <HAL_I2C_Init+0x284>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	099b      	lsrs	r3, r3, #6
 80043a6:	3301      	adds	r3, #1
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	495c      	ldr	r1, [pc, #368]	; (8004534 <HAL_I2C_Init+0x274>)
 80043c4:	428b      	cmp	r3, r1
 80043c6:	d819      	bhi.n	80043fc <HAL_I2C_Init+0x13c>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1e59      	subs	r1, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d6:	1c59      	adds	r1, r3, #1
 80043d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043dc:	400b      	ands	r3, r1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <HAL_I2C_Init+0x138>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1e59      	subs	r1, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f0:	3301      	adds	r3, #1
 80043f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f6:	e051      	b.n	800449c <HAL_I2C_Init+0x1dc>
 80043f8:	2304      	movs	r3, #4
 80043fa:	e04f      	b.n	800449c <HAL_I2C_Init+0x1dc>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d111      	bne.n	8004428 <HAL_I2C_Init+0x168>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1e58      	subs	r0, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	440b      	add	r3, r1
 8004412:	fbb0 f3f3 	udiv	r3, r0, r3
 8004416:	3301      	adds	r3, #1
 8004418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441c:	2b00      	cmp	r3, #0
 800441e:	bf0c      	ite	eq
 8004420:	2301      	moveq	r3, #1
 8004422:	2300      	movne	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e012      	b.n	800444e <HAL_I2C_Init+0x18e>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1e58      	subs	r0, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	0099      	lsls	r1, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	fbb0 f3f3 	udiv	r3, r0, r3
 800443e:	3301      	adds	r3, #1
 8004440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_I2C_Init+0x196>
 8004452:	2301      	movs	r3, #1
 8004454:	e022      	b.n	800449c <HAL_I2C_Init+0x1dc>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10e      	bne.n	800447c <HAL_I2C_Init+0x1bc>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1e58      	subs	r0, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	460b      	mov	r3, r1
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	440b      	add	r3, r1
 800446c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004470:	3301      	adds	r3, #1
 8004472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800447a:	e00f      	b.n	800449c <HAL_I2C_Init+0x1dc>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	1e58      	subs	r0, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6859      	ldr	r1, [r3, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	0099      	lsls	r1, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004492:	3301      	adds	r3, #1
 8004494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	6809      	ldr	r1, [r1, #0]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6911      	ldr	r1, [r2, #16]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68d2      	ldr	r2, [r2, #12]
 80044d6:	4311      	orrs	r1, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	430b      	orrs	r3, r1
 80044de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	000186a0 	.word	0x000186a0
 8004538:	001e847f 	.word	0x001e847f
 800453c:	003d08ff 	.word	0x003d08ff
 8004540:	431bde83 	.word	0x431bde83
 8004544:	10624dd3 	.word	0x10624dd3

08004548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e267      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d075      	beq.n	8004652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004566:	4b88      	ldr	r3, [pc, #544]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
 800456e:	2b04      	cmp	r3, #4
 8004570:	d00c      	beq.n	800458c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004572:	4b85      	ldr	r3, [pc, #532]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800457a:	2b08      	cmp	r3, #8
 800457c:	d112      	bne.n	80045a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457e:	4b82      	ldr	r3, [pc, #520]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458a:	d10b      	bne.n	80045a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800458c:	4b7e      	ldr	r3, [pc, #504]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d05b      	beq.n	8004650 <HAL_RCC_OscConfig+0x108>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d157      	bne.n	8004650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e242      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d106      	bne.n	80045bc <HAL_RCC_OscConfig+0x74>
 80045ae:	4b76      	ldr	r3, [pc, #472]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a75      	ldr	r2, [pc, #468]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e01d      	b.n	80045f8 <HAL_RCC_OscConfig+0xb0>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c4:	d10c      	bne.n	80045e0 <HAL_RCC_OscConfig+0x98>
 80045c6:	4b70      	ldr	r3, [pc, #448]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a6f      	ldr	r2, [pc, #444]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80045cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	4b6d      	ldr	r3, [pc, #436]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a6c      	ldr	r2, [pc, #432]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80045d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e00b      	b.n	80045f8 <HAL_RCC_OscConfig+0xb0>
 80045e0:	4b69      	ldr	r3, [pc, #420]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a68      	ldr	r2, [pc, #416]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80045e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b66      	ldr	r3, [pc, #408]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a65      	ldr	r2, [pc, #404]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80045f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d013      	beq.n	8004628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fe fb52 	bl	8002ca8 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004608:	f7fe fb4e 	bl	8002ca8 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	; 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e207      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	4b5b      	ldr	r3, [pc, #364]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0xc0>
 8004626:	e014      	b.n	8004652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fe fb3e 	bl	8002ca8 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004630:	f7fe fb3a 	bl	8002ca8 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e1f3      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004642:	4b51      	ldr	r3, [pc, #324]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0xe8>
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d063      	beq.n	8004726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800465e:	4b4a      	ldr	r3, [pc, #296]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800466a:	4b47      	ldr	r3, [pc, #284]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004672:	2b08      	cmp	r3, #8
 8004674:	d11c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004676:	4b44      	ldr	r3, [pc, #272]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d116      	bne.n	80046b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004682:	4b41      	ldr	r3, [pc, #260]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_RCC_OscConfig+0x152>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d001      	beq.n	800469a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e1c7      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469a:	4b3b      	ldr	r3, [pc, #236]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4937      	ldr	r1, [pc, #220]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ae:	e03a      	b.n	8004726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d020      	beq.n	80046fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b8:	4b34      	ldr	r3, [pc, #208]	; (800478c <HAL_RCC_OscConfig+0x244>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046be:	f7fe faf3 	bl	8002ca8 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c6:	f7fe faef 	bl	8002ca8 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e1a8      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d8:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e4:	4b28      	ldr	r3, [pc, #160]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4925      	ldr	r1, [pc, #148]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	600b      	str	r3, [r1, #0]
 80046f8:	e015      	b.n	8004726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046fa:	4b24      	ldr	r3, [pc, #144]	; (800478c <HAL_RCC_OscConfig+0x244>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fe fad2 	bl	8002ca8 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004708:	f7fe face 	bl	8002ca8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e187      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471a:	4b1b      	ldr	r3, [pc, #108]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d036      	beq.n	80047a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473a:	4b15      	ldr	r3, [pc, #84]	; (8004790 <HAL_RCC_OscConfig+0x248>)
 800473c:	2201      	movs	r2, #1
 800473e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004740:	f7fe fab2 	bl	8002ca8 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004748:	f7fe faae 	bl	8002ca8 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e167      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_RCC_OscConfig+0x240>)
 800475c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0x200>
 8004766:	e01b      	b.n	80047a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004768:	4b09      	ldr	r3, [pc, #36]	; (8004790 <HAL_RCC_OscConfig+0x248>)
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476e:	f7fe fa9b 	bl	8002ca8 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004774:	e00e      	b.n	8004794 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004776:	f7fe fa97 	bl	8002ca8 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d907      	bls.n	8004794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e150      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
 8004788:	40023800 	.word	0x40023800
 800478c:	42470000 	.word	0x42470000
 8004790:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004794:	4b88      	ldr	r3, [pc, #544]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 8004796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1ea      	bne.n	8004776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8097 	beq.w	80048dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ae:	2300      	movs	r3, #0
 80047b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b2:	4b81      	ldr	r3, [pc, #516]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10f      	bne.n	80047de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047be:	2300      	movs	r3, #0
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	4b7d      	ldr	r3, [pc, #500]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	4a7c      	ldr	r2, [pc, #496]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 80047c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047cc:	6413      	str	r3, [r2, #64]	; 0x40
 80047ce:	4b7a      	ldr	r3, [pc, #488]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047da:	2301      	movs	r3, #1
 80047dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047de:	4b77      	ldr	r3, [pc, #476]	; (80049bc <HAL_RCC_OscConfig+0x474>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d118      	bne.n	800481c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ea:	4b74      	ldr	r3, [pc, #464]	; (80049bc <HAL_RCC_OscConfig+0x474>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a73      	ldr	r2, [pc, #460]	; (80049bc <HAL_RCC_OscConfig+0x474>)
 80047f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047f6:	f7fe fa57 	bl	8002ca8 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fe:	f7fe fa53 	bl	8002ca8 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e10c      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004810:	4b6a      	ldr	r3, [pc, #424]	; (80049bc <HAL_RCC_OscConfig+0x474>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f0      	beq.n	80047fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d106      	bne.n	8004832 <HAL_RCC_OscConfig+0x2ea>
 8004824:	4b64      	ldr	r3, [pc, #400]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	4a63      	ldr	r2, [pc, #396]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6713      	str	r3, [r2, #112]	; 0x70
 8004830:	e01c      	b.n	800486c <HAL_RCC_OscConfig+0x324>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b05      	cmp	r3, #5
 8004838:	d10c      	bne.n	8004854 <HAL_RCC_OscConfig+0x30c>
 800483a:	4b5f      	ldr	r3, [pc, #380]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483e:	4a5e      	ldr	r2, [pc, #376]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 8004840:	f043 0304 	orr.w	r3, r3, #4
 8004844:	6713      	str	r3, [r2, #112]	; 0x70
 8004846:	4b5c      	ldr	r3, [pc, #368]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484a:	4a5b      	ldr	r2, [pc, #364]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	6713      	str	r3, [r2, #112]	; 0x70
 8004852:	e00b      	b.n	800486c <HAL_RCC_OscConfig+0x324>
 8004854:	4b58      	ldr	r3, [pc, #352]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	4a57      	ldr	r2, [pc, #348]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 800485a:	f023 0301 	bic.w	r3, r3, #1
 800485e:	6713      	str	r3, [r2, #112]	; 0x70
 8004860:	4b55      	ldr	r3, [pc, #340]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 8004862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004864:	4a54      	ldr	r2, [pc, #336]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 8004866:	f023 0304 	bic.w	r3, r3, #4
 800486a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d015      	beq.n	80048a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004874:	f7fe fa18 	bl	8002ca8 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487a:	e00a      	b.n	8004892 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487c:	f7fe fa14 	bl	8002ca8 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	f241 3288 	movw	r2, #5000	; 0x1388
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e0cb      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004892:	4b49      	ldr	r3, [pc, #292]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0ee      	beq.n	800487c <HAL_RCC_OscConfig+0x334>
 800489e:	e014      	b.n	80048ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a0:	f7fe fa02 	bl	8002ca8 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a6:	e00a      	b.n	80048be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a8:	f7fe f9fe 	bl	8002ca8 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e0b5      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048be:	4b3e      	ldr	r3, [pc, #248]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1ee      	bne.n	80048a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048ca:	7dfb      	ldrb	r3, [r7, #23]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d105      	bne.n	80048dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d0:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	4a38      	ldr	r2, [pc, #224]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 80048d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 80a1 	beq.w	8004a28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048e6:	4b34      	ldr	r3, [pc, #208]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d05c      	beq.n	80049ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d141      	bne.n	800497e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fa:	4b31      	ldr	r3, [pc, #196]	; (80049c0 <HAL_RCC_OscConfig+0x478>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7fe f9d2 	bl	8002ca8 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004908:	f7fe f9ce 	bl	8002ca8 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e087      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491a:	4b27      	ldr	r3, [pc, #156]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f0      	bne.n	8004908 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69da      	ldr	r2, [r3, #28]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	019b      	lsls	r3, r3, #6
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493c:	085b      	lsrs	r3, r3, #1
 800493e:	3b01      	subs	r3, #1
 8004940:	041b      	lsls	r3, r3, #16
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	061b      	lsls	r3, r3, #24
 800494a:	491b      	ldr	r1, [pc, #108]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 800494c:	4313      	orrs	r3, r2
 800494e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004950:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <HAL_RCC_OscConfig+0x478>)
 8004952:	2201      	movs	r2, #1
 8004954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004956:	f7fe f9a7 	bl	8002ca8 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495e:	f7fe f9a3 	bl	8002ca8 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e05c      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004970:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0f0      	beq.n	800495e <HAL_RCC_OscConfig+0x416>
 800497c:	e054      	b.n	8004a28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497e:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <HAL_RCC_OscConfig+0x478>)
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004984:	f7fe f990 	bl	8002ca8 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498c:	f7fe f98c 	bl	8002ca8 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e045      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <HAL_RCC_OscConfig+0x470>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f0      	bne.n	800498c <HAL_RCC_OscConfig+0x444>
 80049aa:	e03d      	b.n	8004a28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d107      	bne.n	80049c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e038      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
 80049b8:	40023800 	.word	0x40023800
 80049bc:	40007000 	.word	0x40007000
 80049c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049c4:	4b1b      	ldr	r3, [pc, #108]	; (8004a34 <HAL_RCC_OscConfig+0x4ec>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d028      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d121      	bne.n	8004a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d11a      	bne.n	8004a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049f4:	4013      	ands	r3, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d111      	bne.n	8004a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	085b      	lsrs	r3, r3, #1
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d107      	bne.n	8004a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800

08004a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0cc      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a4c:	4b68      	ldr	r3, [pc, #416]	; (8004bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d90c      	bls.n	8004a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5a:	4b65      	ldr	r3, [pc, #404]	; (8004bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a62:	4b63      	ldr	r3, [pc, #396]	; (8004bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0b8      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d020      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a8c:	4b59      	ldr	r3, [pc, #356]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4a58      	ldr	r2, [pc, #352]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa4:	4b53      	ldr	r3, [pc, #332]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4a52      	ldr	r2, [pc, #328]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab0:	4b50      	ldr	r3, [pc, #320]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	494d      	ldr	r1, [pc, #308]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d044      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad6:	4b47      	ldr	r3, [pc, #284]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d119      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e07f      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d003      	beq.n	8004af6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d107      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af6:	4b3f      	ldr	r3, [pc, #252]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d109      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e06f      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b06:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e067      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b16:	4b37      	ldr	r3, [pc, #220]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 0203 	bic.w	r2, r3, #3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	4934      	ldr	r1, [pc, #208]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b28:	f7fe f8be 	bl	8002ca8 <HAL_GetTick>
 8004b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2e:	e00a      	b.n	8004b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b30:	f7fe f8ba 	bl	8002ca8 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e04f      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b46:	4b2b      	ldr	r3, [pc, #172]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 020c 	and.w	r2, r3, #12
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d1eb      	bne.n	8004b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b58:	4b25      	ldr	r3, [pc, #148]	; (8004bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d20c      	bcs.n	8004b80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b66:	4b22      	ldr	r3, [pc, #136]	; (8004bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6e:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e032      	b.n	8004be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b8c:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4916      	ldr	r1, [pc, #88]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004baa:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	490e      	ldr	r1, [pc, #56]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bbe:	f000 f821 	bl	8004c04 <HAL_RCC_GetSysClockFreq>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	490a      	ldr	r1, [pc, #40]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd0:	5ccb      	ldrb	r3, [r1, r3]
 8004bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd6:	4a09      	ldr	r2, [pc, #36]	; (8004bfc <HAL_RCC_ClockConfig+0x1c4>)
 8004bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004bda:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <HAL_RCC_ClockConfig+0x1c8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fe f81e 	bl	8002c20 <HAL_InitTick>

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40023c00 	.word	0x40023c00
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	0800edc4 	.word	0x0800edc4
 8004bfc:	20000008 	.word	0x20000008
 8004c00:	2000000c 	.word	0x2000000c

08004c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c08:	b094      	sub	sp, #80	; 0x50
 8004c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c1c:	4b79      	ldr	r3, [pc, #484]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d00d      	beq.n	8004c44 <HAL_RCC_GetSysClockFreq+0x40>
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	f200 80e1 	bhi.w	8004df0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <HAL_RCC_GetSysClockFreq+0x34>
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d003      	beq.n	8004c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c36:	e0db      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c38:	4b73      	ldr	r3, [pc, #460]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c3c:	e0db      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c3e:	4b73      	ldr	r3, [pc, #460]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x208>)
 8004c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c42:	e0d8      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c44:	4b6f      	ldr	r3, [pc, #444]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c4c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c4e:	4b6d      	ldr	r3, [pc, #436]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d063      	beq.n	8004d22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5a:	4b6a      	ldr	r3, [pc, #424]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	099b      	lsrs	r3, r3, #6
 8004c60:	2200      	movs	r2, #0
 8004c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c6e:	2300      	movs	r3, #0
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
 8004c72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c76:	4622      	mov	r2, r4
 8004c78:	462b      	mov	r3, r5
 8004c7a:	f04f 0000 	mov.w	r0, #0
 8004c7e:	f04f 0100 	mov.w	r1, #0
 8004c82:	0159      	lsls	r1, r3, #5
 8004c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c88:	0150      	lsls	r0, r2, #5
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4621      	mov	r1, r4
 8004c90:	1a51      	subs	r1, r2, r1
 8004c92:	6139      	str	r1, [r7, #16]
 8004c94:	4629      	mov	r1, r5
 8004c96:	eb63 0301 	sbc.w	r3, r3, r1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ca8:	4659      	mov	r1, fp
 8004caa:	018b      	lsls	r3, r1, #6
 8004cac:	4651      	mov	r1, sl
 8004cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cb2:	4651      	mov	r1, sl
 8004cb4:	018a      	lsls	r2, r1, #6
 8004cb6:	4651      	mov	r1, sl
 8004cb8:	ebb2 0801 	subs.w	r8, r2, r1
 8004cbc:	4659      	mov	r1, fp
 8004cbe:	eb63 0901 	sbc.w	r9, r3, r1
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cd6:	4690      	mov	r8, r2
 8004cd8:	4699      	mov	r9, r3
 8004cda:	4623      	mov	r3, r4
 8004cdc:	eb18 0303 	adds.w	r3, r8, r3
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	462b      	mov	r3, r5
 8004ce4:	eb49 0303 	adc.w	r3, r9, r3
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	024b      	lsls	r3, r1, #9
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d00:	4621      	mov	r1, r4
 8004d02:	024a      	lsls	r2, r1, #9
 8004d04:	4610      	mov	r0, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d14:	f7fb ffb8 	bl	8000c88 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d20:	e058      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d22:	4b38      	ldr	r3, [pc, #224]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	2200      	movs	r2, #0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d32:	623b      	str	r3, [r7, #32]
 8004d34:	2300      	movs	r3, #0
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
 8004d38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	f04f 0000 	mov.w	r0, #0
 8004d44:	f04f 0100 	mov.w	r1, #0
 8004d48:	0159      	lsls	r1, r3, #5
 8004d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d4e:	0150      	lsls	r0, r2, #5
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4641      	mov	r1, r8
 8004d56:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d74:	ebb2 040a 	subs.w	r4, r2, sl
 8004d78:	eb63 050b 	sbc.w	r5, r3, fp
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	00eb      	lsls	r3, r5, #3
 8004d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d8a:	00e2      	lsls	r2, r4, #3
 8004d8c:	4614      	mov	r4, r2
 8004d8e:	461d      	mov	r5, r3
 8004d90:	4643      	mov	r3, r8
 8004d92:	18e3      	adds	r3, r4, r3
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	464b      	mov	r3, r9
 8004d98:	eb45 0303 	adc.w	r3, r5, r3
 8004d9c:	607b      	str	r3, [r7, #4]
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004daa:	4629      	mov	r1, r5
 8004dac:	028b      	lsls	r3, r1, #10
 8004dae:	4621      	mov	r1, r4
 8004db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004db4:	4621      	mov	r1, r4
 8004db6:	028a      	lsls	r2, r1, #10
 8004db8:	4610      	mov	r0, r2
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	61fa      	str	r2, [r7, #28]
 8004dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dc8:	f7fb ff5e 	bl	8000c88 <__aeabi_uldivmod>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	0c1b      	lsrs	r3, r3, #16
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	3301      	adds	r3, #1
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004de4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dee:	e002      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8004df2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3750      	adds	r7, #80	; 0x50
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e02:	bf00      	nop
 8004e04:	40023800 	.word	0x40023800
 8004e08:	00f42400 	.word	0x00f42400
 8004e0c:	007a1200 	.word	0x007a1200

08004e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e14:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e16:	681b      	ldr	r3, [r3, #0]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000008 	.word	0x20000008

08004e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e2c:	f7ff fff0 	bl	8004e10 <HAL_RCC_GetHCLKFreq>
 8004e30:	4602      	mov	r2, r0
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	0a9b      	lsrs	r3, r3, #10
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	4903      	ldr	r1, [pc, #12]	; (8004e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e3e:	5ccb      	ldrb	r3, [r1, r3]
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	0800edd4 	.word	0x0800edd4

08004e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e54:	f7ff ffdc 	bl	8004e10 <HAL_RCC_GetHCLKFreq>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	0b5b      	lsrs	r3, r3, #13
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	4903      	ldr	r1, [pc, #12]	; (8004e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e66:	5ccb      	ldrb	r3, [r1, r3]
 8004e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40023800 	.word	0x40023800
 8004e74:	0800edd4 	.word	0x0800edd4

08004e78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e07b      	b.n	8004f82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d108      	bne.n	8004ea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9a:	d009      	beq.n	8004eb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	61da      	str	r2, [r3, #28]
 8004ea2:	e005      	b.n	8004eb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fd fa0c 	bl	80022e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ee6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	ea42 0103 	orr.w	r1, r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	0c1b      	lsrs	r3, r3, #16
 8004f4e:	f003 0104 	and.w	r1, r3, #4
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f003 0210 	and.w	r2, r3, #16
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b088      	sub	sp, #32
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	603b      	str	r3, [r7, #0]
 8004f96:	4613      	mov	r3, r2
 8004f98:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f9a:	f7fd fe85 	bl	8002ca8 <HAL_GetTick>
 8004f9e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d001      	beq.n	8004fb4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e12a      	b.n	800520a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_SPI_Transmit+0x36>
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e122      	b.n	800520a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_SPI_Transmit+0x48>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e11b      	b.n	800520a <HAL_SPI_Transmit+0x280>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2203      	movs	r2, #3
 8004fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	88fa      	ldrh	r2, [r7, #6]
 8004ff2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	88fa      	ldrh	r2, [r7, #6]
 8004ff8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005020:	d10f      	bne.n	8005042 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005030:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005040:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d007      	beq.n	8005060 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800505e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005068:	d152      	bne.n	8005110 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_SPI_Transmit+0xee>
 8005072:	8b7b      	ldrh	r3, [r7, #26]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d145      	bne.n	8005104 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	881a      	ldrh	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	1c9a      	adds	r2, r3, #2
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800509c:	e032      	b.n	8005104 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d112      	bne.n	80050d2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b0:	881a      	ldrh	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	1c9a      	adds	r2, r3, #2
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80050d0:	e018      	b.n	8005104 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050d2:	f7fd fde9 	bl	8002ca8 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d803      	bhi.n	80050ea <HAL_SPI_Transmit+0x160>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d102      	bne.n	80050f0 <HAL_SPI_Transmit+0x166>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d109      	bne.n	8005104 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e082      	b.n	800520a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1c7      	bne.n	800509e <HAL_SPI_Transmit+0x114>
 800510e:	e053      	b.n	80051b8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <HAL_SPI_Transmit+0x194>
 8005118:	8b7b      	ldrh	r3, [r7, #26]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d147      	bne.n	80051ae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	7812      	ldrb	r2, [r2, #0]
 800512a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005144:	e033      	b.n	80051ae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b02      	cmp	r3, #2
 8005152:	d113      	bne.n	800517c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	330c      	adds	r3, #12
 800515e:	7812      	ldrb	r2, [r2, #0]
 8005160:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	86da      	strh	r2, [r3, #54]	; 0x36
 800517a:	e018      	b.n	80051ae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800517c:	f7fd fd94 	bl	8002ca8 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d803      	bhi.n	8005194 <HAL_SPI_Transmit+0x20a>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d102      	bne.n	800519a <HAL_SPI_Transmit+0x210>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e02d      	b.n	800520a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1c6      	bne.n	8005146 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	6839      	ldr	r1, [r7, #0]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f8b1 	bl	8005324 <SPI_EndRxTxTransaction>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005208:	2300      	movs	r3, #0
  }
}
 800520a:	4618      	mov	r0, r3
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	4613      	mov	r3, r2
 8005222:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005224:	f7fd fd40 	bl	8002ca8 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	4413      	add	r3, r2
 8005232:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005234:	f7fd fd38 	bl	8002ca8 <HAL_GetTick>
 8005238:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800523a:	4b39      	ldr	r3, [pc, #228]	; (8005320 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	015b      	lsls	r3, r3, #5
 8005240:	0d1b      	lsrs	r3, r3, #20
 8005242:	69fa      	ldr	r2, [r7, #28]
 8005244:	fb02 f303 	mul.w	r3, r2, r3
 8005248:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800524a:	e054      	b.n	80052f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d050      	beq.n	80052f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005254:	f7fd fd28 	bl	8002ca8 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	69fa      	ldr	r2, [r7, #28]
 8005260:	429a      	cmp	r2, r3
 8005262:	d902      	bls.n	800526a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d13d      	bne.n	80052e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005278:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005282:	d111      	bne.n	80052a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528c:	d004      	beq.n	8005298 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005296:	d107      	bne.n	80052a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b0:	d10f      	bne.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e017      	b.n	8005316 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4013      	ands	r3, r2
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	429a      	cmp	r2, r3
 8005304:	bf0c      	ite	eq
 8005306:	2301      	moveq	r3, #1
 8005308:	2300      	movne	r3, #0
 800530a:	b2db      	uxtb	r3, r3
 800530c:	461a      	mov	r2, r3
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	429a      	cmp	r2, r3
 8005312:	d19b      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000008 	.word	0x20000008

08005324 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2201      	movs	r2, #1
 8005338:	2102      	movs	r1, #2
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff ff6a 	bl	8005214 <SPI_WaitFlagStateUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	f043 0220 	orr.w	r2, r3, #32
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e032      	b.n	80053bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005356:	4b1b      	ldr	r3, [pc, #108]	; (80053c4 <SPI_EndRxTxTransaction+0xa0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a1b      	ldr	r2, [pc, #108]	; (80053c8 <SPI_EndRxTxTransaction+0xa4>)
 800535c:	fba2 2303 	umull	r2, r3, r2, r3
 8005360:	0d5b      	lsrs	r3, r3, #21
 8005362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005366:	fb02 f303 	mul.w	r3, r2, r3
 800536a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005374:	d112      	bne.n	800539c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2200      	movs	r2, #0
 800537e:	2180      	movs	r1, #128	; 0x80
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff ff47 	bl	8005214 <SPI_WaitFlagStateUntilTimeout>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d016      	beq.n	80053ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005390:	f043 0220 	orr.w	r2, r3, #32
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e00f      	b.n	80053bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b80      	cmp	r3, #128	; 0x80
 80053b4:	d0f2      	beq.n	800539c <SPI_EndRxTxTransaction+0x78>
 80053b6:	e000      	b.n	80053ba <SPI_EndRxTxTransaction+0x96>
        break;
 80053b8:	bf00      	nop
  }

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	20000008 	.word	0x20000008
 80053c8:	165e9f81 	.word	0x165e9f81

080053cc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e038      	b.n	8005454 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f7fc f80a 	bl	8001410 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3308      	adds	r3, #8
 8005404:	4619      	mov	r1, r3
 8005406:	4610      	mov	r0, r2
 8005408:	f002 f828 	bl	800745c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	461a      	mov	r2, r3
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	f002 f88a 	bl	8007530 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6858      	ldr	r0, [r3, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	f002 f8b7 	bl	800759c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	6892      	ldr	r2, [r2, #8]
 8005436:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	6892      	ldr	r2, [r2, #8]
 8005442:	f041 0101 	orr.w	r1, r1, #1
 8005446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e041      	b.n	80054f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fd f9b4 	bl	80027f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3304      	adds	r3, #4
 8005498:	4619      	mov	r1, r3
 800549a:	4610      	mov	r0, r2
 800549c:	f000 fc02 	bl	8005ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b01      	cmp	r3, #1
 800550e:	d001      	beq.n	8005514 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e046      	b.n	80055a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a23      	ldr	r2, [pc, #140]	; (80055b0 <HAL_TIM_Base_Start+0xb4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d022      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552e:	d01d      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1f      	ldr	r2, [pc, #124]	; (80055b4 <HAL_TIM_Base_Start+0xb8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d018      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <HAL_TIM_Base_Start+0xbc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d013      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1c      	ldr	r2, [pc, #112]	; (80055bc <HAL_TIM_Base_Start+0xc0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00e      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1b      	ldr	r2, [pc, #108]	; (80055c0 <HAL_TIM_Base_Start+0xc4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d009      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <HAL_TIM_Base_Start+0xc8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_TIM_Base_Start+0x70>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <HAL_TIM_Base_Start+0xcc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d111      	bne.n	8005590 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b06      	cmp	r3, #6
 800557c:	d010      	beq.n	80055a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 0201 	orr.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558e:	e007      	b.n	80055a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	40010400 	.word	0x40010400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40001800 	.word	0x40001800

080055cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d001      	beq.n	80055e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e04e      	b.n	8005682 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a23      	ldr	r2, [pc, #140]	; (8005690 <HAL_TIM_Base_Start_IT+0xc4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d022      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560e:	d01d      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1f      	ldr	r2, [pc, #124]	; (8005694 <HAL_TIM_Base_Start_IT+0xc8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d018      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1e      	ldr	r2, [pc, #120]	; (8005698 <HAL_TIM_Base_Start_IT+0xcc>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d013      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1c      	ldr	r2, [pc, #112]	; (800569c <HAL_TIM_Base_Start_IT+0xd0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00e      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1b      	ldr	r2, [pc, #108]	; (80056a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d009      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a19      	ldr	r2, [pc, #100]	; (80056a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d004      	beq.n	800564c <HAL_TIM_Base_Start_IT+0x80>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d111      	bne.n	8005670 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b06      	cmp	r3, #6
 800565c:	d010      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 0201 	orr.w	r2, r2, #1
 800566c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	e007      	b.n	8005680 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40010000 	.word	0x40010000
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800
 800569c:	40000c00 	.word	0x40000c00
 80056a0:	40010400 	.word	0x40010400
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40001800 	.word	0x40001800

080056ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e041      	b.n	8005742 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f839 	bl	800574a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 fada 	bl	8005ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d020      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01b      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f06f 0202 	mvn.w	r2, #2
 8005792:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fa5c 	bl	8005c66 <HAL_TIM_IC_CaptureCallback>
 80057ae:	e005      	b.n	80057bc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fa4e 	bl	8005c52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fa5f 	bl	8005c7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d020      	beq.n	800580e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01b      	beq.n	800580e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f06f 0204 	mvn.w	r2, #4
 80057de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fa36 	bl	8005c66 <HAL_TIM_IC_CaptureCallback>
 80057fa:	e005      	b.n	8005808 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fa28 	bl	8005c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fa39 	bl	8005c7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d020      	beq.n	800585a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01b      	beq.n	800585a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f06f 0208 	mvn.w	r2, #8
 800582a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2204      	movs	r2, #4
 8005830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f003 0303 	and.w	r3, r3, #3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fa10 	bl	8005c66 <HAL_TIM_IC_CaptureCallback>
 8005846:	e005      	b.n	8005854 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fa02 	bl	8005c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fa13 	bl	8005c7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b00      	cmp	r3, #0
 8005862:	d020      	beq.n	80058a6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 0310 	and.w	r3, r3, #16
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01b      	beq.n	80058a6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f06f 0210 	mvn.w	r2, #16
 8005876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2208      	movs	r2, #8
 800587c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f9ea 	bl	8005c66 <HAL_TIM_IC_CaptureCallback>
 8005892:	e005      	b.n	80058a0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f9dc 	bl	8005c52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f9ed 	bl	8005c7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00c      	beq.n	80058ca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f06f 0201 	mvn.w	r2, #1
 80058c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7fc fcaf 	bl	8002228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00c      	beq.n	80058ee <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d007      	beq.n	80058ee <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fd57 	bl	800639c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00c      	beq.n	8005912 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800590a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f9be 	bl	8005c8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00c      	beq.n	8005936 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f06f 0220 	mvn.w	r2, #32
 800592e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fd29 	bl	8006388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005936:	bf00      	nop
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800595a:	2302      	movs	r3, #2
 800595c:	e0ae      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b0c      	cmp	r3, #12
 800596a:	f200 809f 	bhi.w	8005aac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800596e:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	080059a9 	.word	0x080059a9
 8005978:	08005aad 	.word	0x08005aad
 800597c:	08005aad 	.word	0x08005aad
 8005980:	08005aad 	.word	0x08005aad
 8005984:	080059e9 	.word	0x080059e9
 8005988:	08005aad 	.word	0x08005aad
 800598c:	08005aad 	.word	0x08005aad
 8005990:	08005aad 	.word	0x08005aad
 8005994:	08005a2b 	.word	0x08005a2b
 8005998:	08005aad 	.word	0x08005aad
 800599c:	08005aad 	.word	0x08005aad
 80059a0:	08005aad 	.word	0x08005aad
 80059a4:	08005a6b 	.word	0x08005a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fa24 	bl	8005dfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0208 	orr.w	r2, r2, #8
 80059c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0204 	bic.w	r2, r2, #4
 80059d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6999      	ldr	r1, [r3, #24]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	619a      	str	r2, [r3, #24]
      break;
 80059e6:	e064      	b.n	8005ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fa74 	bl	8005edc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6999      	ldr	r1, [r3, #24]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	021a      	lsls	r2, r3, #8
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	619a      	str	r2, [r3, #24]
      break;
 8005a28:	e043      	b.n	8005ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fac9 	bl	8005fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0208 	orr.w	r2, r2, #8
 8005a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0204 	bic.w	r2, r2, #4
 8005a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69d9      	ldr	r1, [r3, #28]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	61da      	str	r2, [r3, #28]
      break;
 8005a68:	e023      	b.n	8005ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fb1d 	bl	80060b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69d9      	ldr	r1, [r3, #28]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	021a      	lsls	r2, r3, #8
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	61da      	str	r2, [r3, #28]
      break;
 8005aaa:	e002      	b.n	8005ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIM_ConfigClockSource+0x1c>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e0b4      	b.n	8005c4a <HAL_TIM_ConfigClockSource+0x186>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b18:	d03e      	beq.n	8005b98 <HAL_TIM_ConfigClockSource+0xd4>
 8005b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b1e:	f200 8087 	bhi.w	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b26:	f000 8086 	beq.w	8005c36 <HAL_TIM_ConfigClockSource+0x172>
 8005b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2e:	d87f      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b30:	2b70      	cmp	r3, #112	; 0x70
 8005b32:	d01a      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0xa6>
 8005b34:	2b70      	cmp	r3, #112	; 0x70
 8005b36:	d87b      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b60      	cmp	r3, #96	; 0x60
 8005b3a:	d050      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x11a>
 8005b3c:	2b60      	cmp	r3, #96	; 0x60
 8005b3e:	d877      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	2b50      	cmp	r3, #80	; 0x50
 8005b42:	d03c      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0xfa>
 8005b44:	2b50      	cmp	r3, #80	; 0x50
 8005b46:	d873      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	d058      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x13a>
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d86f      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b50:	2b30      	cmp	r3, #48	; 0x30
 8005b52:	d064      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b54:	2b30      	cmp	r3, #48	; 0x30
 8005b56:	d86b      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d060      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d867      	bhi.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d05c      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d05a      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x15a>
 8005b68:	e062      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b7a:	f000 fb69 	bl	8006250 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	609a      	str	r2, [r3, #8]
      break;
 8005b96:	e04f      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ba8:	f000 fb52 	bl	8006250 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bba:	609a      	str	r2, [r3, #8]
      break;
 8005bbc:	e03c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f000 fac6 	bl	800615c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2150      	movs	r1, #80	; 0x50
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fb1f 	bl	800621a <TIM_ITRx_SetConfig>
      break;
 8005bdc:	e02c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bea:	461a      	mov	r2, r3
 8005bec:	f000 fae5 	bl	80061ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2160      	movs	r1, #96	; 0x60
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fb0f 	bl	800621a <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e01c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f000 faa6 	bl	800615c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2140      	movs	r1, #64	; 0x40
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 faff 	bl	800621a <TIM_ITRx_SetConfig>
      break;
 8005c1c:	e00c      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f000 faf6 	bl	800621a <TIM_ITRx_SetConfig>
      break;
 8005c2e:	e003      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	73fb      	strb	r3, [r7, #15]
      break;
 8005c34:	e000      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
	...

08005ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a46      	ldr	r2, [pc, #280]	; (8005dd0 <TIM_Base_SetConfig+0x12c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d013      	beq.n	8005ce4 <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc2:	d00f      	beq.n	8005ce4 <TIM_Base_SetConfig+0x40>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a43      	ldr	r2, [pc, #268]	; (8005dd4 <TIM_Base_SetConfig+0x130>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00b      	beq.n	8005ce4 <TIM_Base_SetConfig+0x40>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a42      	ldr	r2, [pc, #264]	; (8005dd8 <TIM_Base_SetConfig+0x134>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d007      	beq.n	8005ce4 <TIM_Base_SetConfig+0x40>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a41      	ldr	r2, [pc, #260]	; (8005ddc <TIM_Base_SetConfig+0x138>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_Base_SetConfig+0x40>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a40      	ldr	r2, [pc, #256]	; (8005de0 <TIM_Base_SetConfig+0x13c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d108      	bne.n	8005cf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a35      	ldr	r2, [pc, #212]	; (8005dd0 <TIM_Base_SetConfig+0x12c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d02b      	beq.n	8005d56 <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d04:	d027      	beq.n	8005d56 <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a32      	ldr	r2, [pc, #200]	; (8005dd4 <TIM_Base_SetConfig+0x130>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d023      	beq.n	8005d56 <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a31      	ldr	r2, [pc, #196]	; (8005dd8 <TIM_Base_SetConfig+0x134>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d01f      	beq.n	8005d56 <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a30      	ldr	r2, [pc, #192]	; (8005ddc <TIM_Base_SetConfig+0x138>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d01b      	beq.n	8005d56 <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2f      	ldr	r2, [pc, #188]	; (8005de0 <TIM_Base_SetConfig+0x13c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d017      	beq.n	8005d56 <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2e      	ldr	r2, [pc, #184]	; (8005de4 <TIM_Base_SetConfig+0x140>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d013      	beq.n	8005d56 <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2d      	ldr	r2, [pc, #180]	; (8005de8 <TIM_Base_SetConfig+0x144>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00f      	beq.n	8005d56 <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a2c      	ldr	r2, [pc, #176]	; (8005dec <TIM_Base_SetConfig+0x148>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00b      	beq.n	8005d56 <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2b      	ldr	r2, [pc, #172]	; (8005df0 <TIM_Base_SetConfig+0x14c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d007      	beq.n	8005d56 <TIM_Base_SetConfig+0xb2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a2a      	ldr	r2, [pc, #168]	; (8005df4 <TIM_Base_SetConfig+0x150>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d003      	beq.n	8005d56 <TIM_Base_SetConfig+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a29      	ldr	r2, [pc, #164]	; (8005df8 <TIM_Base_SetConfig+0x154>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d108      	bne.n	8005d68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a10      	ldr	r2, [pc, #64]	; (8005dd0 <TIM_Base_SetConfig+0x12c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_Base_SetConfig+0xf8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a12      	ldr	r2, [pc, #72]	; (8005de0 <TIM_Base_SetConfig+0x13c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d103      	bne.n	8005da4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d105      	bne.n	8005dc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f023 0201 	bic.w	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	611a      	str	r2, [r3, #16]
  }
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	40010400 	.word	0x40010400
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400
 8005dec:	40014800 	.word	0x40014800
 8005df0:	40001800 	.word	0x40001800
 8005df4:	40001c00 	.word	0x40001c00
 8005df8:	40002000 	.word	0x40002000

08005dfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	f023 0201 	bic.w	r2, r3, #1
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0303 	bic.w	r3, r3, #3
 8005e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f023 0302 	bic.w	r3, r3, #2
 8005e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a20      	ldr	r2, [pc, #128]	; (8005ed4 <TIM_OC1_SetConfig+0xd8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d003      	beq.n	8005e60 <TIM_OC1_SetConfig+0x64>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a1f      	ldr	r2, [pc, #124]	; (8005ed8 <TIM_OC1_SetConfig+0xdc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d10c      	bne.n	8005e7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f023 0308 	bic.w	r3, r3, #8
 8005e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f023 0304 	bic.w	r3, r3, #4
 8005e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a15      	ldr	r2, [pc, #84]	; (8005ed4 <TIM_OC1_SetConfig+0xd8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d003      	beq.n	8005e8a <TIM_OC1_SetConfig+0x8e>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a14      	ldr	r2, [pc, #80]	; (8005ed8 <TIM_OC1_SetConfig+0xdc>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d111      	bne.n	8005eae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	621a      	str	r2, [r3, #32]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40010400 	.word	0x40010400

08005edc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	f023 0210 	bic.w	r2, r3, #16
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f023 0320 	bic.w	r3, r3, #32
 8005f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a22      	ldr	r2, [pc, #136]	; (8005fc0 <TIM_OC2_SetConfig+0xe4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d003      	beq.n	8005f44 <TIM_OC2_SetConfig+0x68>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a21      	ldr	r2, [pc, #132]	; (8005fc4 <TIM_OC2_SetConfig+0xe8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d10d      	bne.n	8005f60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a17      	ldr	r2, [pc, #92]	; (8005fc0 <TIM_OC2_SetConfig+0xe4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_OC2_SetConfig+0x94>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a16      	ldr	r2, [pc, #88]	; (8005fc4 <TIM_OC2_SetConfig+0xe8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d113      	bne.n	8005f98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40010000 	.word	0x40010000
 8005fc4:	40010400 	.word	0x40010400

08005fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <TIM_OC3_SetConfig+0xe0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d003      	beq.n	800602e <TIM_OC3_SetConfig+0x66>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a20      	ldr	r2, [pc, #128]	; (80060ac <TIM_OC3_SetConfig+0xe4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d10d      	bne.n	800604a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006034:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	021b      	lsls	r3, r3, #8
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a16      	ldr	r2, [pc, #88]	; (80060a8 <TIM_OC3_SetConfig+0xe0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <TIM_OC3_SetConfig+0x92>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a15      	ldr	r2, [pc, #84]	; (80060ac <TIM_OC3_SetConfig+0xe4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d113      	bne.n	8006082 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	621a      	str	r2, [r3, #32]
}
 800609c:	bf00      	nop
 800609e:	371c      	adds	r7, #28
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	40010000 	.word	0x40010000
 80060ac:	40010400 	.word	0x40010400

080060b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	031b      	lsls	r3, r3, #12
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a12      	ldr	r2, [pc, #72]	; (8006154 <TIM_OC4_SetConfig+0xa4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d003      	beq.n	8006118 <TIM_OC4_SetConfig+0x68>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a11      	ldr	r2, [pc, #68]	; (8006158 <TIM_OC4_SetConfig+0xa8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d109      	bne.n	800612c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800611e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	019b      	lsls	r3, r3, #6
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40010000 	.word	0x40010000
 8006158:	40010400 	.word	0x40010400

0800615c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f023 0201 	bic.w	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 030a 	bic.w	r3, r3, #10
 8006198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b087      	sub	sp, #28
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	f023 0210 	bic.w	r2, r3, #16
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	031b      	lsls	r3, r3, #12
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	f043 0307 	orr.w	r3, r3, #7
 800623c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	609a      	str	r2, [r3, #8]
}
 8006244:	bf00      	nop
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800626a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	021a      	lsls	r2, r3, #8
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	431a      	orrs	r2, r3
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4313      	orrs	r3, r2
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	609a      	str	r2, [r3, #8]
}
 8006284:	bf00      	nop
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e05a      	b.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a21      	ldr	r2, [pc, #132]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d022      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f4:	d01d      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1d      	ldr	r2, [pc, #116]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d018      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a1b      	ldr	r2, [pc, #108]	; (8006374 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d013      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a1a      	ldr	r2, [pc, #104]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00e      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a18      	ldr	r2, [pc, #96]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d009      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a17      	ldr	r2, [pc, #92]	; (8006380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d004      	beq.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a15      	ldr	r2, [pc, #84]	; (8006384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d10c      	bne.n	800634c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	4313      	orrs	r3, r2
 8006342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40010000 	.word	0x40010000
 8006370:	40000400 	.word	0x40000400
 8006374:	40000800 	.word	0x40000800
 8006378:	40000c00 	.word	0x40000c00
 800637c:	40010400 	.word	0x40010400
 8006380:	40014000 	.word	0x40014000
 8006384:	40001800 	.word	0x40001800

08006388 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e042      	b.n	8006448 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fc fb4a 	bl	8002a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2224      	movs	r2, #36	; 0x24
 80063e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fdbd 	bl	8006f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	695a      	ldr	r2, [r3, #20]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2220      	movs	r2, #32
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	; 0x28
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b20      	cmp	r3, #32
 800646e:	d175      	bne.n	800655c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <HAL_UART_Transmit+0x2c>
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e06e      	b.n	800655e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2221      	movs	r2, #33	; 0x21
 800648a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800648e:	f7fc fc0b 	bl	8002ca8 <HAL_GetTick>
 8006492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	88fa      	ldrh	r2, [r7, #6]
 800649e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a8:	d108      	bne.n	80064bc <HAL_UART_Transmit+0x6c>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	e003      	b.n	80064c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064c4:	e02e      	b.n	8006524 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2200      	movs	r2, #0
 80064ce:	2180      	movs	r1, #128	; 0x80
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 fb1f 	bl	8006b14 <UART_WaitOnFlagUntilTimeout>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e03a      	b.n	800655e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10b      	bne.n	8006506 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	3302      	adds	r3, #2
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e007      	b.n	8006516 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	781a      	ldrb	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3301      	adds	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1cb      	bne.n	80064c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2200      	movs	r2, #0
 8006536:	2140      	movs	r1, #64	; 0x40
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 faeb 	bl	8006b14 <UART_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e006      	b.n	800655e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	e000      	b.n	800655e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800655c:	2302      	movs	r3, #2
  }
}
 800655e:	4618      	mov	r0, r3
 8006560:	3720      	adds	r7, #32
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	4613      	mov	r3, r2
 8006572:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b20      	cmp	r3, #32
 800657e:	d112      	bne.n	80065a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_UART_Receive_IT+0x26>
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e00b      	b.n	80065a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	461a      	mov	r2, r3
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fb12 	bl	8006bc6 <UART_Start_Receive_IT>
 80065a2:	4603      	mov	r3, r0
 80065a4:	e000      	b.n	80065a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80065a6:	2302      	movs	r3, #2
  }
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b0ba      	sub	sp, #232	; 0xe8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80065dc:	2300      	movs	r3, #0
 80065de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80065ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10f      	bne.n	8006616 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d009      	beq.n	8006616 <HAL_UART_IRQHandler+0x66>
 8006602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fbf2 	bl	8006df8 <UART_Receive_IT>
      return;
 8006614:	e25b      	b.n	8006ace <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 80de 	beq.w	80067dc <HAL_UART_IRQHandler+0x22c>
 8006620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d106      	bne.n	800663a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006630:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 80d1 	beq.w	80067dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <HAL_UART_IRQHandler+0xae>
 8006646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006656:	f043 0201 	orr.w	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800665e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00b      	beq.n	8006682 <HAL_UART_IRQHandler+0xd2>
 800666a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d005      	beq.n	8006682 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667a:	f043 0202 	orr.w	r2, r3, #2
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00b      	beq.n	80066a6 <HAL_UART_IRQHandler+0xf6>
 800668e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d005      	beq.n	80066a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	f043 0204 	orr.w	r2, r3, #4
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d011      	beq.n	80066d6 <HAL_UART_IRQHandler+0x126>
 80066b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d105      	bne.n	80066ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	f043 0208 	orr.w	r2, r3, #8
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 81f2 	beq.w	8006ac4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <HAL_UART_IRQHandler+0x14e>
 80066ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f0:	f003 0320 	and.w	r3, r3, #32
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fb7d 	bl	8006df8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	bf0c      	ite	eq
 800670c:	2301      	moveq	r3, #1
 800670e:	2300      	movne	r3, #0
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d103      	bne.n	800672a <HAL_UART_IRQHandler+0x17a>
 8006722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d04f      	beq.n	80067ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa85 	bl	8006c3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673a:	2b40      	cmp	r3, #64	; 0x40
 800673c:	d141      	bne.n	80067c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3314      	adds	r3, #20
 8006744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800675c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3314      	adds	r3, #20
 8006766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800676a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800676e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1d9      	bne.n	800673e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d013      	beq.n	80067ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	4a7e      	ldr	r2, [pc, #504]	; (8006990 <HAL_UART_IRQHandler+0x3e0>)
 8006798:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fd f94c 	bl	8003a3c <HAL_DMA_Abort_IT>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d016      	beq.n	80067d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80067b4:	4610      	mov	r0, r2
 80067b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b8:	e00e      	b.n	80067d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f994 	bl	8006ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c0:	e00a      	b.n	80067d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f990 	bl	8006ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c8:	e006      	b.n	80067d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f98c 	bl	8006ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80067d6:	e175      	b.n	8006ac4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d8:	bf00      	nop
    return;
 80067da:	e173      	b.n	8006ac4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	f040 814f 	bne.w	8006a84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ea:	f003 0310 	and.w	r3, r3, #16
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 8148 	beq.w	8006a84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f8:	f003 0310 	and.w	r3, r3, #16
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 8141 	beq.w	8006a84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006802:	2300      	movs	r3, #0
 8006804:	60bb      	str	r3, [r7, #8]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b40      	cmp	r3, #64	; 0x40
 8006824:	f040 80b6 	bne.w	8006994 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006834:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 8145 	beq.w	8006ac8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006846:	429a      	cmp	r2, r3
 8006848:	f080 813e 	bcs.w	8006ac8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006852:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800685e:	f000 8088 	beq.w	8006972 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	330c      	adds	r3, #12
 8006868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006878:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800687c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006880:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	330c      	adds	r3, #12
 800688a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800688e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800689a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1d9      	bne.n	8006862 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3314      	adds	r3, #20
 80068b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068c0:	f023 0301 	bic.w	r3, r3, #1
 80068c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3314      	adds	r3, #20
 80068ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e1      	bne.n	80068ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3314      	adds	r3, #20
 80068f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3314      	adds	r3, #20
 800690a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800690e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006910:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006914:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800691c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e3      	bne.n	80068ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006942:	f023 0310 	bic.w	r3, r3, #16
 8006946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	330c      	adds	r3, #12
 8006950:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006954:	65ba      	str	r2, [r7, #88]	; 0x58
 8006956:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800695a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e3      	bne.n	8006930 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696c:	4618      	mov	r0, r3
 800696e:	f7fc fff5 	bl	800395c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2202      	movs	r2, #2
 8006976:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006980:	b29b      	uxth	r3, r3
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	b29b      	uxth	r3, r3
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f8b7 	bl	8006afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800698e:	e09b      	b.n	8006ac8 <HAL_UART_IRQHandler+0x518>
 8006990:	08006d01 	.word	0x08006d01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800699c:	b29b      	uxth	r3, r3
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 808e 	beq.w	8006acc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80069b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 8089 	beq.w	8006acc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	330c      	adds	r3, #12
 80069c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	330c      	adds	r3, #12
 80069da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80069de:	647a      	str	r2, [r7, #68]	; 0x44
 80069e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e3      	bne.n	80069ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3314      	adds	r3, #20
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	623b      	str	r3, [r7, #32]
   return(result);
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	f023 0301 	bic.w	r3, r3, #1
 8006a08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3314      	adds	r3, #20
 8006a12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a16:	633a      	str	r2, [r7, #48]	; 0x30
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e3      	bne.n	80069f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0310 	bic.w	r3, r3, #16
 8006a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	330c      	adds	r3, #12
 8006a58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a5c:	61fa      	str	r2, [r7, #28]
 8006a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	69b9      	ldr	r1, [r7, #24]
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	e841 2300 	strex	r3, r2, [r1]
 8006a68:	617b      	str	r3, [r7, #20]
   return(result);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e3      	bne.n	8006a38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f83d 	bl	8006afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a82:	e023      	b.n	8006acc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d009      	beq.n	8006aa4 <HAL_UART_IRQHandler+0x4f4>
 8006a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f943 	bl	8006d28 <UART_Transmit_IT>
    return;
 8006aa2:	e014      	b.n	8006ace <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00e      	beq.n	8006ace <HAL_UART_IRQHandler+0x51e>
 8006ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d008      	beq.n	8006ace <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f983 	bl	8006dc8 <UART_EndTransmit_IT>
    return;
 8006ac2:	e004      	b.n	8006ace <HAL_UART_IRQHandler+0x51e>
    return;
 8006ac4:	bf00      	nop
 8006ac6:	e002      	b.n	8006ace <HAL_UART_IRQHandler+0x51e>
      return;
 8006ac8:	bf00      	nop
 8006aca:	e000      	b.n	8006ace <HAL_UART_IRQHandler+0x51e>
      return;
 8006acc:	bf00      	nop
  }
}
 8006ace:	37e8      	adds	r7, #232	; 0xe8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	4613      	mov	r3, r2
 8006b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b24:	e03b      	b.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d037      	beq.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2e:	f7fc f8bb 	bl	8002ca8 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	6a3a      	ldr	r2, [r7, #32]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d302      	bcc.n	8006b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e03a      	b.n	8006bbe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d023      	beq.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b80      	cmp	r3, #128	; 0x80
 8006b5a:	d020      	beq.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b40      	cmp	r3, #64	; 0x40
 8006b60:	d01d      	beq.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0308 	and.w	r3, r3, #8
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d116      	bne.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b70:	2300      	movs	r3, #0
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f857 	bl	8006c3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2208      	movs	r2, #8
 8006b90:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e00f      	b.n	8006bbe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	bf0c      	ite	eq
 8006bae:	2301      	moveq	r3, #1
 8006bb0:	2300      	movne	r3, #0
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d0b4      	beq.n	8006b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b085      	sub	sp, #20
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	88fa      	ldrh	r2, [r7, #6]
 8006bde:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	88fa      	ldrh	r2, [r7, #6]
 8006be4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2222      	movs	r2, #34	; 0x22
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d007      	beq.n	8006c0c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c0a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695a      	ldr	r2, [r3, #20]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0220 	orr.w	r2, r2, #32
 8006c2a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b095      	sub	sp, #84	; 0x54
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330c      	adds	r3, #12
 8006c48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	330c      	adds	r3, #12
 8006c60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c62:	643a      	str	r2, [r7, #64]	; 0x40
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e5      	bne.n	8006c42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3314      	adds	r3, #20
 8006c7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3314      	adds	r3, #20
 8006c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e5      	bne.n	8006c76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d119      	bne.n	8006ce6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f023 0310 	bic.w	r3, r3, #16
 8006cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cd2:	61ba      	str	r2, [r7, #24]
 8006cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	6979      	ldr	r1, [r7, #20]
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e5      	bne.n	8006cb2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006cf4:	bf00      	nop
 8006cf6:	3754      	adds	r7, #84	; 0x54
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f7ff fee4 	bl	8006ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d20:	bf00      	nop
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b21      	cmp	r3, #33	; 0x21
 8006d3a:	d13e      	bne.n	8006dba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d44:	d114      	bne.n	8006d70 <UART_Transmit_IT+0x48>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d110      	bne.n	8006d70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	1c9a      	adds	r2, r3, #2
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	621a      	str	r2, [r3, #32]
 8006d6e:	e008      	b.n	8006d82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	1c59      	adds	r1, r3, #1
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	6211      	str	r1, [r2, #32]
 8006d7a:	781a      	ldrb	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10f      	bne.n	8006db6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006da4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006db4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	e000      	b.n	8006dbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006dba:	2302      	movs	r3, #2
  }
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dde:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff fe73 	bl	8006ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08c      	sub	sp, #48	; 0x30
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b22      	cmp	r3, #34	; 0x22
 8006e0a:	f040 80ae 	bne.w	8006f6a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e16:	d117      	bne.n	8006e48 <UART_Receive_IT+0x50>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d113      	bne.n	8006e48 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e40:	1c9a      	adds	r2, r3, #2
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	629a      	str	r2, [r3, #40]	; 0x28
 8006e46:	e026      	b.n	8006e96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5a:	d007      	beq.n	8006e6c <UART_Receive_IT+0x74>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <UART_Receive_IT+0x82>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d106      	bne.n	8006e7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	e008      	b.n	8006e8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d15d      	bne.n	8006f66 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0220 	bic.w	r2, r2, #32
 8006eb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	695a      	ldr	r2, [r3, #20]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 0201 	bic.w	r2, r2, #1
 8006ed8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d135      	bne.n	8006f5c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	330c      	adds	r3, #12
 8006efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	613b      	str	r3, [r7, #16]
   return(result);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f023 0310 	bic.w	r3, r3, #16
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	330c      	adds	r3, #12
 8006f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f16:	623a      	str	r2, [r7, #32]
 8006f18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	69f9      	ldr	r1, [r7, #28]
 8006f1c:	6a3a      	ldr	r2, [r7, #32]
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e5      	bne.n	8006ef6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b10      	cmp	r3, #16
 8006f36:	d10a      	bne.n	8006f4e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff fdd1 	bl	8006afc <HAL_UARTEx_RxEventCallback>
 8006f5a:	e002      	b.n	8006f62 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7fb fcfb 	bl	8002958 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	e002      	b.n	8006f6c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	e000      	b.n	8006f6c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f6a:	2302      	movs	r3, #2
  }
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3730      	adds	r7, #48	; 0x30
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f78:	b0c0      	sub	sp, #256	; 0x100
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f90:	68d9      	ldr	r1, [r3, #12]
 8006f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	ea40 0301 	orr.w	r3, r0, r1
 8006f9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006fcc:	f021 010c 	bic.w	r1, r1, #12
 8006fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fda:	430b      	orrs	r3, r1
 8006fdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fee:	6999      	ldr	r1, [r3, #24]
 8006ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	ea40 0301 	orr.w	r3, r0, r1
 8006ffa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4b8f      	ldr	r3, [pc, #572]	; (8007240 <UART_SetConfig+0x2cc>)
 8007004:	429a      	cmp	r2, r3
 8007006:	d005      	beq.n	8007014 <UART_SetConfig+0xa0>
 8007008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	4b8d      	ldr	r3, [pc, #564]	; (8007244 <UART_SetConfig+0x2d0>)
 8007010:	429a      	cmp	r2, r3
 8007012:	d104      	bne.n	800701e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007014:	f7fd ff1c 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 8007018:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800701c:	e003      	b.n	8007026 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800701e:	f7fd ff03 	bl	8004e28 <HAL_RCC_GetPCLK1Freq>
 8007022:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007030:	f040 810c 	bne.w	800724c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007038:	2200      	movs	r2, #0
 800703a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800703e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007042:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007046:	4622      	mov	r2, r4
 8007048:	462b      	mov	r3, r5
 800704a:	1891      	adds	r1, r2, r2
 800704c:	65b9      	str	r1, [r7, #88]	; 0x58
 800704e:	415b      	adcs	r3, r3
 8007050:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007052:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007056:	4621      	mov	r1, r4
 8007058:	eb12 0801 	adds.w	r8, r2, r1
 800705c:	4629      	mov	r1, r5
 800705e:	eb43 0901 	adc.w	r9, r3, r1
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800706e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007076:	4690      	mov	r8, r2
 8007078:	4699      	mov	r9, r3
 800707a:	4623      	mov	r3, r4
 800707c:	eb18 0303 	adds.w	r3, r8, r3
 8007080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007084:	462b      	mov	r3, r5
 8007086:	eb49 0303 	adc.w	r3, r9, r3
 800708a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800708e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800709a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800709e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070a2:	460b      	mov	r3, r1
 80070a4:	18db      	adds	r3, r3, r3
 80070a6:	653b      	str	r3, [r7, #80]	; 0x50
 80070a8:	4613      	mov	r3, r2
 80070aa:	eb42 0303 	adc.w	r3, r2, r3
 80070ae:	657b      	str	r3, [r7, #84]	; 0x54
 80070b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070b8:	f7f9 fde6 	bl	8000c88 <__aeabi_uldivmod>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4b61      	ldr	r3, [pc, #388]	; (8007248 <UART_SetConfig+0x2d4>)
 80070c2:	fba3 2302 	umull	r2, r3, r3, r2
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	011c      	lsls	r4, r3, #4
 80070ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80070d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80070dc:	4642      	mov	r2, r8
 80070de:	464b      	mov	r3, r9
 80070e0:	1891      	adds	r1, r2, r2
 80070e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80070e4:	415b      	adcs	r3, r3
 80070e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070ec:	4641      	mov	r1, r8
 80070ee:	eb12 0a01 	adds.w	sl, r2, r1
 80070f2:	4649      	mov	r1, r9
 80070f4:	eb43 0b01 	adc.w	fp, r3, r1
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007104:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800710c:	4692      	mov	sl, r2
 800710e:	469b      	mov	fp, r3
 8007110:	4643      	mov	r3, r8
 8007112:	eb1a 0303 	adds.w	r3, sl, r3
 8007116:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800711a:	464b      	mov	r3, r9
 800711c:	eb4b 0303 	adc.w	r3, fp, r3
 8007120:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007130:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007134:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007138:	460b      	mov	r3, r1
 800713a:	18db      	adds	r3, r3, r3
 800713c:	643b      	str	r3, [r7, #64]	; 0x40
 800713e:	4613      	mov	r3, r2
 8007140:	eb42 0303 	adc.w	r3, r2, r3
 8007144:	647b      	str	r3, [r7, #68]	; 0x44
 8007146:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800714a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800714e:	f7f9 fd9b 	bl	8000c88 <__aeabi_uldivmod>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4611      	mov	r1, r2
 8007158:	4b3b      	ldr	r3, [pc, #236]	; (8007248 <UART_SetConfig+0x2d4>)
 800715a:	fba3 2301 	umull	r2, r3, r3, r1
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	2264      	movs	r2, #100	; 0x64
 8007162:	fb02 f303 	mul.w	r3, r2, r3
 8007166:	1acb      	subs	r3, r1, r3
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800716e:	4b36      	ldr	r3, [pc, #216]	; (8007248 <UART_SetConfig+0x2d4>)
 8007170:	fba3 2302 	umull	r2, r3, r3, r2
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800717c:	441c      	add	r4, r3
 800717e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007182:	2200      	movs	r2, #0
 8007184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007188:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800718c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007190:	4642      	mov	r2, r8
 8007192:	464b      	mov	r3, r9
 8007194:	1891      	adds	r1, r2, r2
 8007196:	63b9      	str	r1, [r7, #56]	; 0x38
 8007198:	415b      	adcs	r3, r3
 800719a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800719c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071a0:	4641      	mov	r1, r8
 80071a2:	1851      	adds	r1, r2, r1
 80071a4:	6339      	str	r1, [r7, #48]	; 0x30
 80071a6:	4649      	mov	r1, r9
 80071a8:	414b      	adcs	r3, r1
 80071aa:	637b      	str	r3, [r7, #52]	; 0x34
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	f04f 0300 	mov.w	r3, #0
 80071b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80071b8:	4659      	mov	r1, fp
 80071ba:	00cb      	lsls	r3, r1, #3
 80071bc:	4651      	mov	r1, sl
 80071be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071c2:	4651      	mov	r1, sl
 80071c4:	00ca      	lsls	r2, r1, #3
 80071c6:	4610      	mov	r0, r2
 80071c8:	4619      	mov	r1, r3
 80071ca:	4603      	mov	r3, r0
 80071cc:	4642      	mov	r2, r8
 80071ce:	189b      	adds	r3, r3, r2
 80071d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071d4:	464b      	mov	r3, r9
 80071d6:	460a      	mov	r2, r1
 80071d8:	eb42 0303 	adc.w	r3, r2, r3
 80071dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80071f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80071f4:	460b      	mov	r3, r1
 80071f6:	18db      	adds	r3, r3, r3
 80071f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071fa:	4613      	mov	r3, r2
 80071fc:	eb42 0303 	adc.w	r3, r2, r3
 8007200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007206:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800720a:	f7f9 fd3d 	bl	8000c88 <__aeabi_uldivmod>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4b0d      	ldr	r3, [pc, #52]	; (8007248 <UART_SetConfig+0x2d4>)
 8007214:	fba3 1302 	umull	r1, r3, r3, r2
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	2164      	movs	r1, #100	; 0x64
 800721c:	fb01 f303 	mul.w	r3, r1, r3
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	3332      	adds	r3, #50	; 0x32
 8007226:	4a08      	ldr	r2, [pc, #32]	; (8007248 <UART_SetConfig+0x2d4>)
 8007228:	fba2 2303 	umull	r2, r3, r2, r3
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	f003 0207 	and.w	r2, r3, #7
 8007232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4422      	add	r2, r4
 800723a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800723c:	e106      	b.n	800744c <UART_SetConfig+0x4d8>
 800723e:	bf00      	nop
 8007240:	40011000 	.word	0x40011000
 8007244:	40011400 	.word	0x40011400
 8007248:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800724c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007250:	2200      	movs	r2, #0
 8007252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007256:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800725a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800725e:	4642      	mov	r2, r8
 8007260:	464b      	mov	r3, r9
 8007262:	1891      	adds	r1, r2, r2
 8007264:	6239      	str	r1, [r7, #32]
 8007266:	415b      	adcs	r3, r3
 8007268:	627b      	str	r3, [r7, #36]	; 0x24
 800726a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800726e:	4641      	mov	r1, r8
 8007270:	1854      	adds	r4, r2, r1
 8007272:	4649      	mov	r1, r9
 8007274:	eb43 0501 	adc.w	r5, r3, r1
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	f04f 0300 	mov.w	r3, #0
 8007280:	00eb      	lsls	r3, r5, #3
 8007282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007286:	00e2      	lsls	r2, r4, #3
 8007288:	4614      	mov	r4, r2
 800728a:	461d      	mov	r5, r3
 800728c:	4643      	mov	r3, r8
 800728e:	18e3      	adds	r3, r4, r3
 8007290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007294:	464b      	mov	r3, r9
 8007296:	eb45 0303 	adc.w	r3, r5, r3
 800729a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800729e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072ae:	f04f 0200 	mov.w	r2, #0
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80072ba:	4629      	mov	r1, r5
 80072bc:	008b      	lsls	r3, r1, #2
 80072be:	4621      	mov	r1, r4
 80072c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072c4:	4621      	mov	r1, r4
 80072c6:	008a      	lsls	r2, r1, #2
 80072c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80072cc:	f7f9 fcdc 	bl	8000c88 <__aeabi_uldivmod>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4b60      	ldr	r3, [pc, #384]	; (8007458 <UART_SetConfig+0x4e4>)
 80072d6:	fba3 2302 	umull	r2, r3, r3, r2
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	011c      	lsls	r4, r3, #4
 80072de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80072ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80072f0:	4642      	mov	r2, r8
 80072f2:	464b      	mov	r3, r9
 80072f4:	1891      	adds	r1, r2, r2
 80072f6:	61b9      	str	r1, [r7, #24]
 80072f8:	415b      	adcs	r3, r3
 80072fa:	61fb      	str	r3, [r7, #28]
 80072fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007300:	4641      	mov	r1, r8
 8007302:	1851      	adds	r1, r2, r1
 8007304:	6139      	str	r1, [r7, #16]
 8007306:	4649      	mov	r1, r9
 8007308:	414b      	adcs	r3, r1
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007318:	4659      	mov	r1, fp
 800731a:	00cb      	lsls	r3, r1, #3
 800731c:	4651      	mov	r1, sl
 800731e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007322:	4651      	mov	r1, sl
 8007324:	00ca      	lsls	r2, r1, #3
 8007326:	4610      	mov	r0, r2
 8007328:	4619      	mov	r1, r3
 800732a:	4603      	mov	r3, r0
 800732c:	4642      	mov	r2, r8
 800732e:	189b      	adds	r3, r3, r2
 8007330:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007334:	464b      	mov	r3, r9
 8007336:	460a      	mov	r2, r1
 8007338:	eb42 0303 	adc.w	r3, r2, r3
 800733c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	67bb      	str	r3, [r7, #120]	; 0x78
 800734a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800734c:	f04f 0200 	mov.w	r2, #0
 8007350:	f04f 0300 	mov.w	r3, #0
 8007354:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007358:	4649      	mov	r1, r9
 800735a:	008b      	lsls	r3, r1, #2
 800735c:	4641      	mov	r1, r8
 800735e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007362:	4641      	mov	r1, r8
 8007364:	008a      	lsls	r2, r1, #2
 8007366:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800736a:	f7f9 fc8d 	bl	8000c88 <__aeabi_uldivmod>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	4611      	mov	r1, r2
 8007374:	4b38      	ldr	r3, [pc, #224]	; (8007458 <UART_SetConfig+0x4e4>)
 8007376:	fba3 2301 	umull	r2, r3, r3, r1
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	2264      	movs	r2, #100	; 0x64
 800737e:	fb02 f303 	mul.w	r3, r2, r3
 8007382:	1acb      	subs	r3, r1, r3
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	3332      	adds	r3, #50	; 0x32
 8007388:	4a33      	ldr	r2, [pc, #204]	; (8007458 <UART_SetConfig+0x4e4>)
 800738a:	fba2 2303 	umull	r2, r3, r2, r3
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007394:	441c      	add	r4, r3
 8007396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800739a:	2200      	movs	r2, #0
 800739c:	673b      	str	r3, [r7, #112]	; 0x70
 800739e:	677a      	str	r2, [r7, #116]	; 0x74
 80073a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80073a4:	4642      	mov	r2, r8
 80073a6:	464b      	mov	r3, r9
 80073a8:	1891      	adds	r1, r2, r2
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	415b      	adcs	r3, r3
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073b4:	4641      	mov	r1, r8
 80073b6:	1851      	adds	r1, r2, r1
 80073b8:	6039      	str	r1, [r7, #0]
 80073ba:	4649      	mov	r1, r9
 80073bc:	414b      	adcs	r3, r1
 80073be:	607b      	str	r3, [r7, #4]
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073cc:	4659      	mov	r1, fp
 80073ce:	00cb      	lsls	r3, r1, #3
 80073d0:	4651      	mov	r1, sl
 80073d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073d6:	4651      	mov	r1, sl
 80073d8:	00ca      	lsls	r2, r1, #3
 80073da:	4610      	mov	r0, r2
 80073dc:	4619      	mov	r1, r3
 80073de:	4603      	mov	r3, r0
 80073e0:	4642      	mov	r2, r8
 80073e2:	189b      	adds	r3, r3, r2
 80073e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80073e6:	464b      	mov	r3, r9
 80073e8:	460a      	mov	r2, r1
 80073ea:	eb42 0303 	adc.w	r3, r2, r3
 80073ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	663b      	str	r3, [r7, #96]	; 0x60
 80073fa:	667a      	str	r2, [r7, #100]	; 0x64
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0300 	mov.w	r3, #0
 8007404:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007408:	4649      	mov	r1, r9
 800740a:	008b      	lsls	r3, r1, #2
 800740c:	4641      	mov	r1, r8
 800740e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007412:	4641      	mov	r1, r8
 8007414:	008a      	lsls	r2, r1, #2
 8007416:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800741a:	f7f9 fc35 	bl	8000c88 <__aeabi_uldivmod>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <UART_SetConfig+0x4e4>)
 8007424:	fba3 1302 	umull	r1, r3, r3, r2
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	2164      	movs	r1, #100	; 0x64
 800742c:	fb01 f303 	mul.w	r3, r1, r3
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	3332      	adds	r3, #50	; 0x32
 8007436:	4a08      	ldr	r2, [pc, #32]	; (8007458 <UART_SetConfig+0x4e4>)
 8007438:	fba2 2303 	umull	r2, r3, r2, r3
 800743c:	095b      	lsrs	r3, r3, #5
 800743e:	f003 020f 	and.w	r2, r3, #15
 8007442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4422      	add	r2, r4
 800744a:	609a      	str	r2, [r3, #8]
}
 800744c:	bf00      	nop
 800744e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007452:	46bd      	mov	sp, r7
 8007454:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007458:	51eb851f 	.word	0x51eb851f

0800745c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	6812      	ldr	r2, [r2, #0]
 8007474:	f023 0101 	bic.w	r1, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	2b08      	cmp	r3, #8
 8007484:	d102      	bne.n	800748c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007486:	2340      	movs	r3, #64	; 0x40
 8007488:	617b      	str	r3, [r7, #20]
 800748a:	e001      	b.n	8007490 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800749c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80074a2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80074a8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80074ae:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80074b4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80074ba:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80074c0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80074c6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80074cc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80074d2:	4313      	orrs	r3, r2
 80074d4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	4313      	orrs	r3, r2
 80074de:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80074ea:	4b10      	ldr	r3, [pc, #64]	; (800752c <FSMC_NORSRAM_Init+0xd0>)
 80074ec:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074f4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80074fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	43db      	mvns	r3, r3
 800750c:	ea02 0103 	and.w	r1, r2, r3
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	4319      	orrs	r1, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	0008fb7f 	.word	0x0008fb7f

08007530 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007546:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	011b      	lsls	r3, r3, #4
 8007554:	431a      	orrs	r2, r3
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	021b      	lsls	r3, r3, #8
 800755c:	431a      	orrs	r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	041b      	lsls	r3, r3, #16
 8007564:	431a      	orrs	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	3b01      	subs	r3, #1
 800756c:	051b      	lsls	r3, r3, #20
 800756e:	431a      	orrs	r2, r3
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	3b02      	subs	r3, #2
 8007576:	061b      	lsls	r3, r3, #24
 8007578:	431a      	orrs	r2, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	4313      	orrs	r3, r2
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	3201      	adds	r2, #1
 8007584:	4319      	orrs	r1, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
	...

0800759c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075b0:	d11d      	bne.n	80075ee <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075ba:	4b13      	ldr	r3, [pc, #76]	; (8007608 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80075bc:	4013      	ands	r3, r2
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	6811      	ldr	r1, [r2, #0]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	6852      	ldr	r2, [r2, #4]
 80075c6:	0112      	lsls	r2, r2, #4
 80075c8:	4311      	orrs	r1, r2
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	6892      	ldr	r2, [r2, #8]
 80075ce:	0212      	lsls	r2, r2, #8
 80075d0:	4311      	orrs	r1, r2
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	6992      	ldr	r2, [r2, #24]
 80075d6:	4311      	orrs	r1, r2
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	68d2      	ldr	r2, [r2, #12]
 80075dc:	0412      	lsls	r2, r2, #16
 80075de:	430a      	orrs	r2, r1
 80075e0:	ea43 0102 	orr.w	r1, r3, r2
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80075ec:	e005      	b.n	80075fa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80075f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	cff00000 	.word	0xcff00000

0800760c <__cvt>:
 800760c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	ec55 4b10 	vmov	r4, r5, d0
 8007614:	2d00      	cmp	r5, #0
 8007616:	460e      	mov	r6, r1
 8007618:	4619      	mov	r1, r3
 800761a:	462b      	mov	r3, r5
 800761c:	bfbb      	ittet	lt
 800761e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007622:	461d      	movlt	r5, r3
 8007624:	2300      	movge	r3, #0
 8007626:	232d      	movlt	r3, #45	; 0x2d
 8007628:	700b      	strb	r3, [r1, #0]
 800762a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800762c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007630:	4691      	mov	r9, r2
 8007632:	f023 0820 	bic.w	r8, r3, #32
 8007636:	bfbc      	itt	lt
 8007638:	4622      	movlt	r2, r4
 800763a:	4614      	movlt	r4, r2
 800763c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007640:	d005      	beq.n	800764e <__cvt+0x42>
 8007642:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007646:	d100      	bne.n	800764a <__cvt+0x3e>
 8007648:	3601      	adds	r6, #1
 800764a:	2102      	movs	r1, #2
 800764c:	e000      	b.n	8007650 <__cvt+0x44>
 800764e:	2103      	movs	r1, #3
 8007650:	ab03      	add	r3, sp, #12
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	ab02      	add	r3, sp, #8
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	ec45 4b10 	vmov	d0, r4, r5
 800765c:	4653      	mov	r3, sl
 800765e:	4632      	mov	r2, r6
 8007660:	f001 f8b2 	bl	80087c8 <_dtoa_r>
 8007664:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007668:	4607      	mov	r7, r0
 800766a:	d102      	bne.n	8007672 <__cvt+0x66>
 800766c:	f019 0f01 	tst.w	r9, #1
 8007670:	d022      	beq.n	80076b8 <__cvt+0xac>
 8007672:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007676:	eb07 0906 	add.w	r9, r7, r6
 800767a:	d110      	bne.n	800769e <__cvt+0x92>
 800767c:	783b      	ldrb	r3, [r7, #0]
 800767e:	2b30      	cmp	r3, #48	; 0x30
 8007680:	d10a      	bne.n	8007698 <__cvt+0x8c>
 8007682:	2200      	movs	r2, #0
 8007684:	2300      	movs	r3, #0
 8007686:	4620      	mov	r0, r4
 8007688:	4629      	mov	r1, r5
 800768a:	f7f9 fa1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800768e:	b918      	cbnz	r0, 8007698 <__cvt+0x8c>
 8007690:	f1c6 0601 	rsb	r6, r6, #1
 8007694:	f8ca 6000 	str.w	r6, [sl]
 8007698:	f8da 3000 	ldr.w	r3, [sl]
 800769c:	4499      	add	r9, r3
 800769e:	2200      	movs	r2, #0
 80076a0:	2300      	movs	r3, #0
 80076a2:	4620      	mov	r0, r4
 80076a4:	4629      	mov	r1, r5
 80076a6:	f7f9 fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80076aa:	b108      	cbz	r0, 80076b0 <__cvt+0xa4>
 80076ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80076b0:	2230      	movs	r2, #48	; 0x30
 80076b2:	9b03      	ldr	r3, [sp, #12]
 80076b4:	454b      	cmp	r3, r9
 80076b6:	d307      	bcc.n	80076c8 <__cvt+0xbc>
 80076b8:	9b03      	ldr	r3, [sp, #12]
 80076ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076bc:	1bdb      	subs	r3, r3, r7
 80076be:	4638      	mov	r0, r7
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	b004      	add	sp, #16
 80076c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c8:	1c59      	adds	r1, r3, #1
 80076ca:	9103      	str	r1, [sp, #12]
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	e7f0      	b.n	80076b2 <__cvt+0xa6>

080076d0 <__exponent>:
 80076d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076d2:	4603      	mov	r3, r0
 80076d4:	2900      	cmp	r1, #0
 80076d6:	bfb8      	it	lt
 80076d8:	4249      	neglt	r1, r1
 80076da:	f803 2b02 	strb.w	r2, [r3], #2
 80076de:	bfb4      	ite	lt
 80076e0:	222d      	movlt	r2, #45	; 0x2d
 80076e2:	222b      	movge	r2, #43	; 0x2b
 80076e4:	2909      	cmp	r1, #9
 80076e6:	7042      	strb	r2, [r0, #1]
 80076e8:	dd2a      	ble.n	8007740 <__exponent+0x70>
 80076ea:	f10d 0207 	add.w	r2, sp, #7
 80076ee:	4617      	mov	r7, r2
 80076f0:	260a      	movs	r6, #10
 80076f2:	4694      	mov	ip, r2
 80076f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80076f8:	fb06 1415 	mls	r4, r6, r5, r1
 80076fc:	3430      	adds	r4, #48	; 0x30
 80076fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007702:	460c      	mov	r4, r1
 8007704:	2c63      	cmp	r4, #99	; 0x63
 8007706:	f102 32ff 	add.w	r2, r2, #4294967295
 800770a:	4629      	mov	r1, r5
 800770c:	dcf1      	bgt.n	80076f2 <__exponent+0x22>
 800770e:	3130      	adds	r1, #48	; 0x30
 8007710:	f1ac 0402 	sub.w	r4, ip, #2
 8007714:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007718:	1c41      	adds	r1, r0, #1
 800771a:	4622      	mov	r2, r4
 800771c:	42ba      	cmp	r2, r7
 800771e:	d30a      	bcc.n	8007736 <__exponent+0x66>
 8007720:	f10d 0209 	add.w	r2, sp, #9
 8007724:	eba2 020c 	sub.w	r2, r2, ip
 8007728:	42bc      	cmp	r4, r7
 800772a:	bf88      	it	hi
 800772c:	2200      	movhi	r2, #0
 800772e:	4413      	add	r3, r2
 8007730:	1a18      	subs	r0, r3, r0
 8007732:	b003      	add	sp, #12
 8007734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007736:	f812 5b01 	ldrb.w	r5, [r2], #1
 800773a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800773e:	e7ed      	b.n	800771c <__exponent+0x4c>
 8007740:	2330      	movs	r3, #48	; 0x30
 8007742:	3130      	adds	r1, #48	; 0x30
 8007744:	7083      	strb	r3, [r0, #2]
 8007746:	70c1      	strb	r1, [r0, #3]
 8007748:	1d03      	adds	r3, r0, #4
 800774a:	e7f1      	b.n	8007730 <__exponent+0x60>

0800774c <_printf_float>:
 800774c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007750:	ed2d 8b02 	vpush	{d8}
 8007754:	b08d      	sub	sp, #52	; 0x34
 8007756:	460c      	mov	r4, r1
 8007758:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800775c:	4616      	mov	r6, r2
 800775e:	461f      	mov	r7, r3
 8007760:	4605      	mov	r5, r0
 8007762:	f000 ff2b 	bl	80085bc <_localeconv_r>
 8007766:	f8d0 a000 	ldr.w	sl, [r0]
 800776a:	4650      	mov	r0, sl
 800776c:	f7f8 fd80 	bl	8000270 <strlen>
 8007770:	2300      	movs	r3, #0
 8007772:	930a      	str	r3, [sp, #40]	; 0x28
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	9305      	str	r3, [sp, #20]
 8007778:	f8d8 3000 	ldr.w	r3, [r8]
 800777c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007780:	3307      	adds	r3, #7
 8007782:	f023 0307 	bic.w	r3, r3, #7
 8007786:	f103 0208 	add.w	r2, r3, #8
 800778a:	f8c8 2000 	str.w	r2, [r8]
 800778e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007792:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007796:	9307      	str	r3, [sp, #28]
 8007798:	f8cd 8018 	str.w	r8, [sp, #24]
 800779c:	ee08 0a10 	vmov	s16, r0
 80077a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80077a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077a8:	4b9e      	ldr	r3, [pc, #632]	; (8007a24 <_printf_float+0x2d8>)
 80077aa:	f04f 32ff 	mov.w	r2, #4294967295
 80077ae:	f7f9 f9bd 	bl	8000b2c <__aeabi_dcmpun>
 80077b2:	bb88      	cbnz	r0, 8007818 <_printf_float+0xcc>
 80077b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077b8:	4b9a      	ldr	r3, [pc, #616]	; (8007a24 <_printf_float+0x2d8>)
 80077ba:	f04f 32ff 	mov.w	r2, #4294967295
 80077be:	f7f9 f997 	bl	8000af0 <__aeabi_dcmple>
 80077c2:	bb48      	cbnz	r0, 8007818 <_printf_float+0xcc>
 80077c4:	2200      	movs	r2, #0
 80077c6:	2300      	movs	r3, #0
 80077c8:	4640      	mov	r0, r8
 80077ca:	4649      	mov	r1, r9
 80077cc:	f7f9 f986 	bl	8000adc <__aeabi_dcmplt>
 80077d0:	b110      	cbz	r0, 80077d8 <_printf_float+0x8c>
 80077d2:	232d      	movs	r3, #45	; 0x2d
 80077d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d8:	4a93      	ldr	r2, [pc, #588]	; (8007a28 <_printf_float+0x2dc>)
 80077da:	4b94      	ldr	r3, [pc, #592]	; (8007a2c <_printf_float+0x2e0>)
 80077dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80077e0:	bf94      	ite	ls
 80077e2:	4690      	movls	r8, r2
 80077e4:	4698      	movhi	r8, r3
 80077e6:	2303      	movs	r3, #3
 80077e8:	6123      	str	r3, [r4, #16]
 80077ea:	9b05      	ldr	r3, [sp, #20]
 80077ec:	f023 0304 	bic.w	r3, r3, #4
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	f04f 0900 	mov.w	r9, #0
 80077f6:	9700      	str	r7, [sp, #0]
 80077f8:	4633      	mov	r3, r6
 80077fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80077fc:	4621      	mov	r1, r4
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 f9da 	bl	8007bb8 <_printf_common>
 8007804:	3001      	adds	r0, #1
 8007806:	f040 8090 	bne.w	800792a <_printf_float+0x1de>
 800780a:	f04f 30ff 	mov.w	r0, #4294967295
 800780e:	b00d      	add	sp, #52	; 0x34
 8007810:	ecbd 8b02 	vpop	{d8}
 8007814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007818:	4642      	mov	r2, r8
 800781a:	464b      	mov	r3, r9
 800781c:	4640      	mov	r0, r8
 800781e:	4649      	mov	r1, r9
 8007820:	f7f9 f984 	bl	8000b2c <__aeabi_dcmpun>
 8007824:	b140      	cbz	r0, 8007838 <_printf_float+0xec>
 8007826:	464b      	mov	r3, r9
 8007828:	2b00      	cmp	r3, #0
 800782a:	bfbc      	itt	lt
 800782c:	232d      	movlt	r3, #45	; 0x2d
 800782e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007832:	4a7f      	ldr	r2, [pc, #508]	; (8007a30 <_printf_float+0x2e4>)
 8007834:	4b7f      	ldr	r3, [pc, #508]	; (8007a34 <_printf_float+0x2e8>)
 8007836:	e7d1      	b.n	80077dc <_printf_float+0x90>
 8007838:	6863      	ldr	r3, [r4, #4]
 800783a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800783e:	9206      	str	r2, [sp, #24]
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	d13f      	bne.n	80078c4 <_printf_float+0x178>
 8007844:	2306      	movs	r3, #6
 8007846:	6063      	str	r3, [r4, #4]
 8007848:	9b05      	ldr	r3, [sp, #20]
 800784a:	6861      	ldr	r1, [r4, #4]
 800784c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007850:	2300      	movs	r3, #0
 8007852:	9303      	str	r3, [sp, #12]
 8007854:	ab0a      	add	r3, sp, #40	; 0x28
 8007856:	e9cd b301 	strd	fp, r3, [sp, #4]
 800785a:	ab09      	add	r3, sp, #36	; 0x24
 800785c:	ec49 8b10 	vmov	d0, r8, r9
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	6022      	str	r2, [r4, #0]
 8007864:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007868:	4628      	mov	r0, r5
 800786a:	f7ff fecf 	bl	800760c <__cvt>
 800786e:	9b06      	ldr	r3, [sp, #24]
 8007870:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007872:	2b47      	cmp	r3, #71	; 0x47
 8007874:	4680      	mov	r8, r0
 8007876:	d108      	bne.n	800788a <_printf_float+0x13e>
 8007878:	1cc8      	adds	r0, r1, #3
 800787a:	db02      	blt.n	8007882 <_printf_float+0x136>
 800787c:	6863      	ldr	r3, [r4, #4]
 800787e:	4299      	cmp	r1, r3
 8007880:	dd41      	ble.n	8007906 <_printf_float+0x1ba>
 8007882:	f1ab 0302 	sub.w	r3, fp, #2
 8007886:	fa5f fb83 	uxtb.w	fp, r3
 800788a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800788e:	d820      	bhi.n	80078d2 <_printf_float+0x186>
 8007890:	3901      	subs	r1, #1
 8007892:	465a      	mov	r2, fp
 8007894:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007898:	9109      	str	r1, [sp, #36]	; 0x24
 800789a:	f7ff ff19 	bl	80076d0 <__exponent>
 800789e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078a0:	1813      	adds	r3, r2, r0
 80078a2:	2a01      	cmp	r2, #1
 80078a4:	4681      	mov	r9, r0
 80078a6:	6123      	str	r3, [r4, #16]
 80078a8:	dc02      	bgt.n	80078b0 <_printf_float+0x164>
 80078aa:	6822      	ldr	r2, [r4, #0]
 80078ac:	07d2      	lsls	r2, r2, #31
 80078ae:	d501      	bpl.n	80078b4 <_printf_float+0x168>
 80078b0:	3301      	adds	r3, #1
 80078b2:	6123      	str	r3, [r4, #16]
 80078b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d09c      	beq.n	80077f6 <_printf_float+0xaa>
 80078bc:	232d      	movs	r3, #45	; 0x2d
 80078be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078c2:	e798      	b.n	80077f6 <_printf_float+0xaa>
 80078c4:	9a06      	ldr	r2, [sp, #24]
 80078c6:	2a47      	cmp	r2, #71	; 0x47
 80078c8:	d1be      	bne.n	8007848 <_printf_float+0xfc>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1bc      	bne.n	8007848 <_printf_float+0xfc>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e7b9      	b.n	8007846 <_printf_float+0xfa>
 80078d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80078d6:	d118      	bne.n	800790a <_printf_float+0x1be>
 80078d8:	2900      	cmp	r1, #0
 80078da:	6863      	ldr	r3, [r4, #4]
 80078dc:	dd0b      	ble.n	80078f6 <_printf_float+0x1aa>
 80078de:	6121      	str	r1, [r4, #16]
 80078e0:	b913      	cbnz	r3, 80078e8 <_printf_float+0x19c>
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	07d0      	lsls	r0, r2, #31
 80078e6:	d502      	bpl.n	80078ee <_printf_float+0x1a2>
 80078e8:	3301      	adds	r3, #1
 80078ea:	440b      	add	r3, r1
 80078ec:	6123      	str	r3, [r4, #16]
 80078ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80078f0:	f04f 0900 	mov.w	r9, #0
 80078f4:	e7de      	b.n	80078b4 <_printf_float+0x168>
 80078f6:	b913      	cbnz	r3, 80078fe <_printf_float+0x1b2>
 80078f8:	6822      	ldr	r2, [r4, #0]
 80078fa:	07d2      	lsls	r2, r2, #31
 80078fc:	d501      	bpl.n	8007902 <_printf_float+0x1b6>
 80078fe:	3302      	adds	r3, #2
 8007900:	e7f4      	b.n	80078ec <_printf_float+0x1a0>
 8007902:	2301      	movs	r3, #1
 8007904:	e7f2      	b.n	80078ec <_printf_float+0x1a0>
 8007906:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800790a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800790c:	4299      	cmp	r1, r3
 800790e:	db05      	blt.n	800791c <_printf_float+0x1d0>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	6121      	str	r1, [r4, #16]
 8007914:	07d8      	lsls	r0, r3, #31
 8007916:	d5ea      	bpl.n	80078ee <_printf_float+0x1a2>
 8007918:	1c4b      	adds	r3, r1, #1
 800791a:	e7e7      	b.n	80078ec <_printf_float+0x1a0>
 800791c:	2900      	cmp	r1, #0
 800791e:	bfd4      	ite	le
 8007920:	f1c1 0202 	rsble	r2, r1, #2
 8007924:	2201      	movgt	r2, #1
 8007926:	4413      	add	r3, r2
 8007928:	e7e0      	b.n	80078ec <_printf_float+0x1a0>
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	055a      	lsls	r2, r3, #21
 800792e:	d407      	bmi.n	8007940 <_printf_float+0x1f4>
 8007930:	6923      	ldr	r3, [r4, #16]
 8007932:	4642      	mov	r2, r8
 8007934:	4631      	mov	r1, r6
 8007936:	4628      	mov	r0, r5
 8007938:	47b8      	blx	r7
 800793a:	3001      	adds	r0, #1
 800793c:	d12c      	bne.n	8007998 <_printf_float+0x24c>
 800793e:	e764      	b.n	800780a <_printf_float+0xbe>
 8007940:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007944:	f240 80e0 	bls.w	8007b08 <_printf_float+0x3bc>
 8007948:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800794c:	2200      	movs	r2, #0
 800794e:	2300      	movs	r3, #0
 8007950:	f7f9 f8ba 	bl	8000ac8 <__aeabi_dcmpeq>
 8007954:	2800      	cmp	r0, #0
 8007956:	d034      	beq.n	80079c2 <_printf_float+0x276>
 8007958:	4a37      	ldr	r2, [pc, #220]	; (8007a38 <_printf_float+0x2ec>)
 800795a:	2301      	movs	r3, #1
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	f43f af51 	beq.w	800780a <_printf_float+0xbe>
 8007968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800796c:	429a      	cmp	r2, r3
 800796e:	db02      	blt.n	8007976 <_printf_float+0x22a>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	07d8      	lsls	r0, r3, #31
 8007974:	d510      	bpl.n	8007998 <_printf_float+0x24c>
 8007976:	ee18 3a10 	vmov	r3, s16
 800797a:	4652      	mov	r2, sl
 800797c:	4631      	mov	r1, r6
 800797e:	4628      	mov	r0, r5
 8007980:	47b8      	blx	r7
 8007982:	3001      	adds	r0, #1
 8007984:	f43f af41 	beq.w	800780a <_printf_float+0xbe>
 8007988:	f04f 0800 	mov.w	r8, #0
 800798c:	f104 091a 	add.w	r9, r4, #26
 8007990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007992:	3b01      	subs	r3, #1
 8007994:	4543      	cmp	r3, r8
 8007996:	dc09      	bgt.n	80079ac <_printf_float+0x260>
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	079b      	lsls	r3, r3, #30
 800799c:	f100 8107 	bmi.w	8007bae <_printf_float+0x462>
 80079a0:	68e0      	ldr	r0, [r4, #12]
 80079a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a4:	4298      	cmp	r0, r3
 80079a6:	bfb8      	it	lt
 80079a8:	4618      	movlt	r0, r3
 80079aa:	e730      	b.n	800780e <_printf_float+0xc2>
 80079ac:	2301      	movs	r3, #1
 80079ae:	464a      	mov	r2, r9
 80079b0:	4631      	mov	r1, r6
 80079b2:	4628      	mov	r0, r5
 80079b4:	47b8      	blx	r7
 80079b6:	3001      	adds	r0, #1
 80079b8:	f43f af27 	beq.w	800780a <_printf_float+0xbe>
 80079bc:	f108 0801 	add.w	r8, r8, #1
 80079c0:	e7e6      	b.n	8007990 <_printf_float+0x244>
 80079c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	dc39      	bgt.n	8007a3c <_printf_float+0x2f0>
 80079c8:	4a1b      	ldr	r2, [pc, #108]	; (8007a38 <_printf_float+0x2ec>)
 80079ca:	2301      	movs	r3, #1
 80079cc:	4631      	mov	r1, r6
 80079ce:	4628      	mov	r0, r5
 80079d0:	47b8      	blx	r7
 80079d2:	3001      	adds	r0, #1
 80079d4:	f43f af19 	beq.w	800780a <_printf_float+0xbe>
 80079d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80079dc:	4313      	orrs	r3, r2
 80079de:	d102      	bne.n	80079e6 <_printf_float+0x29a>
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	07d9      	lsls	r1, r3, #31
 80079e4:	d5d8      	bpl.n	8007998 <_printf_float+0x24c>
 80079e6:	ee18 3a10 	vmov	r3, s16
 80079ea:	4652      	mov	r2, sl
 80079ec:	4631      	mov	r1, r6
 80079ee:	4628      	mov	r0, r5
 80079f0:	47b8      	blx	r7
 80079f2:	3001      	adds	r0, #1
 80079f4:	f43f af09 	beq.w	800780a <_printf_float+0xbe>
 80079f8:	f04f 0900 	mov.w	r9, #0
 80079fc:	f104 0a1a 	add.w	sl, r4, #26
 8007a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a02:	425b      	negs	r3, r3
 8007a04:	454b      	cmp	r3, r9
 8007a06:	dc01      	bgt.n	8007a0c <_printf_float+0x2c0>
 8007a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a0a:	e792      	b.n	8007932 <_printf_float+0x1e6>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	4652      	mov	r2, sl
 8007a10:	4631      	mov	r1, r6
 8007a12:	4628      	mov	r0, r5
 8007a14:	47b8      	blx	r7
 8007a16:	3001      	adds	r0, #1
 8007a18:	f43f aef7 	beq.w	800780a <_printf_float+0xbe>
 8007a1c:	f109 0901 	add.w	r9, r9, #1
 8007a20:	e7ee      	b.n	8007a00 <_printf_float+0x2b4>
 8007a22:	bf00      	nop
 8007a24:	7fefffff 	.word	0x7fefffff
 8007a28:	0800ede4 	.word	0x0800ede4
 8007a2c:	0800ede8 	.word	0x0800ede8
 8007a30:	0800edec 	.word	0x0800edec
 8007a34:	0800edf0 	.word	0x0800edf0
 8007a38:	0800edf4 	.word	0x0800edf4
 8007a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a40:	429a      	cmp	r2, r3
 8007a42:	bfa8      	it	ge
 8007a44:	461a      	movge	r2, r3
 8007a46:	2a00      	cmp	r2, #0
 8007a48:	4691      	mov	r9, r2
 8007a4a:	dc37      	bgt.n	8007abc <_printf_float+0x370>
 8007a4c:	f04f 0b00 	mov.w	fp, #0
 8007a50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a54:	f104 021a 	add.w	r2, r4, #26
 8007a58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a5a:	9305      	str	r3, [sp, #20]
 8007a5c:	eba3 0309 	sub.w	r3, r3, r9
 8007a60:	455b      	cmp	r3, fp
 8007a62:	dc33      	bgt.n	8007acc <_printf_float+0x380>
 8007a64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	db3b      	blt.n	8007ae4 <_printf_float+0x398>
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	07da      	lsls	r2, r3, #31
 8007a70:	d438      	bmi.n	8007ae4 <_printf_float+0x398>
 8007a72:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007a76:	eba2 0903 	sub.w	r9, r2, r3
 8007a7a:	9b05      	ldr	r3, [sp, #20]
 8007a7c:	1ad2      	subs	r2, r2, r3
 8007a7e:	4591      	cmp	r9, r2
 8007a80:	bfa8      	it	ge
 8007a82:	4691      	movge	r9, r2
 8007a84:	f1b9 0f00 	cmp.w	r9, #0
 8007a88:	dc35      	bgt.n	8007af6 <_printf_float+0x3aa>
 8007a8a:	f04f 0800 	mov.w	r8, #0
 8007a8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a92:	f104 0a1a 	add.w	sl, r4, #26
 8007a96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a9a:	1a9b      	subs	r3, r3, r2
 8007a9c:	eba3 0309 	sub.w	r3, r3, r9
 8007aa0:	4543      	cmp	r3, r8
 8007aa2:	f77f af79 	ble.w	8007998 <_printf_float+0x24c>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	4652      	mov	r2, sl
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4628      	mov	r0, r5
 8007aae:	47b8      	blx	r7
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	f43f aeaa 	beq.w	800780a <_printf_float+0xbe>
 8007ab6:	f108 0801 	add.w	r8, r8, #1
 8007aba:	e7ec      	b.n	8007a96 <_printf_float+0x34a>
 8007abc:	4613      	mov	r3, r2
 8007abe:	4631      	mov	r1, r6
 8007ac0:	4642      	mov	r2, r8
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	47b8      	blx	r7
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	d1c0      	bne.n	8007a4c <_printf_float+0x300>
 8007aca:	e69e      	b.n	800780a <_printf_float+0xbe>
 8007acc:	2301      	movs	r3, #1
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	9205      	str	r2, [sp, #20]
 8007ad4:	47b8      	blx	r7
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	f43f ae97 	beq.w	800780a <_printf_float+0xbe>
 8007adc:	9a05      	ldr	r2, [sp, #20]
 8007ade:	f10b 0b01 	add.w	fp, fp, #1
 8007ae2:	e7b9      	b.n	8007a58 <_printf_float+0x30c>
 8007ae4:	ee18 3a10 	vmov	r3, s16
 8007ae8:	4652      	mov	r2, sl
 8007aea:	4631      	mov	r1, r6
 8007aec:	4628      	mov	r0, r5
 8007aee:	47b8      	blx	r7
 8007af0:	3001      	adds	r0, #1
 8007af2:	d1be      	bne.n	8007a72 <_printf_float+0x326>
 8007af4:	e689      	b.n	800780a <_printf_float+0xbe>
 8007af6:	9a05      	ldr	r2, [sp, #20]
 8007af8:	464b      	mov	r3, r9
 8007afa:	4442      	add	r2, r8
 8007afc:	4631      	mov	r1, r6
 8007afe:	4628      	mov	r0, r5
 8007b00:	47b8      	blx	r7
 8007b02:	3001      	adds	r0, #1
 8007b04:	d1c1      	bne.n	8007a8a <_printf_float+0x33e>
 8007b06:	e680      	b.n	800780a <_printf_float+0xbe>
 8007b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b0a:	2a01      	cmp	r2, #1
 8007b0c:	dc01      	bgt.n	8007b12 <_printf_float+0x3c6>
 8007b0e:	07db      	lsls	r3, r3, #31
 8007b10:	d53a      	bpl.n	8007b88 <_printf_float+0x43c>
 8007b12:	2301      	movs	r3, #1
 8007b14:	4642      	mov	r2, r8
 8007b16:	4631      	mov	r1, r6
 8007b18:	4628      	mov	r0, r5
 8007b1a:	47b8      	blx	r7
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	f43f ae74 	beq.w	800780a <_printf_float+0xbe>
 8007b22:	ee18 3a10 	vmov	r3, s16
 8007b26:	4652      	mov	r2, sl
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b8      	blx	r7
 8007b2e:	3001      	adds	r0, #1
 8007b30:	f43f ae6b 	beq.w	800780a <_printf_float+0xbe>
 8007b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007b40:	f7f8 ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b44:	b9d8      	cbnz	r0, 8007b7e <_printf_float+0x432>
 8007b46:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b4a:	f108 0201 	add.w	r2, r8, #1
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4628      	mov	r0, r5
 8007b52:	47b8      	blx	r7
 8007b54:	3001      	adds	r0, #1
 8007b56:	d10e      	bne.n	8007b76 <_printf_float+0x42a>
 8007b58:	e657      	b.n	800780a <_printf_float+0xbe>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4652      	mov	r2, sl
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4628      	mov	r0, r5
 8007b62:	47b8      	blx	r7
 8007b64:	3001      	adds	r0, #1
 8007b66:	f43f ae50 	beq.w	800780a <_printf_float+0xbe>
 8007b6a:	f108 0801 	add.w	r8, r8, #1
 8007b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b70:	3b01      	subs	r3, #1
 8007b72:	4543      	cmp	r3, r8
 8007b74:	dcf1      	bgt.n	8007b5a <_printf_float+0x40e>
 8007b76:	464b      	mov	r3, r9
 8007b78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b7c:	e6da      	b.n	8007934 <_printf_float+0x1e8>
 8007b7e:	f04f 0800 	mov.w	r8, #0
 8007b82:	f104 0a1a 	add.w	sl, r4, #26
 8007b86:	e7f2      	b.n	8007b6e <_printf_float+0x422>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	4642      	mov	r2, r8
 8007b8c:	e7df      	b.n	8007b4e <_printf_float+0x402>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	464a      	mov	r2, r9
 8007b92:	4631      	mov	r1, r6
 8007b94:	4628      	mov	r0, r5
 8007b96:	47b8      	blx	r7
 8007b98:	3001      	adds	r0, #1
 8007b9a:	f43f ae36 	beq.w	800780a <_printf_float+0xbe>
 8007b9e:	f108 0801 	add.w	r8, r8, #1
 8007ba2:	68e3      	ldr	r3, [r4, #12]
 8007ba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ba6:	1a5b      	subs	r3, r3, r1
 8007ba8:	4543      	cmp	r3, r8
 8007baa:	dcf0      	bgt.n	8007b8e <_printf_float+0x442>
 8007bac:	e6f8      	b.n	80079a0 <_printf_float+0x254>
 8007bae:	f04f 0800 	mov.w	r8, #0
 8007bb2:	f104 0919 	add.w	r9, r4, #25
 8007bb6:	e7f4      	b.n	8007ba2 <_printf_float+0x456>

08007bb8 <_printf_common>:
 8007bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bbc:	4616      	mov	r6, r2
 8007bbe:	4699      	mov	r9, r3
 8007bc0:	688a      	ldr	r2, [r1, #8]
 8007bc2:	690b      	ldr	r3, [r1, #16]
 8007bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	bfb8      	it	lt
 8007bcc:	4613      	movlt	r3, r2
 8007bce:	6033      	str	r3, [r6, #0]
 8007bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	b10a      	cbz	r2, 8007bde <_printf_common+0x26>
 8007bda:	3301      	adds	r3, #1
 8007bdc:	6033      	str	r3, [r6, #0]
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	0699      	lsls	r1, r3, #26
 8007be2:	bf42      	ittt	mi
 8007be4:	6833      	ldrmi	r3, [r6, #0]
 8007be6:	3302      	addmi	r3, #2
 8007be8:	6033      	strmi	r3, [r6, #0]
 8007bea:	6825      	ldr	r5, [r4, #0]
 8007bec:	f015 0506 	ands.w	r5, r5, #6
 8007bf0:	d106      	bne.n	8007c00 <_printf_common+0x48>
 8007bf2:	f104 0a19 	add.w	sl, r4, #25
 8007bf6:	68e3      	ldr	r3, [r4, #12]
 8007bf8:	6832      	ldr	r2, [r6, #0]
 8007bfa:	1a9b      	subs	r3, r3, r2
 8007bfc:	42ab      	cmp	r3, r5
 8007bfe:	dc26      	bgt.n	8007c4e <_printf_common+0x96>
 8007c00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c04:	1e13      	subs	r3, r2, #0
 8007c06:	6822      	ldr	r2, [r4, #0]
 8007c08:	bf18      	it	ne
 8007c0a:	2301      	movne	r3, #1
 8007c0c:	0692      	lsls	r2, r2, #26
 8007c0e:	d42b      	bmi.n	8007c68 <_printf_common+0xb0>
 8007c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c14:	4649      	mov	r1, r9
 8007c16:	4638      	mov	r0, r7
 8007c18:	47c0      	blx	r8
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d01e      	beq.n	8007c5c <_printf_common+0xa4>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	6922      	ldr	r2, [r4, #16]
 8007c22:	f003 0306 	and.w	r3, r3, #6
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	bf02      	ittt	eq
 8007c2a:	68e5      	ldreq	r5, [r4, #12]
 8007c2c:	6833      	ldreq	r3, [r6, #0]
 8007c2e:	1aed      	subeq	r5, r5, r3
 8007c30:	68a3      	ldr	r3, [r4, #8]
 8007c32:	bf0c      	ite	eq
 8007c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c38:	2500      	movne	r5, #0
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	bfc4      	itt	gt
 8007c3e:	1a9b      	subgt	r3, r3, r2
 8007c40:	18ed      	addgt	r5, r5, r3
 8007c42:	2600      	movs	r6, #0
 8007c44:	341a      	adds	r4, #26
 8007c46:	42b5      	cmp	r5, r6
 8007c48:	d11a      	bne.n	8007c80 <_printf_common+0xc8>
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	e008      	b.n	8007c60 <_printf_common+0xa8>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	4652      	mov	r2, sl
 8007c52:	4649      	mov	r1, r9
 8007c54:	4638      	mov	r0, r7
 8007c56:	47c0      	blx	r8
 8007c58:	3001      	adds	r0, #1
 8007c5a:	d103      	bne.n	8007c64 <_printf_common+0xac>
 8007c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c64:	3501      	adds	r5, #1
 8007c66:	e7c6      	b.n	8007bf6 <_printf_common+0x3e>
 8007c68:	18e1      	adds	r1, r4, r3
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	2030      	movs	r0, #48	; 0x30
 8007c6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c72:	4422      	add	r2, r4
 8007c74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	e7c7      	b.n	8007c10 <_printf_common+0x58>
 8007c80:	2301      	movs	r3, #1
 8007c82:	4622      	mov	r2, r4
 8007c84:	4649      	mov	r1, r9
 8007c86:	4638      	mov	r0, r7
 8007c88:	47c0      	blx	r8
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d0e6      	beq.n	8007c5c <_printf_common+0xa4>
 8007c8e:	3601      	adds	r6, #1
 8007c90:	e7d9      	b.n	8007c46 <_printf_common+0x8e>
	...

08007c94 <_printf_i>:
 8007c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	7e0f      	ldrb	r7, [r1, #24]
 8007c9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c9c:	2f78      	cmp	r7, #120	; 0x78
 8007c9e:	4691      	mov	r9, r2
 8007ca0:	4680      	mov	r8, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	469a      	mov	sl, r3
 8007ca6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007caa:	d807      	bhi.n	8007cbc <_printf_i+0x28>
 8007cac:	2f62      	cmp	r7, #98	; 0x62
 8007cae:	d80a      	bhi.n	8007cc6 <_printf_i+0x32>
 8007cb0:	2f00      	cmp	r7, #0
 8007cb2:	f000 80d4 	beq.w	8007e5e <_printf_i+0x1ca>
 8007cb6:	2f58      	cmp	r7, #88	; 0x58
 8007cb8:	f000 80c0 	beq.w	8007e3c <_printf_i+0x1a8>
 8007cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cc4:	e03a      	b.n	8007d3c <_printf_i+0xa8>
 8007cc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cca:	2b15      	cmp	r3, #21
 8007ccc:	d8f6      	bhi.n	8007cbc <_printf_i+0x28>
 8007cce:	a101      	add	r1, pc, #4	; (adr r1, 8007cd4 <_printf_i+0x40>)
 8007cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cd4:	08007d2d 	.word	0x08007d2d
 8007cd8:	08007d41 	.word	0x08007d41
 8007cdc:	08007cbd 	.word	0x08007cbd
 8007ce0:	08007cbd 	.word	0x08007cbd
 8007ce4:	08007cbd 	.word	0x08007cbd
 8007ce8:	08007cbd 	.word	0x08007cbd
 8007cec:	08007d41 	.word	0x08007d41
 8007cf0:	08007cbd 	.word	0x08007cbd
 8007cf4:	08007cbd 	.word	0x08007cbd
 8007cf8:	08007cbd 	.word	0x08007cbd
 8007cfc:	08007cbd 	.word	0x08007cbd
 8007d00:	08007e45 	.word	0x08007e45
 8007d04:	08007d6d 	.word	0x08007d6d
 8007d08:	08007dff 	.word	0x08007dff
 8007d0c:	08007cbd 	.word	0x08007cbd
 8007d10:	08007cbd 	.word	0x08007cbd
 8007d14:	08007e67 	.word	0x08007e67
 8007d18:	08007cbd 	.word	0x08007cbd
 8007d1c:	08007d6d 	.word	0x08007d6d
 8007d20:	08007cbd 	.word	0x08007cbd
 8007d24:	08007cbd 	.word	0x08007cbd
 8007d28:	08007e07 	.word	0x08007e07
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	1d1a      	adds	r2, r3, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	602a      	str	r2, [r5, #0]
 8007d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e09f      	b.n	8007e80 <_printf_i+0x1ec>
 8007d40:	6820      	ldr	r0, [r4, #0]
 8007d42:	682b      	ldr	r3, [r5, #0]
 8007d44:	0607      	lsls	r7, r0, #24
 8007d46:	f103 0104 	add.w	r1, r3, #4
 8007d4a:	6029      	str	r1, [r5, #0]
 8007d4c:	d501      	bpl.n	8007d52 <_printf_i+0xbe>
 8007d4e:	681e      	ldr	r6, [r3, #0]
 8007d50:	e003      	b.n	8007d5a <_printf_i+0xc6>
 8007d52:	0646      	lsls	r6, r0, #25
 8007d54:	d5fb      	bpl.n	8007d4e <_printf_i+0xba>
 8007d56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	da03      	bge.n	8007d66 <_printf_i+0xd2>
 8007d5e:	232d      	movs	r3, #45	; 0x2d
 8007d60:	4276      	negs	r6, r6
 8007d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d66:	485a      	ldr	r0, [pc, #360]	; (8007ed0 <_printf_i+0x23c>)
 8007d68:	230a      	movs	r3, #10
 8007d6a:	e012      	b.n	8007d92 <_printf_i+0xfe>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	6820      	ldr	r0, [r4, #0]
 8007d70:	1d19      	adds	r1, r3, #4
 8007d72:	6029      	str	r1, [r5, #0]
 8007d74:	0605      	lsls	r5, r0, #24
 8007d76:	d501      	bpl.n	8007d7c <_printf_i+0xe8>
 8007d78:	681e      	ldr	r6, [r3, #0]
 8007d7a:	e002      	b.n	8007d82 <_printf_i+0xee>
 8007d7c:	0641      	lsls	r1, r0, #25
 8007d7e:	d5fb      	bpl.n	8007d78 <_printf_i+0xe4>
 8007d80:	881e      	ldrh	r6, [r3, #0]
 8007d82:	4853      	ldr	r0, [pc, #332]	; (8007ed0 <_printf_i+0x23c>)
 8007d84:	2f6f      	cmp	r7, #111	; 0x6f
 8007d86:	bf0c      	ite	eq
 8007d88:	2308      	moveq	r3, #8
 8007d8a:	230a      	movne	r3, #10
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d92:	6865      	ldr	r5, [r4, #4]
 8007d94:	60a5      	str	r5, [r4, #8]
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	bfa2      	ittt	ge
 8007d9a:	6821      	ldrge	r1, [r4, #0]
 8007d9c:	f021 0104 	bicge.w	r1, r1, #4
 8007da0:	6021      	strge	r1, [r4, #0]
 8007da2:	b90e      	cbnz	r6, 8007da8 <_printf_i+0x114>
 8007da4:	2d00      	cmp	r5, #0
 8007da6:	d04b      	beq.n	8007e40 <_printf_i+0x1ac>
 8007da8:	4615      	mov	r5, r2
 8007daa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dae:	fb03 6711 	mls	r7, r3, r1, r6
 8007db2:	5dc7      	ldrb	r7, [r0, r7]
 8007db4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007db8:	4637      	mov	r7, r6
 8007dba:	42bb      	cmp	r3, r7
 8007dbc:	460e      	mov	r6, r1
 8007dbe:	d9f4      	bls.n	8007daa <_printf_i+0x116>
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d10b      	bne.n	8007ddc <_printf_i+0x148>
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	07de      	lsls	r6, r3, #31
 8007dc8:	d508      	bpl.n	8007ddc <_printf_i+0x148>
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	6861      	ldr	r1, [r4, #4]
 8007dce:	4299      	cmp	r1, r3
 8007dd0:	bfde      	ittt	le
 8007dd2:	2330      	movle	r3, #48	; 0x30
 8007dd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007dd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ddc:	1b52      	subs	r2, r2, r5
 8007dde:	6122      	str	r2, [r4, #16]
 8007de0:	f8cd a000 	str.w	sl, [sp]
 8007de4:	464b      	mov	r3, r9
 8007de6:	aa03      	add	r2, sp, #12
 8007de8:	4621      	mov	r1, r4
 8007dea:	4640      	mov	r0, r8
 8007dec:	f7ff fee4 	bl	8007bb8 <_printf_common>
 8007df0:	3001      	adds	r0, #1
 8007df2:	d14a      	bne.n	8007e8a <_printf_i+0x1f6>
 8007df4:	f04f 30ff 	mov.w	r0, #4294967295
 8007df8:	b004      	add	sp, #16
 8007dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	f043 0320 	orr.w	r3, r3, #32
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	4833      	ldr	r0, [pc, #204]	; (8007ed4 <_printf_i+0x240>)
 8007e08:	2778      	movs	r7, #120	; 0x78
 8007e0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	6829      	ldr	r1, [r5, #0]
 8007e12:	061f      	lsls	r7, r3, #24
 8007e14:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e18:	d402      	bmi.n	8007e20 <_printf_i+0x18c>
 8007e1a:	065f      	lsls	r7, r3, #25
 8007e1c:	bf48      	it	mi
 8007e1e:	b2b6      	uxthmi	r6, r6
 8007e20:	07df      	lsls	r7, r3, #31
 8007e22:	bf48      	it	mi
 8007e24:	f043 0320 	orrmi.w	r3, r3, #32
 8007e28:	6029      	str	r1, [r5, #0]
 8007e2a:	bf48      	it	mi
 8007e2c:	6023      	strmi	r3, [r4, #0]
 8007e2e:	b91e      	cbnz	r6, 8007e38 <_printf_i+0x1a4>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	f023 0320 	bic.w	r3, r3, #32
 8007e36:	6023      	str	r3, [r4, #0]
 8007e38:	2310      	movs	r3, #16
 8007e3a:	e7a7      	b.n	8007d8c <_printf_i+0xf8>
 8007e3c:	4824      	ldr	r0, [pc, #144]	; (8007ed0 <_printf_i+0x23c>)
 8007e3e:	e7e4      	b.n	8007e0a <_printf_i+0x176>
 8007e40:	4615      	mov	r5, r2
 8007e42:	e7bd      	b.n	8007dc0 <_printf_i+0x12c>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	6826      	ldr	r6, [r4, #0]
 8007e48:	6961      	ldr	r1, [r4, #20]
 8007e4a:	1d18      	adds	r0, r3, #4
 8007e4c:	6028      	str	r0, [r5, #0]
 8007e4e:	0635      	lsls	r5, r6, #24
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	d501      	bpl.n	8007e58 <_printf_i+0x1c4>
 8007e54:	6019      	str	r1, [r3, #0]
 8007e56:	e002      	b.n	8007e5e <_printf_i+0x1ca>
 8007e58:	0670      	lsls	r0, r6, #25
 8007e5a:	d5fb      	bpl.n	8007e54 <_printf_i+0x1c0>
 8007e5c:	8019      	strh	r1, [r3, #0]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	6123      	str	r3, [r4, #16]
 8007e62:	4615      	mov	r5, r2
 8007e64:	e7bc      	b.n	8007de0 <_printf_i+0x14c>
 8007e66:	682b      	ldr	r3, [r5, #0]
 8007e68:	1d1a      	adds	r2, r3, #4
 8007e6a:	602a      	str	r2, [r5, #0]
 8007e6c:	681d      	ldr	r5, [r3, #0]
 8007e6e:	6862      	ldr	r2, [r4, #4]
 8007e70:	2100      	movs	r1, #0
 8007e72:	4628      	mov	r0, r5
 8007e74:	f7f8 f9ac 	bl	80001d0 <memchr>
 8007e78:	b108      	cbz	r0, 8007e7e <_printf_i+0x1ea>
 8007e7a:	1b40      	subs	r0, r0, r5
 8007e7c:	6060      	str	r0, [r4, #4]
 8007e7e:	6863      	ldr	r3, [r4, #4]
 8007e80:	6123      	str	r3, [r4, #16]
 8007e82:	2300      	movs	r3, #0
 8007e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e88:	e7aa      	b.n	8007de0 <_printf_i+0x14c>
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	462a      	mov	r2, r5
 8007e8e:	4649      	mov	r1, r9
 8007e90:	4640      	mov	r0, r8
 8007e92:	47d0      	blx	sl
 8007e94:	3001      	adds	r0, #1
 8007e96:	d0ad      	beq.n	8007df4 <_printf_i+0x160>
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	079b      	lsls	r3, r3, #30
 8007e9c:	d413      	bmi.n	8007ec6 <_printf_i+0x232>
 8007e9e:	68e0      	ldr	r0, [r4, #12]
 8007ea0:	9b03      	ldr	r3, [sp, #12]
 8007ea2:	4298      	cmp	r0, r3
 8007ea4:	bfb8      	it	lt
 8007ea6:	4618      	movlt	r0, r3
 8007ea8:	e7a6      	b.n	8007df8 <_printf_i+0x164>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4632      	mov	r2, r6
 8007eae:	4649      	mov	r1, r9
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	47d0      	blx	sl
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d09d      	beq.n	8007df4 <_printf_i+0x160>
 8007eb8:	3501      	adds	r5, #1
 8007eba:	68e3      	ldr	r3, [r4, #12]
 8007ebc:	9903      	ldr	r1, [sp, #12]
 8007ebe:	1a5b      	subs	r3, r3, r1
 8007ec0:	42ab      	cmp	r3, r5
 8007ec2:	dcf2      	bgt.n	8007eaa <_printf_i+0x216>
 8007ec4:	e7eb      	b.n	8007e9e <_printf_i+0x20a>
 8007ec6:	2500      	movs	r5, #0
 8007ec8:	f104 0619 	add.w	r6, r4, #25
 8007ecc:	e7f5      	b.n	8007eba <_printf_i+0x226>
 8007ece:	bf00      	nop
 8007ed0:	0800edf6 	.word	0x0800edf6
 8007ed4:	0800ee07 	.word	0x0800ee07

08007ed8 <_scanf_float>:
 8007ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007edc:	b087      	sub	sp, #28
 8007ede:	4617      	mov	r7, r2
 8007ee0:	9303      	str	r3, [sp, #12]
 8007ee2:	688b      	ldr	r3, [r1, #8]
 8007ee4:	1e5a      	subs	r2, r3, #1
 8007ee6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007eea:	bf83      	ittte	hi
 8007eec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007ef0:	195b      	addhi	r3, r3, r5
 8007ef2:	9302      	strhi	r3, [sp, #8]
 8007ef4:	2300      	movls	r3, #0
 8007ef6:	bf86      	itte	hi
 8007ef8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007efc:	608b      	strhi	r3, [r1, #8]
 8007efe:	9302      	strls	r3, [sp, #8]
 8007f00:	680b      	ldr	r3, [r1, #0]
 8007f02:	468b      	mov	fp, r1
 8007f04:	2500      	movs	r5, #0
 8007f06:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007f0a:	f84b 3b1c 	str.w	r3, [fp], #28
 8007f0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007f12:	4680      	mov	r8, r0
 8007f14:	460c      	mov	r4, r1
 8007f16:	465e      	mov	r6, fp
 8007f18:	46aa      	mov	sl, r5
 8007f1a:	46a9      	mov	r9, r5
 8007f1c:	9501      	str	r5, [sp, #4]
 8007f1e:	68a2      	ldr	r2, [r4, #8]
 8007f20:	b152      	cbz	r2, 8007f38 <_scanf_float+0x60>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2b4e      	cmp	r3, #78	; 0x4e
 8007f28:	d864      	bhi.n	8007ff4 <_scanf_float+0x11c>
 8007f2a:	2b40      	cmp	r3, #64	; 0x40
 8007f2c:	d83c      	bhi.n	8007fa8 <_scanf_float+0xd0>
 8007f2e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007f32:	b2c8      	uxtb	r0, r1
 8007f34:	280e      	cmp	r0, #14
 8007f36:	d93a      	bls.n	8007fae <_scanf_float+0xd6>
 8007f38:	f1b9 0f00 	cmp.w	r9, #0
 8007f3c:	d003      	beq.n	8007f46 <_scanf_float+0x6e>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f4a:	f1ba 0f01 	cmp.w	sl, #1
 8007f4e:	f200 8113 	bhi.w	8008178 <_scanf_float+0x2a0>
 8007f52:	455e      	cmp	r6, fp
 8007f54:	f200 8105 	bhi.w	8008162 <_scanf_float+0x28a>
 8007f58:	2501      	movs	r5, #1
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	b007      	add	sp, #28
 8007f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f62:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007f66:	2a0d      	cmp	r2, #13
 8007f68:	d8e6      	bhi.n	8007f38 <_scanf_float+0x60>
 8007f6a:	a101      	add	r1, pc, #4	; (adr r1, 8007f70 <_scanf_float+0x98>)
 8007f6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f70:	080080af 	.word	0x080080af
 8007f74:	08007f39 	.word	0x08007f39
 8007f78:	08007f39 	.word	0x08007f39
 8007f7c:	08007f39 	.word	0x08007f39
 8007f80:	0800810f 	.word	0x0800810f
 8007f84:	080080e7 	.word	0x080080e7
 8007f88:	08007f39 	.word	0x08007f39
 8007f8c:	08007f39 	.word	0x08007f39
 8007f90:	080080bd 	.word	0x080080bd
 8007f94:	08007f39 	.word	0x08007f39
 8007f98:	08007f39 	.word	0x08007f39
 8007f9c:	08007f39 	.word	0x08007f39
 8007fa0:	08007f39 	.word	0x08007f39
 8007fa4:	08008075 	.word	0x08008075
 8007fa8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007fac:	e7db      	b.n	8007f66 <_scanf_float+0x8e>
 8007fae:	290e      	cmp	r1, #14
 8007fb0:	d8c2      	bhi.n	8007f38 <_scanf_float+0x60>
 8007fb2:	a001      	add	r0, pc, #4	; (adr r0, 8007fb8 <_scanf_float+0xe0>)
 8007fb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007fb8:	08008067 	.word	0x08008067
 8007fbc:	08007f39 	.word	0x08007f39
 8007fc0:	08008067 	.word	0x08008067
 8007fc4:	080080fb 	.word	0x080080fb
 8007fc8:	08007f39 	.word	0x08007f39
 8007fcc:	08008015 	.word	0x08008015
 8007fd0:	08008051 	.word	0x08008051
 8007fd4:	08008051 	.word	0x08008051
 8007fd8:	08008051 	.word	0x08008051
 8007fdc:	08008051 	.word	0x08008051
 8007fe0:	08008051 	.word	0x08008051
 8007fe4:	08008051 	.word	0x08008051
 8007fe8:	08008051 	.word	0x08008051
 8007fec:	08008051 	.word	0x08008051
 8007ff0:	08008051 	.word	0x08008051
 8007ff4:	2b6e      	cmp	r3, #110	; 0x6e
 8007ff6:	d809      	bhi.n	800800c <_scanf_float+0x134>
 8007ff8:	2b60      	cmp	r3, #96	; 0x60
 8007ffa:	d8b2      	bhi.n	8007f62 <_scanf_float+0x8a>
 8007ffc:	2b54      	cmp	r3, #84	; 0x54
 8007ffe:	d077      	beq.n	80080f0 <_scanf_float+0x218>
 8008000:	2b59      	cmp	r3, #89	; 0x59
 8008002:	d199      	bne.n	8007f38 <_scanf_float+0x60>
 8008004:	2d07      	cmp	r5, #7
 8008006:	d197      	bne.n	8007f38 <_scanf_float+0x60>
 8008008:	2508      	movs	r5, #8
 800800a:	e029      	b.n	8008060 <_scanf_float+0x188>
 800800c:	2b74      	cmp	r3, #116	; 0x74
 800800e:	d06f      	beq.n	80080f0 <_scanf_float+0x218>
 8008010:	2b79      	cmp	r3, #121	; 0x79
 8008012:	e7f6      	b.n	8008002 <_scanf_float+0x12a>
 8008014:	6821      	ldr	r1, [r4, #0]
 8008016:	05c8      	lsls	r0, r1, #23
 8008018:	d51a      	bpl.n	8008050 <_scanf_float+0x178>
 800801a:	9b02      	ldr	r3, [sp, #8]
 800801c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008020:	6021      	str	r1, [r4, #0]
 8008022:	f109 0901 	add.w	r9, r9, #1
 8008026:	b11b      	cbz	r3, 8008030 <_scanf_float+0x158>
 8008028:	3b01      	subs	r3, #1
 800802a:	3201      	adds	r2, #1
 800802c:	9302      	str	r3, [sp, #8]
 800802e:	60a2      	str	r2, [r4, #8]
 8008030:	68a3      	ldr	r3, [r4, #8]
 8008032:	3b01      	subs	r3, #1
 8008034:	60a3      	str	r3, [r4, #8]
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	3301      	adds	r3, #1
 800803a:	6123      	str	r3, [r4, #16]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3b01      	subs	r3, #1
 8008040:	2b00      	cmp	r3, #0
 8008042:	607b      	str	r3, [r7, #4]
 8008044:	f340 8084 	ble.w	8008150 <_scanf_float+0x278>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	3301      	adds	r3, #1
 800804c:	603b      	str	r3, [r7, #0]
 800804e:	e766      	b.n	8007f1e <_scanf_float+0x46>
 8008050:	eb1a 0f05 	cmn.w	sl, r5
 8008054:	f47f af70 	bne.w	8007f38 <_scanf_float+0x60>
 8008058:	6822      	ldr	r2, [r4, #0]
 800805a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800805e:	6022      	str	r2, [r4, #0]
 8008060:	f806 3b01 	strb.w	r3, [r6], #1
 8008064:	e7e4      	b.n	8008030 <_scanf_float+0x158>
 8008066:	6822      	ldr	r2, [r4, #0]
 8008068:	0610      	lsls	r0, r2, #24
 800806a:	f57f af65 	bpl.w	8007f38 <_scanf_float+0x60>
 800806e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008072:	e7f4      	b.n	800805e <_scanf_float+0x186>
 8008074:	f1ba 0f00 	cmp.w	sl, #0
 8008078:	d10e      	bne.n	8008098 <_scanf_float+0x1c0>
 800807a:	f1b9 0f00 	cmp.w	r9, #0
 800807e:	d10e      	bne.n	800809e <_scanf_float+0x1c6>
 8008080:	6822      	ldr	r2, [r4, #0]
 8008082:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008086:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800808a:	d108      	bne.n	800809e <_scanf_float+0x1c6>
 800808c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008090:	6022      	str	r2, [r4, #0]
 8008092:	f04f 0a01 	mov.w	sl, #1
 8008096:	e7e3      	b.n	8008060 <_scanf_float+0x188>
 8008098:	f1ba 0f02 	cmp.w	sl, #2
 800809c:	d055      	beq.n	800814a <_scanf_float+0x272>
 800809e:	2d01      	cmp	r5, #1
 80080a0:	d002      	beq.n	80080a8 <_scanf_float+0x1d0>
 80080a2:	2d04      	cmp	r5, #4
 80080a4:	f47f af48 	bne.w	8007f38 <_scanf_float+0x60>
 80080a8:	3501      	adds	r5, #1
 80080aa:	b2ed      	uxtb	r5, r5
 80080ac:	e7d8      	b.n	8008060 <_scanf_float+0x188>
 80080ae:	f1ba 0f01 	cmp.w	sl, #1
 80080b2:	f47f af41 	bne.w	8007f38 <_scanf_float+0x60>
 80080b6:	f04f 0a02 	mov.w	sl, #2
 80080ba:	e7d1      	b.n	8008060 <_scanf_float+0x188>
 80080bc:	b97d      	cbnz	r5, 80080de <_scanf_float+0x206>
 80080be:	f1b9 0f00 	cmp.w	r9, #0
 80080c2:	f47f af3c 	bne.w	8007f3e <_scanf_float+0x66>
 80080c6:	6822      	ldr	r2, [r4, #0]
 80080c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80080cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80080d0:	f47f af39 	bne.w	8007f46 <_scanf_float+0x6e>
 80080d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80080d8:	6022      	str	r2, [r4, #0]
 80080da:	2501      	movs	r5, #1
 80080dc:	e7c0      	b.n	8008060 <_scanf_float+0x188>
 80080de:	2d03      	cmp	r5, #3
 80080e0:	d0e2      	beq.n	80080a8 <_scanf_float+0x1d0>
 80080e2:	2d05      	cmp	r5, #5
 80080e4:	e7de      	b.n	80080a4 <_scanf_float+0x1cc>
 80080e6:	2d02      	cmp	r5, #2
 80080e8:	f47f af26 	bne.w	8007f38 <_scanf_float+0x60>
 80080ec:	2503      	movs	r5, #3
 80080ee:	e7b7      	b.n	8008060 <_scanf_float+0x188>
 80080f0:	2d06      	cmp	r5, #6
 80080f2:	f47f af21 	bne.w	8007f38 <_scanf_float+0x60>
 80080f6:	2507      	movs	r5, #7
 80080f8:	e7b2      	b.n	8008060 <_scanf_float+0x188>
 80080fa:	6822      	ldr	r2, [r4, #0]
 80080fc:	0591      	lsls	r1, r2, #22
 80080fe:	f57f af1b 	bpl.w	8007f38 <_scanf_float+0x60>
 8008102:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008106:	6022      	str	r2, [r4, #0]
 8008108:	f8cd 9004 	str.w	r9, [sp, #4]
 800810c:	e7a8      	b.n	8008060 <_scanf_float+0x188>
 800810e:	6822      	ldr	r2, [r4, #0]
 8008110:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008114:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008118:	d006      	beq.n	8008128 <_scanf_float+0x250>
 800811a:	0550      	lsls	r0, r2, #21
 800811c:	f57f af0c 	bpl.w	8007f38 <_scanf_float+0x60>
 8008120:	f1b9 0f00 	cmp.w	r9, #0
 8008124:	f43f af0f 	beq.w	8007f46 <_scanf_float+0x6e>
 8008128:	0591      	lsls	r1, r2, #22
 800812a:	bf58      	it	pl
 800812c:	9901      	ldrpl	r1, [sp, #4]
 800812e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008132:	bf58      	it	pl
 8008134:	eba9 0101 	subpl.w	r1, r9, r1
 8008138:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800813c:	bf58      	it	pl
 800813e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008142:	6022      	str	r2, [r4, #0]
 8008144:	f04f 0900 	mov.w	r9, #0
 8008148:	e78a      	b.n	8008060 <_scanf_float+0x188>
 800814a:	f04f 0a03 	mov.w	sl, #3
 800814e:	e787      	b.n	8008060 <_scanf_float+0x188>
 8008150:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008154:	4639      	mov	r1, r7
 8008156:	4640      	mov	r0, r8
 8008158:	4798      	blx	r3
 800815a:	2800      	cmp	r0, #0
 800815c:	f43f aedf 	beq.w	8007f1e <_scanf_float+0x46>
 8008160:	e6ea      	b.n	8007f38 <_scanf_float+0x60>
 8008162:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008166:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800816a:	463a      	mov	r2, r7
 800816c:	4640      	mov	r0, r8
 800816e:	4798      	blx	r3
 8008170:	6923      	ldr	r3, [r4, #16]
 8008172:	3b01      	subs	r3, #1
 8008174:	6123      	str	r3, [r4, #16]
 8008176:	e6ec      	b.n	8007f52 <_scanf_float+0x7a>
 8008178:	1e6b      	subs	r3, r5, #1
 800817a:	2b06      	cmp	r3, #6
 800817c:	d825      	bhi.n	80081ca <_scanf_float+0x2f2>
 800817e:	2d02      	cmp	r5, #2
 8008180:	d836      	bhi.n	80081f0 <_scanf_float+0x318>
 8008182:	455e      	cmp	r6, fp
 8008184:	f67f aee8 	bls.w	8007f58 <_scanf_float+0x80>
 8008188:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800818c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008190:	463a      	mov	r2, r7
 8008192:	4640      	mov	r0, r8
 8008194:	4798      	blx	r3
 8008196:	6923      	ldr	r3, [r4, #16]
 8008198:	3b01      	subs	r3, #1
 800819a:	6123      	str	r3, [r4, #16]
 800819c:	e7f1      	b.n	8008182 <_scanf_float+0x2aa>
 800819e:	9802      	ldr	r0, [sp, #8]
 80081a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80081a8:	9002      	str	r0, [sp, #8]
 80081aa:	463a      	mov	r2, r7
 80081ac:	4640      	mov	r0, r8
 80081ae:	4798      	blx	r3
 80081b0:	6923      	ldr	r3, [r4, #16]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	6123      	str	r3, [r4, #16]
 80081b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081ba:	fa5f fa8a 	uxtb.w	sl, sl
 80081be:	f1ba 0f02 	cmp.w	sl, #2
 80081c2:	d1ec      	bne.n	800819e <_scanf_float+0x2c6>
 80081c4:	3d03      	subs	r5, #3
 80081c6:	b2ed      	uxtb	r5, r5
 80081c8:	1b76      	subs	r6, r6, r5
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	05da      	lsls	r2, r3, #23
 80081ce:	d52f      	bpl.n	8008230 <_scanf_float+0x358>
 80081d0:	055b      	lsls	r3, r3, #21
 80081d2:	d510      	bpl.n	80081f6 <_scanf_float+0x31e>
 80081d4:	455e      	cmp	r6, fp
 80081d6:	f67f aebf 	bls.w	8007f58 <_scanf_float+0x80>
 80081da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081e2:	463a      	mov	r2, r7
 80081e4:	4640      	mov	r0, r8
 80081e6:	4798      	blx	r3
 80081e8:	6923      	ldr	r3, [r4, #16]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	6123      	str	r3, [r4, #16]
 80081ee:	e7f1      	b.n	80081d4 <_scanf_float+0x2fc>
 80081f0:	46aa      	mov	sl, r5
 80081f2:	9602      	str	r6, [sp, #8]
 80081f4:	e7df      	b.n	80081b6 <_scanf_float+0x2de>
 80081f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80081fa:	6923      	ldr	r3, [r4, #16]
 80081fc:	2965      	cmp	r1, #101	; 0x65
 80081fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8008202:	f106 35ff 	add.w	r5, r6, #4294967295
 8008206:	6123      	str	r3, [r4, #16]
 8008208:	d00c      	beq.n	8008224 <_scanf_float+0x34c>
 800820a:	2945      	cmp	r1, #69	; 0x45
 800820c:	d00a      	beq.n	8008224 <_scanf_float+0x34c>
 800820e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008212:	463a      	mov	r2, r7
 8008214:	4640      	mov	r0, r8
 8008216:	4798      	blx	r3
 8008218:	6923      	ldr	r3, [r4, #16]
 800821a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800821e:	3b01      	subs	r3, #1
 8008220:	1eb5      	subs	r5, r6, #2
 8008222:	6123      	str	r3, [r4, #16]
 8008224:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008228:	463a      	mov	r2, r7
 800822a:	4640      	mov	r0, r8
 800822c:	4798      	blx	r3
 800822e:	462e      	mov	r6, r5
 8008230:	6825      	ldr	r5, [r4, #0]
 8008232:	f015 0510 	ands.w	r5, r5, #16
 8008236:	d158      	bne.n	80082ea <_scanf_float+0x412>
 8008238:	7035      	strb	r5, [r6, #0]
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008244:	d11c      	bne.n	8008280 <_scanf_float+0x3a8>
 8008246:	9b01      	ldr	r3, [sp, #4]
 8008248:	454b      	cmp	r3, r9
 800824a:	eba3 0209 	sub.w	r2, r3, r9
 800824e:	d124      	bne.n	800829a <_scanf_float+0x3c2>
 8008250:	2200      	movs	r2, #0
 8008252:	4659      	mov	r1, fp
 8008254:	4640      	mov	r0, r8
 8008256:	f002 fc63 	bl	800ab20 <_strtod_r>
 800825a:	9b03      	ldr	r3, [sp, #12]
 800825c:	6821      	ldr	r1, [r4, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f011 0f02 	tst.w	r1, #2
 8008264:	ec57 6b10 	vmov	r6, r7, d0
 8008268:	f103 0204 	add.w	r2, r3, #4
 800826c:	d020      	beq.n	80082b0 <_scanf_float+0x3d8>
 800826e:	9903      	ldr	r1, [sp, #12]
 8008270:	600a      	str	r2, [r1, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	e9c3 6700 	strd	r6, r7, [r3]
 8008278:	68e3      	ldr	r3, [r4, #12]
 800827a:	3301      	adds	r3, #1
 800827c:	60e3      	str	r3, [r4, #12]
 800827e:	e66c      	b.n	8007f5a <_scanf_float+0x82>
 8008280:	9b04      	ldr	r3, [sp, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0e4      	beq.n	8008250 <_scanf_float+0x378>
 8008286:	9905      	ldr	r1, [sp, #20]
 8008288:	230a      	movs	r3, #10
 800828a:	462a      	mov	r2, r5
 800828c:	3101      	adds	r1, #1
 800828e:	4640      	mov	r0, r8
 8008290:	f002 fcce 	bl	800ac30 <_strtol_r>
 8008294:	9b04      	ldr	r3, [sp, #16]
 8008296:	9e05      	ldr	r6, [sp, #20]
 8008298:	1ac2      	subs	r2, r0, r3
 800829a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800829e:	429e      	cmp	r6, r3
 80082a0:	bf28      	it	cs
 80082a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80082a6:	4912      	ldr	r1, [pc, #72]	; (80082f0 <_scanf_float+0x418>)
 80082a8:	4630      	mov	r0, r6
 80082aa:	f000 f91b 	bl	80084e4 <siprintf>
 80082ae:	e7cf      	b.n	8008250 <_scanf_float+0x378>
 80082b0:	f011 0f04 	tst.w	r1, #4
 80082b4:	9903      	ldr	r1, [sp, #12]
 80082b6:	600a      	str	r2, [r1, #0]
 80082b8:	d1db      	bne.n	8008272 <_scanf_float+0x39a>
 80082ba:	f8d3 8000 	ldr.w	r8, [r3]
 80082be:	ee10 2a10 	vmov	r2, s0
 80082c2:	ee10 0a10 	vmov	r0, s0
 80082c6:	463b      	mov	r3, r7
 80082c8:	4639      	mov	r1, r7
 80082ca:	f7f8 fc2f 	bl	8000b2c <__aeabi_dcmpun>
 80082ce:	b128      	cbz	r0, 80082dc <_scanf_float+0x404>
 80082d0:	4808      	ldr	r0, [pc, #32]	; (80082f4 <_scanf_float+0x41c>)
 80082d2:	f000 f9eb 	bl	80086ac <nanf>
 80082d6:	ed88 0a00 	vstr	s0, [r8]
 80082da:	e7cd      	b.n	8008278 <_scanf_float+0x3a0>
 80082dc:	4630      	mov	r0, r6
 80082de:	4639      	mov	r1, r7
 80082e0:	f7f8 fc82 	bl	8000be8 <__aeabi_d2f>
 80082e4:	f8c8 0000 	str.w	r0, [r8]
 80082e8:	e7c6      	b.n	8008278 <_scanf_float+0x3a0>
 80082ea:	2500      	movs	r5, #0
 80082ec:	e635      	b.n	8007f5a <_scanf_float+0x82>
 80082ee:	bf00      	nop
 80082f0:	0800ee18 	.word	0x0800ee18
 80082f4:	0800f1ad 	.word	0x0800f1ad

080082f8 <std>:
 80082f8:	2300      	movs	r3, #0
 80082fa:	b510      	push	{r4, lr}
 80082fc:	4604      	mov	r4, r0
 80082fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008306:	6083      	str	r3, [r0, #8]
 8008308:	8181      	strh	r1, [r0, #12]
 800830a:	6643      	str	r3, [r0, #100]	; 0x64
 800830c:	81c2      	strh	r2, [r0, #14]
 800830e:	6183      	str	r3, [r0, #24]
 8008310:	4619      	mov	r1, r3
 8008312:	2208      	movs	r2, #8
 8008314:	305c      	adds	r0, #92	; 0x5c
 8008316:	f000 f948 	bl	80085aa <memset>
 800831a:	4b0d      	ldr	r3, [pc, #52]	; (8008350 <std+0x58>)
 800831c:	6263      	str	r3, [r4, #36]	; 0x24
 800831e:	4b0d      	ldr	r3, [pc, #52]	; (8008354 <std+0x5c>)
 8008320:	62a3      	str	r3, [r4, #40]	; 0x28
 8008322:	4b0d      	ldr	r3, [pc, #52]	; (8008358 <std+0x60>)
 8008324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008326:	4b0d      	ldr	r3, [pc, #52]	; (800835c <std+0x64>)
 8008328:	6323      	str	r3, [r4, #48]	; 0x30
 800832a:	4b0d      	ldr	r3, [pc, #52]	; (8008360 <std+0x68>)
 800832c:	6224      	str	r4, [r4, #32]
 800832e:	429c      	cmp	r4, r3
 8008330:	d006      	beq.n	8008340 <std+0x48>
 8008332:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008336:	4294      	cmp	r4, r2
 8008338:	d002      	beq.n	8008340 <std+0x48>
 800833a:	33d0      	adds	r3, #208	; 0xd0
 800833c:	429c      	cmp	r4, r3
 800833e:	d105      	bne.n	800834c <std+0x54>
 8008340:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008348:	f000 b9ac 	b.w	80086a4 <__retarget_lock_init_recursive>
 800834c:	bd10      	pop	{r4, pc}
 800834e:	bf00      	nop
 8008350:	08008525 	.word	0x08008525
 8008354:	08008547 	.word	0x08008547
 8008358:	0800857f 	.word	0x0800857f
 800835c:	080085a3 	.word	0x080085a3
 8008360:	20000530 	.word	0x20000530

08008364 <stdio_exit_handler>:
 8008364:	4a02      	ldr	r2, [pc, #8]	; (8008370 <stdio_exit_handler+0xc>)
 8008366:	4903      	ldr	r1, [pc, #12]	; (8008374 <stdio_exit_handler+0x10>)
 8008368:	4803      	ldr	r0, [pc, #12]	; (8008378 <stdio_exit_handler+0x14>)
 800836a:	f000 b869 	b.w	8008440 <_fwalk_sglue>
 800836e:	bf00      	nop
 8008370:	20000014 	.word	0x20000014
 8008374:	0800aff1 	.word	0x0800aff1
 8008378:	20000020 	.word	0x20000020

0800837c <cleanup_stdio>:
 800837c:	6841      	ldr	r1, [r0, #4]
 800837e:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <cleanup_stdio+0x34>)
 8008380:	4299      	cmp	r1, r3
 8008382:	b510      	push	{r4, lr}
 8008384:	4604      	mov	r4, r0
 8008386:	d001      	beq.n	800838c <cleanup_stdio+0x10>
 8008388:	f002 fe32 	bl	800aff0 <_fflush_r>
 800838c:	68a1      	ldr	r1, [r4, #8]
 800838e:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <cleanup_stdio+0x38>)
 8008390:	4299      	cmp	r1, r3
 8008392:	d002      	beq.n	800839a <cleanup_stdio+0x1e>
 8008394:	4620      	mov	r0, r4
 8008396:	f002 fe2b 	bl	800aff0 <_fflush_r>
 800839a:	68e1      	ldr	r1, [r4, #12]
 800839c:	4b06      	ldr	r3, [pc, #24]	; (80083b8 <cleanup_stdio+0x3c>)
 800839e:	4299      	cmp	r1, r3
 80083a0:	d004      	beq.n	80083ac <cleanup_stdio+0x30>
 80083a2:	4620      	mov	r0, r4
 80083a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083a8:	f002 be22 	b.w	800aff0 <_fflush_r>
 80083ac:	bd10      	pop	{r4, pc}
 80083ae:	bf00      	nop
 80083b0:	20000530 	.word	0x20000530
 80083b4:	20000598 	.word	0x20000598
 80083b8:	20000600 	.word	0x20000600

080083bc <global_stdio_init.part.0>:
 80083bc:	b510      	push	{r4, lr}
 80083be:	4b0b      	ldr	r3, [pc, #44]	; (80083ec <global_stdio_init.part.0+0x30>)
 80083c0:	4c0b      	ldr	r4, [pc, #44]	; (80083f0 <global_stdio_init.part.0+0x34>)
 80083c2:	4a0c      	ldr	r2, [pc, #48]	; (80083f4 <global_stdio_init.part.0+0x38>)
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	4620      	mov	r0, r4
 80083c8:	2200      	movs	r2, #0
 80083ca:	2104      	movs	r1, #4
 80083cc:	f7ff ff94 	bl	80082f8 <std>
 80083d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80083d4:	2201      	movs	r2, #1
 80083d6:	2109      	movs	r1, #9
 80083d8:	f7ff ff8e 	bl	80082f8 <std>
 80083dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80083e0:	2202      	movs	r2, #2
 80083e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083e6:	2112      	movs	r1, #18
 80083e8:	f7ff bf86 	b.w	80082f8 <std>
 80083ec:	20000668 	.word	0x20000668
 80083f0:	20000530 	.word	0x20000530
 80083f4:	08008365 	.word	0x08008365

080083f8 <__sfp_lock_acquire>:
 80083f8:	4801      	ldr	r0, [pc, #4]	; (8008400 <__sfp_lock_acquire+0x8>)
 80083fa:	f000 b954 	b.w	80086a6 <__retarget_lock_acquire_recursive>
 80083fe:	bf00      	nop
 8008400:	20000671 	.word	0x20000671

08008404 <__sfp_lock_release>:
 8008404:	4801      	ldr	r0, [pc, #4]	; (800840c <__sfp_lock_release+0x8>)
 8008406:	f000 b94f 	b.w	80086a8 <__retarget_lock_release_recursive>
 800840a:	bf00      	nop
 800840c:	20000671 	.word	0x20000671

08008410 <__sinit>:
 8008410:	b510      	push	{r4, lr}
 8008412:	4604      	mov	r4, r0
 8008414:	f7ff fff0 	bl	80083f8 <__sfp_lock_acquire>
 8008418:	6a23      	ldr	r3, [r4, #32]
 800841a:	b11b      	cbz	r3, 8008424 <__sinit+0x14>
 800841c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008420:	f7ff bff0 	b.w	8008404 <__sfp_lock_release>
 8008424:	4b04      	ldr	r3, [pc, #16]	; (8008438 <__sinit+0x28>)
 8008426:	6223      	str	r3, [r4, #32]
 8008428:	4b04      	ldr	r3, [pc, #16]	; (800843c <__sinit+0x2c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1f5      	bne.n	800841c <__sinit+0xc>
 8008430:	f7ff ffc4 	bl	80083bc <global_stdio_init.part.0>
 8008434:	e7f2      	b.n	800841c <__sinit+0xc>
 8008436:	bf00      	nop
 8008438:	0800837d 	.word	0x0800837d
 800843c:	20000668 	.word	0x20000668

08008440 <_fwalk_sglue>:
 8008440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008444:	4607      	mov	r7, r0
 8008446:	4688      	mov	r8, r1
 8008448:	4614      	mov	r4, r2
 800844a:	2600      	movs	r6, #0
 800844c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008450:	f1b9 0901 	subs.w	r9, r9, #1
 8008454:	d505      	bpl.n	8008462 <_fwalk_sglue+0x22>
 8008456:	6824      	ldr	r4, [r4, #0]
 8008458:	2c00      	cmp	r4, #0
 800845a:	d1f7      	bne.n	800844c <_fwalk_sglue+0xc>
 800845c:	4630      	mov	r0, r6
 800845e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008462:	89ab      	ldrh	r3, [r5, #12]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d907      	bls.n	8008478 <_fwalk_sglue+0x38>
 8008468:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800846c:	3301      	adds	r3, #1
 800846e:	d003      	beq.n	8008478 <_fwalk_sglue+0x38>
 8008470:	4629      	mov	r1, r5
 8008472:	4638      	mov	r0, r7
 8008474:	47c0      	blx	r8
 8008476:	4306      	orrs	r6, r0
 8008478:	3568      	adds	r5, #104	; 0x68
 800847a:	e7e9      	b.n	8008450 <_fwalk_sglue+0x10>

0800847c <sniprintf>:
 800847c:	b40c      	push	{r2, r3}
 800847e:	b530      	push	{r4, r5, lr}
 8008480:	4b17      	ldr	r3, [pc, #92]	; (80084e0 <sniprintf+0x64>)
 8008482:	1e0c      	subs	r4, r1, #0
 8008484:	681d      	ldr	r5, [r3, #0]
 8008486:	b09d      	sub	sp, #116	; 0x74
 8008488:	da08      	bge.n	800849c <sniprintf+0x20>
 800848a:	238b      	movs	r3, #139	; 0x8b
 800848c:	602b      	str	r3, [r5, #0]
 800848e:	f04f 30ff 	mov.w	r0, #4294967295
 8008492:	b01d      	add	sp, #116	; 0x74
 8008494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008498:	b002      	add	sp, #8
 800849a:	4770      	bx	lr
 800849c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80084a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80084a4:	bf14      	ite	ne
 80084a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80084aa:	4623      	moveq	r3, r4
 80084ac:	9304      	str	r3, [sp, #16]
 80084ae:	9307      	str	r3, [sp, #28]
 80084b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80084b4:	9002      	str	r0, [sp, #8]
 80084b6:	9006      	str	r0, [sp, #24]
 80084b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80084bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80084be:	ab21      	add	r3, sp, #132	; 0x84
 80084c0:	a902      	add	r1, sp, #8
 80084c2:	4628      	mov	r0, r5
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	f002 fc0f 	bl	800ace8 <_svfiprintf_r>
 80084ca:	1c43      	adds	r3, r0, #1
 80084cc:	bfbc      	itt	lt
 80084ce:	238b      	movlt	r3, #139	; 0x8b
 80084d0:	602b      	strlt	r3, [r5, #0]
 80084d2:	2c00      	cmp	r4, #0
 80084d4:	d0dd      	beq.n	8008492 <sniprintf+0x16>
 80084d6:	9b02      	ldr	r3, [sp, #8]
 80084d8:	2200      	movs	r2, #0
 80084da:	701a      	strb	r2, [r3, #0]
 80084dc:	e7d9      	b.n	8008492 <sniprintf+0x16>
 80084de:	bf00      	nop
 80084e0:	2000006c 	.word	0x2000006c

080084e4 <siprintf>:
 80084e4:	b40e      	push	{r1, r2, r3}
 80084e6:	b500      	push	{lr}
 80084e8:	b09c      	sub	sp, #112	; 0x70
 80084ea:	ab1d      	add	r3, sp, #116	; 0x74
 80084ec:	9002      	str	r0, [sp, #8]
 80084ee:	9006      	str	r0, [sp, #24]
 80084f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084f4:	4809      	ldr	r0, [pc, #36]	; (800851c <siprintf+0x38>)
 80084f6:	9107      	str	r1, [sp, #28]
 80084f8:	9104      	str	r1, [sp, #16]
 80084fa:	4909      	ldr	r1, [pc, #36]	; (8008520 <siprintf+0x3c>)
 80084fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008500:	9105      	str	r1, [sp, #20]
 8008502:	6800      	ldr	r0, [r0, #0]
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	a902      	add	r1, sp, #8
 8008508:	f002 fbee 	bl	800ace8 <_svfiprintf_r>
 800850c:	9b02      	ldr	r3, [sp, #8]
 800850e:	2200      	movs	r2, #0
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	b01c      	add	sp, #112	; 0x70
 8008514:	f85d eb04 	ldr.w	lr, [sp], #4
 8008518:	b003      	add	sp, #12
 800851a:	4770      	bx	lr
 800851c:	2000006c 	.word	0x2000006c
 8008520:	ffff0208 	.word	0xffff0208

08008524 <__sread>:
 8008524:	b510      	push	{r4, lr}
 8008526:	460c      	mov	r4, r1
 8008528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800852c:	f000 f86c 	bl	8008608 <_read_r>
 8008530:	2800      	cmp	r0, #0
 8008532:	bfab      	itete	ge
 8008534:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008536:	89a3      	ldrhlt	r3, [r4, #12]
 8008538:	181b      	addge	r3, r3, r0
 800853a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800853e:	bfac      	ite	ge
 8008540:	6563      	strge	r3, [r4, #84]	; 0x54
 8008542:	81a3      	strhlt	r3, [r4, #12]
 8008544:	bd10      	pop	{r4, pc}

08008546 <__swrite>:
 8008546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800854a:	461f      	mov	r7, r3
 800854c:	898b      	ldrh	r3, [r1, #12]
 800854e:	05db      	lsls	r3, r3, #23
 8008550:	4605      	mov	r5, r0
 8008552:	460c      	mov	r4, r1
 8008554:	4616      	mov	r6, r2
 8008556:	d505      	bpl.n	8008564 <__swrite+0x1e>
 8008558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800855c:	2302      	movs	r3, #2
 800855e:	2200      	movs	r2, #0
 8008560:	f000 f840 	bl	80085e4 <_lseek_r>
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800856a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800856e:	81a3      	strh	r3, [r4, #12]
 8008570:	4632      	mov	r2, r6
 8008572:	463b      	mov	r3, r7
 8008574:	4628      	mov	r0, r5
 8008576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800857a:	f000 b857 	b.w	800862c <_write_r>

0800857e <__sseek>:
 800857e:	b510      	push	{r4, lr}
 8008580:	460c      	mov	r4, r1
 8008582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008586:	f000 f82d 	bl	80085e4 <_lseek_r>
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	bf15      	itete	ne
 8008590:	6560      	strne	r0, [r4, #84]	; 0x54
 8008592:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008596:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800859a:	81a3      	strheq	r3, [r4, #12]
 800859c:	bf18      	it	ne
 800859e:	81a3      	strhne	r3, [r4, #12]
 80085a0:	bd10      	pop	{r4, pc}

080085a2 <__sclose>:
 80085a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a6:	f000 b80d 	b.w	80085c4 <_close_r>

080085aa <memset>:
 80085aa:	4402      	add	r2, r0
 80085ac:	4603      	mov	r3, r0
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d100      	bne.n	80085b4 <memset+0xa>
 80085b2:	4770      	bx	lr
 80085b4:	f803 1b01 	strb.w	r1, [r3], #1
 80085b8:	e7f9      	b.n	80085ae <memset+0x4>
	...

080085bc <_localeconv_r>:
 80085bc:	4800      	ldr	r0, [pc, #0]	; (80085c0 <_localeconv_r+0x4>)
 80085be:	4770      	bx	lr
 80085c0:	20000160 	.word	0x20000160

080085c4 <_close_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4d06      	ldr	r5, [pc, #24]	; (80085e0 <_close_r+0x1c>)
 80085c8:	2300      	movs	r3, #0
 80085ca:	4604      	mov	r4, r0
 80085cc:	4608      	mov	r0, r1
 80085ce:	602b      	str	r3, [r5, #0]
 80085d0:	f7f9 ffa7 	bl	8002522 <_close>
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	d102      	bne.n	80085de <_close_r+0x1a>
 80085d8:	682b      	ldr	r3, [r5, #0]
 80085da:	b103      	cbz	r3, 80085de <_close_r+0x1a>
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	bd38      	pop	{r3, r4, r5, pc}
 80085e0:	2000066c 	.word	0x2000066c

080085e4 <_lseek_r>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	4d07      	ldr	r5, [pc, #28]	; (8008604 <_lseek_r+0x20>)
 80085e8:	4604      	mov	r4, r0
 80085ea:	4608      	mov	r0, r1
 80085ec:	4611      	mov	r1, r2
 80085ee:	2200      	movs	r2, #0
 80085f0:	602a      	str	r2, [r5, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	f7f9 ffbc 	bl	8002570 <_lseek>
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	d102      	bne.n	8008602 <_lseek_r+0x1e>
 80085fc:	682b      	ldr	r3, [r5, #0]
 80085fe:	b103      	cbz	r3, 8008602 <_lseek_r+0x1e>
 8008600:	6023      	str	r3, [r4, #0]
 8008602:	bd38      	pop	{r3, r4, r5, pc}
 8008604:	2000066c 	.word	0x2000066c

08008608 <_read_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4d07      	ldr	r5, [pc, #28]	; (8008628 <_read_r+0x20>)
 800860c:	4604      	mov	r4, r0
 800860e:	4608      	mov	r0, r1
 8008610:	4611      	mov	r1, r2
 8008612:	2200      	movs	r2, #0
 8008614:	602a      	str	r2, [r5, #0]
 8008616:	461a      	mov	r2, r3
 8008618:	f7f9 ff4a 	bl	80024b0 <_read>
 800861c:	1c43      	adds	r3, r0, #1
 800861e:	d102      	bne.n	8008626 <_read_r+0x1e>
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	b103      	cbz	r3, 8008626 <_read_r+0x1e>
 8008624:	6023      	str	r3, [r4, #0]
 8008626:	bd38      	pop	{r3, r4, r5, pc}
 8008628:	2000066c 	.word	0x2000066c

0800862c <_write_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	4d07      	ldr	r5, [pc, #28]	; (800864c <_write_r+0x20>)
 8008630:	4604      	mov	r4, r0
 8008632:	4608      	mov	r0, r1
 8008634:	4611      	mov	r1, r2
 8008636:	2200      	movs	r2, #0
 8008638:	602a      	str	r2, [r5, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	f7f9 ff55 	bl	80024ea <_write>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d102      	bne.n	800864a <_write_r+0x1e>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	b103      	cbz	r3, 800864a <_write_r+0x1e>
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	bd38      	pop	{r3, r4, r5, pc}
 800864c:	2000066c 	.word	0x2000066c

08008650 <__errno>:
 8008650:	4b01      	ldr	r3, [pc, #4]	; (8008658 <__errno+0x8>)
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	2000006c 	.word	0x2000006c

0800865c <__libc_init_array>:
 800865c:	b570      	push	{r4, r5, r6, lr}
 800865e:	4d0d      	ldr	r5, [pc, #52]	; (8008694 <__libc_init_array+0x38>)
 8008660:	4c0d      	ldr	r4, [pc, #52]	; (8008698 <__libc_init_array+0x3c>)
 8008662:	1b64      	subs	r4, r4, r5
 8008664:	10a4      	asrs	r4, r4, #2
 8008666:	2600      	movs	r6, #0
 8008668:	42a6      	cmp	r6, r4
 800866a:	d109      	bne.n	8008680 <__libc_init_array+0x24>
 800866c:	4d0b      	ldr	r5, [pc, #44]	; (800869c <__libc_init_array+0x40>)
 800866e:	4c0c      	ldr	r4, [pc, #48]	; (80086a0 <__libc_init_array+0x44>)
 8008670:	f003 fbd6 	bl	800be20 <_init>
 8008674:	1b64      	subs	r4, r4, r5
 8008676:	10a4      	asrs	r4, r4, #2
 8008678:	2600      	movs	r6, #0
 800867a:	42a6      	cmp	r6, r4
 800867c:	d105      	bne.n	800868a <__libc_init_array+0x2e>
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	f855 3b04 	ldr.w	r3, [r5], #4
 8008684:	4798      	blx	r3
 8008686:	3601      	adds	r6, #1
 8008688:	e7ee      	b.n	8008668 <__libc_init_array+0xc>
 800868a:	f855 3b04 	ldr.w	r3, [r5], #4
 800868e:	4798      	blx	r3
 8008690:	3601      	adds	r6, #1
 8008692:	e7f2      	b.n	800867a <__libc_init_array+0x1e>
 8008694:	0800f218 	.word	0x0800f218
 8008698:	0800f218 	.word	0x0800f218
 800869c:	0800f218 	.word	0x0800f218
 80086a0:	0800f21c 	.word	0x0800f21c

080086a4 <__retarget_lock_init_recursive>:
 80086a4:	4770      	bx	lr

080086a6 <__retarget_lock_acquire_recursive>:
 80086a6:	4770      	bx	lr

080086a8 <__retarget_lock_release_recursive>:
 80086a8:	4770      	bx	lr
	...

080086ac <nanf>:
 80086ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086b4 <nanf+0x8>
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	7fc00000 	.word	0x7fc00000

080086b8 <quorem>:
 80086b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086bc:	6903      	ldr	r3, [r0, #16]
 80086be:	690c      	ldr	r4, [r1, #16]
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	4607      	mov	r7, r0
 80086c4:	db7e      	blt.n	80087c4 <quorem+0x10c>
 80086c6:	3c01      	subs	r4, #1
 80086c8:	f101 0814 	add.w	r8, r1, #20
 80086cc:	f100 0514 	add.w	r5, r0, #20
 80086d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80086da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086de:	3301      	adds	r3, #1
 80086e0:	429a      	cmp	r2, r3
 80086e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80086e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80086ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80086ee:	d331      	bcc.n	8008754 <quorem+0x9c>
 80086f0:	f04f 0e00 	mov.w	lr, #0
 80086f4:	4640      	mov	r0, r8
 80086f6:	46ac      	mov	ip, r5
 80086f8:	46f2      	mov	sl, lr
 80086fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80086fe:	b293      	uxth	r3, r2
 8008700:	fb06 e303 	mla	r3, r6, r3, lr
 8008704:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008708:	0c1a      	lsrs	r2, r3, #16
 800870a:	b29b      	uxth	r3, r3
 800870c:	ebaa 0303 	sub.w	r3, sl, r3
 8008710:	f8dc a000 	ldr.w	sl, [ip]
 8008714:	fa13 f38a 	uxtah	r3, r3, sl
 8008718:	fb06 220e 	mla	r2, r6, lr, r2
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	9b00      	ldr	r3, [sp, #0]
 8008720:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008724:	b292      	uxth	r2, r2
 8008726:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800872a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800872e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008732:	4581      	cmp	r9, r0
 8008734:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008738:	f84c 3b04 	str.w	r3, [ip], #4
 800873c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008740:	d2db      	bcs.n	80086fa <quorem+0x42>
 8008742:	f855 300b 	ldr.w	r3, [r5, fp]
 8008746:	b92b      	cbnz	r3, 8008754 <quorem+0x9c>
 8008748:	9b01      	ldr	r3, [sp, #4]
 800874a:	3b04      	subs	r3, #4
 800874c:	429d      	cmp	r5, r3
 800874e:	461a      	mov	r2, r3
 8008750:	d32c      	bcc.n	80087ac <quorem+0xf4>
 8008752:	613c      	str	r4, [r7, #16]
 8008754:	4638      	mov	r0, r7
 8008756:	f001 f9ef 	bl	8009b38 <__mcmp>
 800875a:	2800      	cmp	r0, #0
 800875c:	db22      	blt.n	80087a4 <quorem+0xec>
 800875e:	3601      	adds	r6, #1
 8008760:	4629      	mov	r1, r5
 8008762:	2000      	movs	r0, #0
 8008764:	f858 2b04 	ldr.w	r2, [r8], #4
 8008768:	f8d1 c000 	ldr.w	ip, [r1]
 800876c:	b293      	uxth	r3, r2
 800876e:	1ac3      	subs	r3, r0, r3
 8008770:	0c12      	lsrs	r2, r2, #16
 8008772:	fa13 f38c 	uxtah	r3, r3, ip
 8008776:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800877a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800877e:	b29b      	uxth	r3, r3
 8008780:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008784:	45c1      	cmp	r9, r8
 8008786:	f841 3b04 	str.w	r3, [r1], #4
 800878a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800878e:	d2e9      	bcs.n	8008764 <quorem+0xac>
 8008790:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008794:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008798:	b922      	cbnz	r2, 80087a4 <quorem+0xec>
 800879a:	3b04      	subs	r3, #4
 800879c:	429d      	cmp	r5, r3
 800879e:	461a      	mov	r2, r3
 80087a0:	d30a      	bcc.n	80087b8 <quorem+0x100>
 80087a2:	613c      	str	r4, [r7, #16]
 80087a4:	4630      	mov	r0, r6
 80087a6:	b003      	add	sp, #12
 80087a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ac:	6812      	ldr	r2, [r2, #0]
 80087ae:	3b04      	subs	r3, #4
 80087b0:	2a00      	cmp	r2, #0
 80087b2:	d1ce      	bne.n	8008752 <quorem+0x9a>
 80087b4:	3c01      	subs	r4, #1
 80087b6:	e7c9      	b.n	800874c <quorem+0x94>
 80087b8:	6812      	ldr	r2, [r2, #0]
 80087ba:	3b04      	subs	r3, #4
 80087bc:	2a00      	cmp	r2, #0
 80087be:	d1f0      	bne.n	80087a2 <quorem+0xea>
 80087c0:	3c01      	subs	r4, #1
 80087c2:	e7eb      	b.n	800879c <quorem+0xe4>
 80087c4:	2000      	movs	r0, #0
 80087c6:	e7ee      	b.n	80087a6 <quorem+0xee>

080087c8 <_dtoa_r>:
 80087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	ed2d 8b04 	vpush	{d8-d9}
 80087d0:	69c5      	ldr	r5, [r0, #28]
 80087d2:	b093      	sub	sp, #76	; 0x4c
 80087d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80087d8:	ec57 6b10 	vmov	r6, r7, d0
 80087dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80087e0:	9107      	str	r1, [sp, #28]
 80087e2:	4604      	mov	r4, r0
 80087e4:	920a      	str	r2, [sp, #40]	; 0x28
 80087e6:	930d      	str	r3, [sp, #52]	; 0x34
 80087e8:	b975      	cbnz	r5, 8008808 <_dtoa_r+0x40>
 80087ea:	2010      	movs	r0, #16
 80087ec:	f000 fe2a 	bl	8009444 <malloc>
 80087f0:	4602      	mov	r2, r0
 80087f2:	61e0      	str	r0, [r4, #28]
 80087f4:	b920      	cbnz	r0, 8008800 <_dtoa_r+0x38>
 80087f6:	4bae      	ldr	r3, [pc, #696]	; (8008ab0 <_dtoa_r+0x2e8>)
 80087f8:	21ef      	movs	r1, #239	; 0xef
 80087fa:	48ae      	ldr	r0, [pc, #696]	; (8008ab4 <_dtoa_r+0x2ec>)
 80087fc:	f002 fc74 	bl	800b0e8 <__assert_func>
 8008800:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008804:	6005      	str	r5, [r0, #0]
 8008806:	60c5      	str	r5, [r0, #12]
 8008808:	69e3      	ldr	r3, [r4, #28]
 800880a:	6819      	ldr	r1, [r3, #0]
 800880c:	b151      	cbz	r1, 8008824 <_dtoa_r+0x5c>
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	604a      	str	r2, [r1, #4]
 8008812:	2301      	movs	r3, #1
 8008814:	4093      	lsls	r3, r2
 8008816:	608b      	str	r3, [r1, #8]
 8008818:	4620      	mov	r0, r4
 800881a:	f000 ff07 	bl	800962c <_Bfree>
 800881e:	69e3      	ldr	r3, [r4, #28]
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	1e3b      	subs	r3, r7, #0
 8008826:	bfbb      	ittet	lt
 8008828:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800882c:	9303      	strlt	r3, [sp, #12]
 800882e:	2300      	movge	r3, #0
 8008830:	2201      	movlt	r2, #1
 8008832:	bfac      	ite	ge
 8008834:	f8c8 3000 	strge.w	r3, [r8]
 8008838:	f8c8 2000 	strlt.w	r2, [r8]
 800883c:	4b9e      	ldr	r3, [pc, #632]	; (8008ab8 <_dtoa_r+0x2f0>)
 800883e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008842:	ea33 0308 	bics.w	r3, r3, r8
 8008846:	d11b      	bne.n	8008880 <_dtoa_r+0xb8>
 8008848:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800884a:	f242 730f 	movw	r3, #9999	; 0x270f
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008854:	4333      	orrs	r3, r6
 8008856:	f000 8593 	beq.w	8009380 <_dtoa_r+0xbb8>
 800885a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800885c:	b963      	cbnz	r3, 8008878 <_dtoa_r+0xb0>
 800885e:	4b97      	ldr	r3, [pc, #604]	; (8008abc <_dtoa_r+0x2f4>)
 8008860:	e027      	b.n	80088b2 <_dtoa_r+0xea>
 8008862:	4b97      	ldr	r3, [pc, #604]	; (8008ac0 <_dtoa_r+0x2f8>)
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	3308      	adds	r3, #8
 8008868:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	9800      	ldr	r0, [sp, #0]
 800886e:	b013      	add	sp, #76	; 0x4c
 8008870:	ecbd 8b04 	vpop	{d8-d9}
 8008874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008878:	4b90      	ldr	r3, [pc, #576]	; (8008abc <_dtoa_r+0x2f4>)
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	3303      	adds	r3, #3
 800887e:	e7f3      	b.n	8008868 <_dtoa_r+0xa0>
 8008880:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008884:	2200      	movs	r2, #0
 8008886:	ec51 0b17 	vmov	r0, r1, d7
 800888a:	eeb0 8a47 	vmov.f32	s16, s14
 800888e:	eef0 8a67 	vmov.f32	s17, s15
 8008892:	2300      	movs	r3, #0
 8008894:	f7f8 f918 	bl	8000ac8 <__aeabi_dcmpeq>
 8008898:	4681      	mov	r9, r0
 800889a:	b160      	cbz	r0, 80088b6 <_dtoa_r+0xee>
 800889c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800889e:	2301      	movs	r3, #1
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 8568 	beq.w	800937a <_dtoa_r+0xbb2>
 80088aa:	4b86      	ldr	r3, [pc, #536]	; (8008ac4 <_dtoa_r+0x2fc>)
 80088ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	e7da      	b.n	800886c <_dtoa_r+0xa4>
 80088b6:	aa10      	add	r2, sp, #64	; 0x40
 80088b8:	a911      	add	r1, sp, #68	; 0x44
 80088ba:	4620      	mov	r0, r4
 80088bc:	eeb0 0a48 	vmov.f32	s0, s16
 80088c0:	eef0 0a68 	vmov.f32	s1, s17
 80088c4:	f001 fa4e 	bl	8009d64 <__d2b>
 80088c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80088cc:	4682      	mov	sl, r0
 80088ce:	2d00      	cmp	r5, #0
 80088d0:	d07f      	beq.n	80089d2 <_dtoa_r+0x20a>
 80088d2:	ee18 3a90 	vmov	r3, s17
 80088d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80088de:	ec51 0b18 	vmov	r0, r1, d8
 80088e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80088e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80088ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80088ee:	4619      	mov	r1, r3
 80088f0:	2200      	movs	r2, #0
 80088f2:	4b75      	ldr	r3, [pc, #468]	; (8008ac8 <_dtoa_r+0x300>)
 80088f4:	f7f7 fcc8 	bl	8000288 <__aeabi_dsub>
 80088f8:	a367      	add	r3, pc, #412	; (adr r3, 8008a98 <_dtoa_r+0x2d0>)
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f7f7 fe7b 	bl	80005f8 <__aeabi_dmul>
 8008902:	a367      	add	r3, pc, #412	; (adr r3, 8008aa0 <_dtoa_r+0x2d8>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f7f7 fcc0 	bl	800028c <__adddf3>
 800890c:	4606      	mov	r6, r0
 800890e:	4628      	mov	r0, r5
 8008910:	460f      	mov	r7, r1
 8008912:	f7f7 fe07 	bl	8000524 <__aeabi_i2d>
 8008916:	a364      	add	r3, pc, #400	; (adr r3, 8008aa8 <_dtoa_r+0x2e0>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	f7f7 fe6c 	bl	80005f8 <__aeabi_dmul>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4630      	mov	r0, r6
 8008926:	4639      	mov	r1, r7
 8008928:	f7f7 fcb0 	bl	800028c <__adddf3>
 800892c:	4606      	mov	r6, r0
 800892e:	460f      	mov	r7, r1
 8008930:	f7f8 f912 	bl	8000b58 <__aeabi_d2iz>
 8008934:	2200      	movs	r2, #0
 8008936:	4683      	mov	fp, r0
 8008938:	2300      	movs	r3, #0
 800893a:	4630      	mov	r0, r6
 800893c:	4639      	mov	r1, r7
 800893e:	f7f8 f8cd 	bl	8000adc <__aeabi_dcmplt>
 8008942:	b148      	cbz	r0, 8008958 <_dtoa_r+0x190>
 8008944:	4658      	mov	r0, fp
 8008946:	f7f7 fded 	bl	8000524 <__aeabi_i2d>
 800894a:	4632      	mov	r2, r6
 800894c:	463b      	mov	r3, r7
 800894e:	f7f8 f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008952:	b908      	cbnz	r0, 8008958 <_dtoa_r+0x190>
 8008954:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008958:	f1bb 0f16 	cmp.w	fp, #22
 800895c:	d857      	bhi.n	8008a0e <_dtoa_r+0x246>
 800895e:	4b5b      	ldr	r3, [pc, #364]	; (8008acc <_dtoa_r+0x304>)
 8008960:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	ec51 0b18 	vmov	r0, r1, d8
 800896c:	f7f8 f8b6 	bl	8000adc <__aeabi_dcmplt>
 8008970:	2800      	cmp	r0, #0
 8008972:	d04e      	beq.n	8008a12 <_dtoa_r+0x24a>
 8008974:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008978:	2300      	movs	r3, #0
 800897a:	930c      	str	r3, [sp, #48]	; 0x30
 800897c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800897e:	1b5b      	subs	r3, r3, r5
 8008980:	1e5a      	subs	r2, r3, #1
 8008982:	bf45      	ittet	mi
 8008984:	f1c3 0301 	rsbmi	r3, r3, #1
 8008988:	9305      	strmi	r3, [sp, #20]
 800898a:	2300      	movpl	r3, #0
 800898c:	2300      	movmi	r3, #0
 800898e:	9206      	str	r2, [sp, #24]
 8008990:	bf54      	ite	pl
 8008992:	9305      	strpl	r3, [sp, #20]
 8008994:	9306      	strmi	r3, [sp, #24]
 8008996:	f1bb 0f00 	cmp.w	fp, #0
 800899a:	db3c      	blt.n	8008a16 <_dtoa_r+0x24e>
 800899c:	9b06      	ldr	r3, [sp, #24]
 800899e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80089a2:	445b      	add	r3, fp
 80089a4:	9306      	str	r3, [sp, #24]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9308      	str	r3, [sp, #32]
 80089aa:	9b07      	ldr	r3, [sp, #28]
 80089ac:	2b09      	cmp	r3, #9
 80089ae:	d868      	bhi.n	8008a82 <_dtoa_r+0x2ba>
 80089b0:	2b05      	cmp	r3, #5
 80089b2:	bfc4      	itt	gt
 80089b4:	3b04      	subgt	r3, #4
 80089b6:	9307      	strgt	r3, [sp, #28]
 80089b8:	9b07      	ldr	r3, [sp, #28]
 80089ba:	f1a3 0302 	sub.w	r3, r3, #2
 80089be:	bfcc      	ite	gt
 80089c0:	2500      	movgt	r5, #0
 80089c2:	2501      	movle	r5, #1
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	f200 8085 	bhi.w	8008ad4 <_dtoa_r+0x30c>
 80089ca:	e8df f003 	tbb	[pc, r3]
 80089ce:	3b2e      	.short	0x3b2e
 80089d0:	5839      	.short	0x5839
 80089d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80089d6:	441d      	add	r5, r3
 80089d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80089dc:	2b20      	cmp	r3, #32
 80089de:	bfc1      	itttt	gt
 80089e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80089e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80089e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80089ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80089f0:	bfd6      	itet	le
 80089f2:	f1c3 0320 	rsble	r3, r3, #32
 80089f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80089fa:	fa06 f003 	lslle.w	r0, r6, r3
 80089fe:	f7f7 fd81 	bl	8000504 <__aeabi_ui2d>
 8008a02:	2201      	movs	r2, #1
 8008a04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008a08:	3d01      	subs	r5, #1
 8008a0a:	920e      	str	r2, [sp, #56]	; 0x38
 8008a0c:	e76f      	b.n	80088ee <_dtoa_r+0x126>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e7b3      	b.n	800897a <_dtoa_r+0x1b2>
 8008a12:	900c      	str	r0, [sp, #48]	; 0x30
 8008a14:	e7b2      	b.n	800897c <_dtoa_r+0x1b4>
 8008a16:	9b05      	ldr	r3, [sp, #20]
 8008a18:	eba3 030b 	sub.w	r3, r3, fp
 8008a1c:	9305      	str	r3, [sp, #20]
 8008a1e:	f1cb 0300 	rsb	r3, fp, #0
 8008a22:	9308      	str	r3, [sp, #32]
 8008a24:	2300      	movs	r3, #0
 8008a26:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a28:	e7bf      	b.n	80089aa <_dtoa_r+0x1e2>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dc52      	bgt.n	8008ada <_dtoa_r+0x312>
 8008a34:	2301      	movs	r3, #1
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	9304      	str	r3, [sp, #16]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a3e:	e00b      	b.n	8008a58 <_dtoa_r+0x290>
 8008a40:	2301      	movs	r3, #1
 8008a42:	e7f3      	b.n	8008a2c <_dtoa_r+0x264>
 8008a44:	2300      	movs	r3, #0
 8008a46:	9309      	str	r3, [sp, #36]	; 0x24
 8008a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a4a:	445b      	add	r3, fp
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	9304      	str	r3, [sp, #16]
 8008a54:	bfb8      	it	lt
 8008a56:	2301      	movlt	r3, #1
 8008a58:	69e0      	ldr	r0, [r4, #28]
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	2204      	movs	r2, #4
 8008a5e:	f102 0614 	add.w	r6, r2, #20
 8008a62:	429e      	cmp	r6, r3
 8008a64:	d93d      	bls.n	8008ae2 <_dtoa_r+0x31a>
 8008a66:	6041      	str	r1, [r0, #4]
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 fd9f 	bl	80095ac <_Balloc>
 8008a6e:	9000      	str	r0, [sp, #0]
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d139      	bne.n	8008ae8 <_dtoa_r+0x320>
 8008a74:	4b16      	ldr	r3, [pc, #88]	; (8008ad0 <_dtoa_r+0x308>)
 8008a76:	4602      	mov	r2, r0
 8008a78:	f240 11af 	movw	r1, #431	; 0x1af
 8008a7c:	e6bd      	b.n	80087fa <_dtoa_r+0x32>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e7e1      	b.n	8008a46 <_dtoa_r+0x27e>
 8008a82:	2501      	movs	r5, #1
 8008a84:	2300      	movs	r3, #0
 8008a86:	9307      	str	r3, [sp, #28]
 8008a88:	9509      	str	r5, [sp, #36]	; 0x24
 8008a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a8e:	9301      	str	r3, [sp, #4]
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	2200      	movs	r2, #0
 8008a94:	2312      	movs	r3, #18
 8008a96:	e7d1      	b.n	8008a3c <_dtoa_r+0x274>
 8008a98:	636f4361 	.word	0x636f4361
 8008a9c:	3fd287a7 	.word	0x3fd287a7
 8008aa0:	8b60c8b3 	.word	0x8b60c8b3
 8008aa4:	3fc68a28 	.word	0x3fc68a28
 8008aa8:	509f79fb 	.word	0x509f79fb
 8008aac:	3fd34413 	.word	0x3fd34413
 8008ab0:	0800ee2a 	.word	0x0800ee2a
 8008ab4:	0800ee41 	.word	0x0800ee41
 8008ab8:	7ff00000 	.word	0x7ff00000
 8008abc:	0800ee26 	.word	0x0800ee26
 8008ac0:	0800ee1d 	.word	0x0800ee1d
 8008ac4:	0800edf5 	.word	0x0800edf5
 8008ac8:	3ff80000 	.word	0x3ff80000
 8008acc:	0800ef30 	.word	0x0800ef30
 8008ad0:	0800ee99 	.word	0x0800ee99
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad8:	e7d7      	b.n	8008a8a <_dtoa_r+0x2c2>
 8008ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	9304      	str	r3, [sp, #16]
 8008ae0:	e7ba      	b.n	8008a58 <_dtoa_r+0x290>
 8008ae2:	3101      	adds	r1, #1
 8008ae4:	0052      	lsls	r2, r2, #1
 8008ae6:	e7ba      	b.n	8008a5e <_dtoa_r+0x296>
 8008ae8:	69e3      	ldr	r3, [r4, #28]
 8008aea:	9a00      	ldr	r2, [sp, #0]
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	9b04      	ldr	r3, [sp, #16]
 8008af0:	2b0e      	cmp	r3, #14
 8008af2:	f200 80a8 	bhi.w	8008c46 <_dtoa_r+0x47e>
 8008af6:	2d00      	cmp	r5, #0
 8008af8:	f000 80a5 	beq.w	8008c46 <_dtoa_r+0x47e>
 8008afc:	f1bb 0f00 	cmp.w	fp, #0
 8008b00:	dd38      	ble.n	8008b74 <_dtoa_r+0x3ac>
 8008b02:	4bc0      	ldr	r3, [pc, #768]	; (8008e04 <_dtoa_r+0x63c>)
 8008b04:	f00b 020f 	and.w	r2, fp, #15
 8008b08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008b10:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008b14:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008b18:	d019      	beq.n	8008b4e <_dtoa_r+0x386>
 8008b1a:	4bbb      	ldr	r3, [pc, #748]	; (8008e08 <_dtoa_r+0x640>)
 8008b1c:	ec51 0b18 	vmov	r0, r1, d8
 8008b20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b24:	f7f7 fe92 	bl	800084c <__aeabi_ddiv>
 8008b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b2c:	f008 080f 	and.w	r8, r8, #15
 8008b30:	2503      	movs	r5, #3
 8008b32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008e08 <_dtoa_r+0x640>
 8008b36:	f1b8 0f00 	cmp.w	r8, #0
 8008b3a:	d10a      	bne.n	8008b52 <_dtoa_r+0x38a>
 8008b3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b40:	4632      	mov	r2, r6
 8008b42:	463b      	mov	r3, r7
 8008b44:	f7f7 fe82 	bl	800084c <__aeabi_ddiv>
 8008b48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b4c:	e02b      	b.n	8008ba6 <_dtoa_r+0x3de>
 8008b4e:	2502      	movs	r5, #2
 8008b50:	e7ef      	b.n	8008b32 <_dtoa_r+0x36a>
 8008b52:	f018 0f01 	tst.w	r8, #1
 8008b56:	d008      	beq.n	8008b6a <_dtoa_r+0x3a2>
 8008b58:	4630      	mov	r0, r6
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008b60:	f7f7 fd4a 	bl	80005f8 <__aeabi_dmul>
 8008b64:	3501      	adds	r5, #1
 8008b66:	4606      	mov	r6, r0
 8008b68:	460f      	mov	r7, r1
 8008b6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008b6e:	f109 0908 	add.w	r9, r9, #8
 8008b72:	e7e0      	b.n	8008b36 <_dtoa_r+0x36e>
 8008b74:	f000 809f 	beq.w	8008cb6 <_dtoa_r+0x4ee>
 8008b78:	f1cb 0600 	rsb	r6, fp, #0
 8008b7c:	4ba1      	ldr	r3, [pc, #644]	; (8008e04 <_dtoa_r+0x63c>)
 8008b7e:	4fa2      	ldr	r7, [pc, #648]	; (8008e08 <_dtoa_r+0x640>)
 8008b80:	f006 020f 	and.w	r2, r6, #15
 8008b84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	ec51 0b18 	vmov	r0, r1, d8
 8008b90:	f7f7 fd32 	bl	80005f8 <__aeabi_dmul>
 8008b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b98:	1136      	asrs	r6, r6, #4
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2502      	movs	r5, #2
 8008b9e:	2e00      	cmp	r6, #0
 8008ba0:	d17e      	bne.n	8008ca0 <_dtoa_r+0x4d8>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1d0      	bne.n	8008b48 <_dtoa_r+0x380>
 8008ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ba8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 8084 	beq.w	8008cba <_dtoa_r+0x4f2>
 8008bb2:	4b96      	ldr	r3, [pc, #600]	; (8008e0c <_dtoa_r+0x644>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	4649      	mov	r1, r9
 8008bba:	f7f7 ff8f 	bl	8000adc <__aeabi_dcmplt>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d07b      	beq.n	8008cba <_dtoa_r+0x4f2>
 8008bc2:	9b04      	ldr	r3, [sp, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d078      	beq.n	8008cba <_dtoa_r+0x4f2>
 8008bc8:	9b01      	ldr	r3, [sp, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	dd39      	ble.n	8008c42 <_dtoa_r+0x47a>
 8008bce:	4b90      	ldr	r3, [pc, #576]	; (8008e10 <_dtoa_r+0x648>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	f7f7 fd0f 	bl	80005f8 <__aeabi_dmul>
 8008bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bde:	9e01      	ldr	r6, [sp, #4]
 8008be0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008be4:	3501      	adds	r5, #1
 8008be6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008bea:	4628      	mov	r0, r5
 8008bec:	f7f7 fc9a 	bl	8000524 <__aeabi_i2d>
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	464b      	mov	r3, r9
 8008bf4:	f7f7 fd00 	bl	80005f8 <__aeabi_dmul>
 8008bf8:	4b86      	ldr	r3, [pc, #536]	; (8008e14 <_dtoa_r+0x64c>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f7f7 fb46 	bl	800028c <__adddf3>
 8008c00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c08:	9303      	str	r3, [sp, #12]
 8008c0a:	2e00      	cmp	r6, #0
 8008c0c:	d158      	bne.n	8008cc0 <_dtoa_r+0x4f8>
 8008c0e:	4b82      	ldr	r3, [pc, #520]	; (8008e18 <_dtoa_r+0x650>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	4640      	mov	r0, r8
 8008c14:	4649      	mov	r1, r9
 8008c16:	f7f7 fb37 	bl	8000288 <__aeabi_dsub>
 8008c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c1e:	4680      	mov	r8, r0
 8008c20:	4689      	mov	r9, r1
 8008c22:	f7f7 ff79 	bl	8000b18 <__aeabi_dcmpgt>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	f040 8296 	bne.w	8009158 <_dtoa_r+0x990>
 8008c2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008c30:	4640      	mov	r0, r8
 8008c32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c36:	4649      	mov	r1, r9
 8008c38:	f7f7 ff50 	bl	8000adc <__aeabi_dcmplt>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	f040 8289 	bne.w	8009154 <_dtoa_r+0x98c>
 8008c42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f2c0 814e 	blt.w	8008eea <_dtoa_r+0x722>
 8008c4e:	f1bb 0f0e 	cmp.w	fp, #14
 8008c52:	f300 814a 	bgt.w	8008eea <_dtoa_r+0x722>
 8008c56:	4b6b      	ldr	r3, [pc, #428]	; (8008e04 <_dtoa_r+0x63c>)
 8008c58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f280 80dc 	bge.w	8008e20 <_dtoa_r+0x658>
 8008c68:	9b04      	ldr	r3, [sp, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f300 80d8 	bgt.w	8008e20 <_dtoa_r+0x658>
 8008c70:	f040 826f 	bne.w	8009152 <_dtoa_r+0x98a>
 8008c74:	4b68      	ldr	r3, [pc, #416]	; (8008e18 <_dtoa_r+0x650>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	4640      	mov	r0, r8
 8008c7a:	4649      	mov	r1, r9
 8008c7c:	f7f7 fcbc 	bl	80005f8 <__aeabi_dmul>
 8008c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c84:	f7f7 ff3e 	bl	8000b04 <__aeabi_dcmpge>
 8008c88:	9e04      	ldr	r6, [sp, #16]
 8008c8a:	4637      	mov	r7, r6
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f040 8245 	bne.w	800911c <_dtoa_r+0x954>
 8008c92:	9d00      	ldr	r5, [sp, #0]
 8008c94:	2331      	movs	r3, #49	; 0x31
 8008c96:	f805 3b01 	strb.w	r3, [r5], #1
 8008c9a:	f10b 0b01 	add.w	fp, fp, #1
 8008c9e:	e241      	b.n	8009124 <_dtoa_r+0x95c>
 8008ca0:	07f2      	lsls	r2, r6, #31
 8008ca2:	d505      	bpl.n	8008cb0 <_dtoa_r+0x4e8>
 8008ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca8:	f7f7 fca6 	bl	80005f8 <__aeabi_dmul>
 8008cac:	3501      	adds	r5, #1
 8008cae:	2301      	movs	r3, #1
 8008cb0:	1076      	asrs	r6, r6, #1
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	e773      	b.n	8008b9e <_dtoa_r+0x3d6>
 8008cb6:	2502      	movs	r5, #2
 8008cb8:	e775      	b.n	8008ba6 <_dtoa_r+0x3de>
 8008cba:	9e04      	ldr	r6, [sp, #16]
 8008cbc:	465f      	mov	r7, fp
 8008cbe:	e792      	b.n	8008be6 <_dtoa_r+0x41e>
 8008cc0:	9900      	ldr	r1, [sp, #0]
 8008cc2:	4b50      	ldr	r3, [pc, #320]	; (8008e04 <_dtoa_r+0x63c>)
 8008cc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cc8:	4431      	add	r1, r6
 8008cca:	9102      	str	r1, [sp, #8]
 8008ccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cce:	eeb0 9a47 	vmov.f32	s18, s14
 8008cd2:	eef0 9a67 	vmov.f32	s19, s15
 8008cd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008cda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008cde:	2900      	cmp	r1, #0
 8008ce0:	d044      	beq.n	8008d6c <_dtoa_r+0x5a4>
 8008ce2:	494e      	ldr	r1, [pc, #312]	; (8008e1c <_dtoa_r+0x654>)
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	f7f7 fdb1 	bl	800084c <__aeabi_ddiv>
 8008cea:	ec53 2b19 	vmov	r2, r3, d9
 8008cee:	f7f7 facb 	bl	8000288 <__aeabi_dsub>
 8008cf2:	9d00      	ldr	r5, [sp, #0]
 8008cf4:	ec41 0b19 	vmov	d9, r0, r1
 8008cf8:	4649      	mov	r1, r9
 8008cfa:	4640      	mov	r0, r8
 8008cfc:	f7f7 ff2c 	bl	8000b58 <__aeabi_d2iz>
 8008d00:	4606      	mov	r6, r0
 8008d02:	f7f7 fc0f 	bl	8000524 <__aeabi_i2d>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4640      	mov	r0, r8
 8008d0c:	4649      	mov	r1, r9
 8008d0e:	f7f7 fabb 	bl	8000288 <__aeabi_dsub>
 8008d12:	3630      	adds	r6, #48	; 0x30
 8008d14:	f805 6b01 	strb.w	r6, [r5], #1
 8008d18:	ec53 2b19 	vmov	r2, r3, d9
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	4689      	mov	r9, r1
 8008d20:	f7f7 fedc 	bl	8000adc <__aeabi_dcmplt>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d164      	bne.n	8008df2 <_dtoa_r+0x62a>
 8008d28:	4642      	mov	r2, r8
 8008d2a:	464b      	mov	r3, r9
 8008d2c:	4937      	ldr	r1, [pc, #220]	; (8008e0c <_dtoa_r+0x644>)
 8008d2e:	2000      	movs	r0, #0
 8008d30:	f7f7 faaa 	bl	8000288 <__aeabi_dsub>
 8008d34:	ec53 2b19 	vmov	r2, r3, d9
 8008d38:	f7f7 fed0 	bl	8000adc <__aeabi_dcmplt>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	f040 80b6 	bne.w	8008eae <_dtoa_r+0x6e6>
 8008d42:	9b02      	ldr	r3, [sp, #8]
 8008d44:	429d      	cmp	r5, r3
 8008d46:	f43f af7c 	beq.w	8008c42 <_dtoa_r+0x47a>
 8008d4a:	4b31      	ldr	r3, [pc, #196]	; (8008e10 <_dtoa_r+0x648>)
 8008d4c:	ec51 0b19 	vmov	r0, r1, d9
 8008d50:	2200      	movs	r2, #0
 8008d52:	f7f7 fc51 	bl	80005f8 <__aeabi_dmul>
 8008d56:	4b2e      	ldr	r3, [pc, #184]	; (8008e10 <_dtoa_r+0x648>)
 8008d58:	ec41 0b19 	vmov	d9, r0, r1
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4640      	mov	r0, r8
 8008d60:	4649      	mov	r1, r9
 8008d62:	f7f7 fc49 	bl	80005f8 <__aeabi_dmul>
 8008d66:	4680      	mov	r8, r0
 8008d68:	4689      	mov	r9, r1
 8008d6a:	e7c5      	b.n	8008cf8 <_dtoa_r+0x530>
 8008d6c:	ec51 0b17 	vmov	r0, r1, d7
 8008d70:	f7f7 fc42 	bl	80005f8 <__aeabi_dmul>
 8008d74:	9b02      	ldr	r3, [sp, #8]
 8008d76:	9d00      	ldr	r5, [sp, #0]
 8008d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d7a:	ec41 0b19 	vmov	d9, r0, r1
 8008d7e:	4649      	mov	r1, r9
 8008d80:	4640      	mov	r0, r8
 8008d82:	f7f7 fee9 	bl	8000b58 <__aeabi_d2iz>
 8008d86:	4606      	mov	r6, r0
 8008d88:	f7f7 fbcc 	bl	8000524 <__aeabi_i2d>
 8008d8c:	3630      	adds	r6, #48	; 0x30
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4640      	mov	r0, r8
 8008d94:	4649      	mov	r1, r9
 8008d96:	f7f7 fa77 	bl	8000288 <__aeabi_dsub>
 8008d9a:	f805 6b01 	strb.w	r6, [r5], #1
 8008d9e:	9b02      	ldr	r3, [sp, #8]
 8008da0:	429d      	cmp	r5, r3
 8008da2:	4680      	mov	r8, r0
 8008da4:	4689      	mov	r9, r1
 8008da6:	f04f 0200 	mov.w	r2, #0
 8008daa:	d124      	bne.n	8008df6 <_dtoa_r+0x62e>
 8008dac:	4b1b      	ldr	r3, [pc, #108]	; (8008e1c <_dtoa_r+0x654>)
 8008dae:	ec51 0b19 	vmov	r0, r1, d9
 8008db2:	f7f7 fa6b 	bl	800028c <__adddf3>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4640      	mov	r0, r8
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	f7f7 feab 	bl	8000b18 <__aeabi_dcmpgt>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d173      	bne.n	8008eae <_dtoa_r+0x6e6>
 8008dc6:	ec53 2b19 	vmov	r2, r3, d9
 8008dca:	4914      	ldr	r1, [pc, #80]	; (8008e1c <_dtoa_r+0x654>)
 8008dcc:	2000      	movs	r0, #0
 8008dce:	f7f7 fa5b 	bl	8000288 <__aeabi_dsub>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	4649      	mov	r1, r9
 8008dda:	f7f7 fe7f 	bl	8000adc <__aeabi_dcmplt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	f43f af2f 	beq.w	8008c42 <_dtoa_r+0x47a>
 8008de4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008de6:	1e6b      	subs	r3, r5, #1
 8008de8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008dee:	2b30      	cmp	r3, #48	; 0x30
 8008df0:	d0f8      	beq.n	8008de4 <_dtoa_r+0x61c>
 8008df2:	46bb      	mov	fp, r7
 8008df4:	e04a      	b.n	8008e8c <_dtoa_r+0x6c4>
 8008df6:	4b06      	ldr	r3, [pc, #24]	; (8008e10 <_dtoa_r+0x648>)
 8008df8:	f7f7 fbfe 	bl	80005f8 <__aeabi_dmul>
 8008dfc:	4680      	mov	r8, r0
 8008dfe:	4689      	mov	r9, r1
 8008e00:	e7bd      	b.n	8008d7e <_dtoa_r+0x5b6>
 8008e02:	bf00      	nop
 8008e04:	0800ef30 	.word	0x0800ef30
 8008e08:	0800ef08 	.word	0x0800ef08
 8008e0c:	3ff00000 	.word	0x3ff00000
 8008e10:	40240000 	.word	0x40240000
 8008e14:	401c0000 	.word	0x401c0000
 8008e18:	40140000 	.word	0x40140000
 8008e1c:	3fe00000 	.word	0x3fe00000
 8008e20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e24:	9d00      	ldr	r5, [sp, #0]
 8008e26:	4642      	mov	r2, r8
 8008e28:	464b      	mov	r3, r9
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	f7f7 fd0d 	bl	800084c <__aeabi_ddiv>
 8008e32:	f7f7 fe91 	bl	8000b58 <__aeabi_d2iz>
 8008e36:	9001      	str	r0, [sp, #4]
 8008e38:	f7f7 fb74 	bl	8000524 <__aeabi_i2d>
 8008e3c:	4642      	mov	r2, r8
 8008e3e:	464b      	mov	r3, r9
 8008e40:	f7f7 fbda 	bl	80005f8 <__aeabi_dmul>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	f7f7 fa1c 	bl	8000288 <__aeabi_dsub>
 8008e50:	9e01      	ldr	r6, [sp, #4]
 8008e52:	9f04      	ldr	r7, [sp, #16]
 8008e54:	3630      	adds	r6, #48	; 0x30
 8008e56:	f805 6b01 	strb.w	r6, [r5], #1
 8008e5a:	9e00      	ldr	r6, [sp, #0]
 8008e5c:	1bae      	subs	r6, r5, r6
 8008e5e:	42b7      	cmp	r7, r6
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	d134      	bne.n	8008ed0 <_dtoa_r+0x708>
 8008e66:	f7f7 fa11 	bl	800028c <__adddf3>
 8008e6a:	4642      	mov	r2, r8
 8008e6c:	464b      	mov	r3, r9
 8008e6e:	4606      	mov	r6, r0
 8008e70:	460f      	mov	r7, r1
 8008e72:	f7f7 fe51 	bl	8000b18 <__aeabi_dcmpgt>
 8008e76:	b9c8      	cbnz	r0, 8008eac <_dtoa_r+0x6e4>
 8008e78:	4642      	mov	r2, r8
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	4639      	mov	r1, r7
 8008e80:	f7f7 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e84:	b110      	cbz	r0, 8008e8c <_dtoa_r+0x6c4>
 8008e86:	9b01      	ldr	r3, [sp, #4]
 8008e88:	07db      	lsls	r3, r3, #31
 8008e8a:	d40f      	bmi.n	8008eac <_dtoa_r+0x6e4>
 8008e8c:	4651      	mov	r1, sl
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 fbcc 	bl	800962c <_Bfree>
 8008e94:	2300      	movs	r3, #0
 8008e96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e98:	702b      	strb	r3, [r5, #0]
 8008e9a:	f10b 0301 	add.w	r3, fp, #1
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f43f ace2 	beq.w	800886c <_dtoa_r+0xa4>
 8008ea8:	601d      	str	r5, [r3, #0]
 8008eaa:	e4df      	b.n	800886c <_dtoa_r+0xa4>
 8008eac:	465f      	mov	r7, fp
 8008eae:	462b      	mov	r3, r5
 8008eb0:	461d      	mov	r5, r3
 8008eb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008eb6:	2a39      	cmp	r2, #57	; 0x39
 8008eb8:	d106      	bne.n	8008ec8 <_dtoa_r+0x700>
 8008eba:	9a00      	ldr	r2, [sp, #0]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d1f7      	bne.n	8008eb0 <_dtoa_r+0x6e8>
 8008ec0:	9900      	ldr	r1, [sp, #0]
 8008ec2:	2230      	movs	r2, #48	; 0x30
 8008ec4:	3701      	adds	r7, #1
 8008ec6:	700a      	strb	r2, [r1, #0]
 8008ec8:	781a      	ldrb	r2, [r3, #0]
 8008eca:	3201      	adds	r2, #1
 8008ecc:	701a      	strb	r2, [r3, #0]
 8008ece:	e790      	b.n	8008df2 <_dtoa_r+0x62a>
 8008ed0:	4ba3      	ldr	r3, [pc, #652]	; (8009160 <_dtoa_r+0x998>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f7f7 fb90 	bl	80005f8 <__aeabi_dmul>
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2300      	movs	r3, #0
 8008edc:	4606      	mov	r6, r0
 8008ede:	460f      	mov	r7, r1
 8008ee0:	f7f7 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d09e      	beq.n	8008e26 <_dtoa_r+0x65e>
 8008ee8:	e7d0      	b.n	8008e8c <_dtoa_r+0x6c4>
 8008eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eec:	2a00      	cmp	r2, #0
 8008eee:	f000 80ca 	beq.w	8009086 <_dtoa_r+0x8be>
 8008ef2:	9a07      	ldr	r2, [sp, #28]
 8008ef4:	2a01      	cmp	r2, #1
 8008ef6:	f300 80ad 	bgt.w	8009054 <_dtoa_r+0x88c>
 8008efa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008efc:	2a00      	cmp	r2, #0
 8008efe:	f000 80a5 	beq.w	800904c <_dtoa_r+0x884>
 8008f02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f06:	9e08      	ldr	r6, [sp, #32]
 8008f08:	9d05      	ldr	r5, [sp, #20]
 8008f0a:	9a05      	ldr	r2, [sp, #20]
 8008f0c:	441a      	add	r2, r3
 8008f0e:	9205      	str	r2, [sp, #20]
 8008f10:	9a06      	ldr	r2, [sp, #24]
 8008f12:	2101      	movs	r1, #1
 8008f14:	441a      	add	r2, r3
 8008f16:	4620      	mov	r0, r4
 8008f18:	9206      	str	r2, [sp, #24]
 8008f1a:	f000 fc87 	bl	800982c <__i2b>
 8008f1e:	4607      	mov	r7, r0
 8008f20:	b165      	cbz	r5, 8008f3c <_dtoa_r+0x774>
 8008f22:	9b06      	ldr	r3, [sp, #24]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	dd09      	ble.n	8008f3c <_dtoa_r+0x774>
 8008f28:	42ab      	cmp	r3, r5
 8008f2a:	9a05      	ldr	r2, [sp, #20]
 8008f2c:	bfa8      	it	ge
 8008f2e:	462b      	movge	r3, r5
 8008f30:	1ad2      	subs	r2, r2, r3
 8008f32:	9205      	str	r2, [sp, #20]
 8008f34:	9a06      	ldr	r2, [sp, #24]
 8008f36:	1aed      	subs	r5, r5, r3
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	9306      	str	r3, [sp, #24]
 8008f3c:	9b08      	ldr	r3, [sp, #32]
 8008f3e:	b1f3      	cbz	r3, 8008f7e <_dtoa_r+0x7b6>
 8008f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 80a3 	beq.w	800908e <_dtoa_r+0x8c6>
 8008f48:	2e00      	cmp	r6, #0
 8008f4a:	dd10      	ble.n	8008f6e <_dtoa_r+0x7a6>
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	4632      	mov	r2, r6
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fd2b 	bl	80099ac <__pow5mult>
 8008f56:	4652      	mov	r2, sl
 8008f58:	4601      	mov	r1, r0
 8008f5a:	4607      	mov	r7, r0
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f000 fc7b 	bl	8009858 <__multiply>
 8008f62:	4651      	mov	r1, sl
 8008f64:	4680      	mov	r8, r0
 8008f66:	4620      	mov	r0, r4
 8008f68:	f000 fb60 	bl	800962c <_Bfree>
 8008f6c:	46c2      	mov	sl, r8
 8008f6e:	9b08      	ldr	r3, [sp, #32]
 8008f70:	1b9a      	subs	r2, r3, r6
 8008f72:	d004      	beq.n	8008f7e <_dtoa_r+0x7b6>
 8008f74:	4651      	mov	r1, sl
 8008f76:	4620      	mov	r0, r4
 8008f78:	f000 fd18 	bl	80099ac <__pow5mult>
 8008f7c:	4682      	mov	sl, r0
 8008f7e:	2101      	movs	r1, #1
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 fc53 	bl	800982c <__i2b>
 8008f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	f340 8081 	ble.w	8009092 <_dtoa_r+0x8ca>
 8008f90:	461a      	mov	r2, r3
 8008f92:	4601      	mov	r1, r0
 8008f94:	4620      	mov	r0, r4
 8008f96:	f000 fd09 	bl	80099ac <__pow5mult>
 8008f9a:	9b07      	ldr	r3, [sp, #28]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	dd7a      	ble.n	8009098 <_dtoa_r+0x8d0>
 8008fa2:	f04f 0800 	mov.w	r8, #0
 8008fa6:	6933      	ldr	r3, [r6, #16]
 8008fa8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008fac:	6918      	ldr	r0, [r3, #16]
 8008fae:	f000 fbef 	bl	8009790 <__hi0bits>
 8008fb2:	f1c0 0020 	rsb	r0, r0, #32
 8008fb6:	9b06      	ldr	r3, [sp, #24]
 8008fb8:	4418      	add	r0, r3
 8008fba:	f010 001f 	ands.w	r0, r0, #31
 8008fbe:	f000 8094 	beq.w	80090ea <_dtoa_r+0x922>
 8008fc2:	f1c0 0320 	rsb	r3, r0, #32
 8008fc6:	2b04      	cmp	r3, #4
 8008fc8:	f340 8085 	ble.w	80090d6 <_dtoa_r+0x90e>
 8008fcc:	9b05      	ldr	r3, [sp, #20]
 8008fce:	f1c0 001c 	rsb	r0, r0, #28
 8008fd2:	4403      	add	r3, r0
 8008fd4:	9305      	str	r3, [sp, #20]
 8008fd6:	9b06      	ldr	r3, [sp, #24]
 8008fd8:	4403      	add	r3, r0
 8008fda:	4405      	add	r5, r0
 8008fdc:	9306      	str	r3, [sp, #24]
 8008fde:	9b05      	ldr	r3, [sp, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	dd05      	ble.n	8008ff0 <_dtoa_r+0x828>
 8008fe4:	4651      	mov	r1, sl
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f000 fd39 	bl	8009a60 <__lshift>
 8008fee:	4682      	mov	sl, r0
 8008ff0:	9b06      	ldr	r3, [sp, #24]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	dd05      	ble.n	8009002 <_dtoa_r+0x83a>
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f000 fd30 	bl	8009a60 <__lshift>
 8009000:	4606      	mov	r6, r0
 8009002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009004:	2b00      	cmp	r3, #0
 8009006:	d072      	beq.n	80090ee <_dtoa_r+0x926>
 8009008:	4631      	mov	r1, r6
 800900a:	4650      	mov	r0, sl
 800900c:	f000 fd94 	bl	8009b38 <__mcmp>
 8009010:	2800      	cmp	r0, #0
 8009012:	da6c      	bge.n	80090ee <_dtoa_r+0x926>
 8009014:	2300      	movs	r3, #0
 8009016:	4651      	mov	r1, sl
 8009018:	220a      	movs	r2, #10
 800901a:	4620      	mov	r0, r4
 800901c:	f000 fb28 	bl	8009670 <__multadd>
 8009020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009022:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009026:	4682      	mov	sl, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 81b0 	beq.w	800938e <_dtoa_r+0xbc6>
 800902e:	2300      	movs	r3, #0
 8009030:	4639      	mov	r1, r7
 8009032:	220a      	movs	r2, #10
 8009034:	4620      	mov	r0, r4
 8009036:	f000 fb1b 	bl	8009670 <__multadd>
 800903a:	9b01      	ldr	r3, [sp, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	4607      	mov	r7, r0
 8009040:	f300 8096 	bgt.w	8009170 <_dtoa_r+0x9a8>
 8009044:	9b07      	ldr	r3, [sp, #28]
 8009046:	2b02      	cmp	r3, #2
 8009048:	dc59      	bgt.n	80090fe <_dtoa_r+0x936>
 800904a:	e091      	b.n	8009170 <_dtoa_r+0x9a8>
 800904c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800904e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009052:	e758      	b.n	8008f06 <_dtoa_r+0x73e>
 8009054:	9b04      	ldr	r3, [sp, #16]
 8009056:	1e5e      	subs	r6, r3, #1
 8009058:	9b08      	ldr	r3, [sp, #32]
 800905a:	42b3      	cmp	r3, r6
 800905c:	bfbf      	itttt	lt
 800905e:	9b08      	ldrlt	r3, [sp, #32]
 8009060:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009062:	9608      	strlt	r6, [sp, #32]
 8009064:	1af3      	sublt	r3, r6, r3
 8009066:	bfb4      	ite	lt
 8009068:	18d2      	addlt	r2, r2, r3
 800906a:	1b9e      	subge	r6, r3, r6
 800906c:	9b04      	ldr	r3, [sp, #16]
 800906e:	bfbc      	itt	lt
 8009070:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009072:	2600      	movlt	r6, #0
 8009074:	2b00      	cmp	r3, #0
 8009076:	bfb7      	itett	lt
 8009078:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800907c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009080:	1a9d      	sublt	r5, r3, r2
 8009082:	2300      	movlt	r3, #0
 8009084:	e741      	b.n	8008f0a <_dtoa_r+0x742>
 8009086:	9e08      	ldr	r6, [sp, #32]
 8009088:	9d05      	ldr	r5, [sp, #20]
 800908a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800908c:	e748      	b.n	8008f20 <_dtoa_r+0x758>
 800908e:	9a08      	ldr	r2, [sp, #32]
 8009090:	e770      	b.n	8008f74 <_dtoa_r+0x7ac>
 8009092:	9b07      	ldr	r3, [sp, #28]
 8009094:	2b01      	cmp	r3, #1
 8009096:	dc19      	bgt.n	80090cc <_dtoa_r+0x904>
 8009098:	9b02      	ldr	r3, [sp, #8]
 800909a:	b9bb      	cbnz	r3, 80090cc <_dtoa_r+0x904>
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090a2:	b99b      	cbnz	r3, 80090cc <_dtoa_r+0x904>
 80090a4:	9b03      	ldr	r3, [sp, #12]
 80090a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090aa:	0d1b      	lsrs	r3, r3, #20
 80090ac:	051b      	lsls	r3, r3, #20
 80090ae:	b183      	cbz	r3, 80090d2 <_dtoa_r+0x90a>
 80090b0:	9b05      	ldr	r3, [sp, #20]
 80090b2:	3301      	adds	r3, #1
 80090b4:	9305      	str	r3, [sp, #20]
 80090b6:	9b06      	ldr	r3, [sp, #24]
 80090b8:	3301      	adds	r3, #1
 80090ba:	9306      	str	r3, [sp, #24]
 80090bc:	f04f 0801 	mov.w	r8, #1
 80090c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f47f af6f 	bne.w	8008fa6 <_dtoa_r+0x7de>
 80090c8:	2001      	movs	r0, #1
 80090ca:	e774      	b.n	8008fb6 <_dtoa_r+0x7ee>
 80090cc:	f04f 0800 	mov.w	r8, #0
 80090d0:	e7f6      	b.n	80090c0 <_dtoa_r+0x8f8>
 80090d2:	4698      	mov	r8, r3
 80090d4:	e7f4      	b.n	80090c0 <_dtoa_r+0x8f8>
 80090d6:	d082      	beq.n	8008fde <_dtoa_r+0x816>
 80090d8:	9a05      	ldr	r2, [sp, #20]
 80090da:	331c      	adds	r3, #28
 80090dc:	441a      	add	r2, r3
 80090de:	9205      	str	r2, [sp, #20]
 80090e0:	9a06      	ldr	r2, [sp, #24]
 80090e2:	441a      	add	r2, r3
 80090e4:	441d      	add	r5, r3
 80090e6:	9206      	str	r2, [sp, #24]
 80090e8:	e779      	b.n	8008fde <_dtoa_r+0x816>
 80090ea:	4603      	mov	r3, r0
 80090ec:	e7f4      	b.n	80090d8 <_dtoa_r+0x910>
 80090ee:	9b04      	ldr	r3, [sp, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	dc37      	bgt.n	8009164 <_dtoa_r+0x99c>
 80090f4:	9b07      	ldr	r3, [sp, #28]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	dd34      	ble.n	8009164 <_dtoa_r+0x99c>
 80090fa:	9b04      	ldr	r3, [sp, #16]
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	9b01      	ldr	r3, [sp, #4]
 8009100:	b963      	cbnz	r3, 800911c <_dtoa_r+0x954>
 8009102:	4631      	mov	r1, r6
 8009104:	2205      	movs	r2, #5
 8009106:	4620      	mov	r0, r4
 8009108:	f000 fab2 	bl	8009670 <__multadd>
 800910c:	4601      	mov	r1, r0
 800910e:	4606      	mov	r6, r0
 8009110:	4650      	mov	r0, sl
 8009112:	f000 fd11 	bl	8009b38 <__mcmp>
 8009116:	2800      	cmp	r0, #0
 8009118:	f73f adbb 	bgt.w	8008c92 <_dtoa_r+0x4ca>
 800911c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800911e:	9d00      	ldr	r5, [sp, #0]
 8009120:	ea6f 0b03 	mvn.w	fp, r3
 8009124:	f04f 0800 	mov.w	r8, #0
 8009128:	4631      	mov	r1, r6
 800912a:	4620      	mov	r0, r4
 800912c:	f000 fa7e 	bl	800962c <_Bfree>
 8009130:	2f00      	cmp	r7, #0
 8009132:	f43f aeab 	beq.w	8008e8c <_dtoa_r+0x6c4>
 8009136:	f1b8 0f00 	cmp.w	r8, #0
 800913a:	d005      	beq.n	8009148 <_dtoa_r+0x980>
 800913c:	45b8      	cmp	r8, r7
 800913e:	d003      	beq.n	8009148 <_dtoa_r+0x980>
 8009140:	4641      	mov	r1, r8
 8009142:	4620      	mov	r0, r4
 8009144:	f000 fa72 	bl	800962c <_Bfree>
 8009148:	4639      	mov	r1, r7
 800914a:	4620      	mov	r0, r4
 800914c:	f000 fa6e 	bl	800962c <_Bfree>
 8009150:	e69c      	b.n	8008e8c <_dtoa_r+0x6c4>
 8009152:	2600      	movs	r6, #0
 8009154:	4637      	mov	r7, r6
 8009156:	e7e1      	b.n	800911c <_dtoa_r+0x954>
 8009158:	46bb      	mov	fp, r7
 800915a:	4637      	mov	r7, r6
 800915c:	e599      	b.n	8008c92 <_dtoa_r+0x4ca>
 800915e:	bf00      	nop
 8009160:	40240000 	.word	0x40240000
 8009164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 80c8 	beq.w	80092fc <_dtoa_r+0xb34>
 800916c:	9b04      	ldr	r3, [sp, #16]
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	2d00      	cmp	r5, #0
 8009172:	dd05      	ble.n	8009180 <_dtoa_r+0x9b8>
 8009174:	4639      	mov	r1, r7
 8009176:	462a      	mov	r2, r5
 8009178:	4620      	mov	r0, r4
 800917a:	f000 fc71 	bl	8009a60 <__lshift>
 800917e:	4607      	mov	r7, r0
 8009180:	f1b8 0f00 	cmp.w	r8, #0
 8009184:	d05b      	beq.n	800923e <_dtoa_r+0xa76>
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	4620      	mov	r0, r4
 800918a:	f000 fa0f 	bl	80095ac <_Balloc>
 800918e:	4605      	mov	r5, r0
 8009190:	b928      	cbnz	r0, 800919e <_dtoa_r+0x9d6>
 8009192:	4b83      	ldr	r3, [pc, #524]	; (80093a0 <_dtoa_r+0xbd8>)
 8009194:	4602      	mov	r2, r0
 8009196:	f240 21ef 	movw	r1, #751	; 0x2ef
 800919a:	f7ff bb2e 	b.w	80087fa <_dtoa_r+0x32>
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	3202      	adds	r2, #2
 80091a2:	0092      	lsls	r2, r2, #2
 80091a4:	f107 010c 	add.w	r1, r7, #12
 80091a8:	300c      	adds	r0, #12
 80091aa:	f001 ff85 	bl	800b0b8 <memcpy>
 80091ae:	2201      	movs	r2, #1
 80091b0:	4629      	mov	r1, r5
 80091b2:	4620      	mov	r0, r4
 80091b4:	f000 fc54 	bl	8009a60 <__lshift>
 80091b8:	9b00      	ldr	r3, [sp, #0]
 80091ba:	3301      	adds	r3, #1
 80091bc:	9304      	str	r3, [sp, #16]
 80091be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091c2:	4413      	add	r3, r2
 80091c4:	9308      	str	r3, [sp, #32]
 80091c6:	9b02      	ldr	r3, [sp, #8]
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	46b8      	mov	r8, r7
 80091ce:	9306      	str	r3, [sp, #24]
 80091d0:	4607      	mov	r7, r0
 80091d2:	9b04      	ldr	r3, [sp, #16]
 80091d4:	4631      	mov	r1, r6
 80091d6:	3b01      	subs	r3, #1
 80091d8:	4650      	mov	r0, sl
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	f7ff fa6c 	bl	80086b8 <quorem>
 80091e0:	4641      	mov	r1, r8
 80091e2:	9002      	str	r0, [sp, #8]
 80091e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80091e8:	4650      	mov	r0, sl
 80091ea:	f000 fca5 	bl	8009b38 <__mcmp>
 80091ee:	463a      	mov	r2, r7
 80091f0:	9005      	str	r0, [sp, #20]
 80091f2:	4631      	mov	r1, r6
 80091f4:	4620      	mov	r0, r4
 80091f6:	f000 fcbb 	bl	8009b70 <__mdiff>
 80091fa:	68c2      	ldr	r2, [r0, #12]
 80091fc:	4605      	mov	r5, r0
 80091fe:	bb02      	cbnz	r2, 8009242 <_dtoa_r+0xa7a>
 8009200:	4601      	mov	r1, r0
 8009202:	4650      	mov	r0, sl
 8009204:	f000 fc98 	bl	8009b38 <__mcmp>
 8009208:	4602      	mov	r2, r0
 800920a:	4629      	mov	r1, r5
 800920c:	4620      	mov	r0, r4
 800920e:	9209      	str	r2, [sp, #36]	; 0x24
 8009210:	f000 fa0c 	bl	800962c <_Bfree>
 8009214:	9b07      	ldr	r3, [sp, #28]
 8009216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009218:	9d04      	ldr	r5, [sp, #16]
 800921a:	ea43 0102 	orr.w	r1, r3, r2
 800921e:	9b06      	ldr	r3, [sp, #24]
 8009220:	4319      	orrs	r1, r3
 8009222:	d110      	bne.n	8009246 <_dtoa_r+0xa7e>
 8009224:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009228:	d029      	beq.n	800927e <_dtoa_r+0xab6>
 800922a:	9b05      	ldr	r3, [sp, #20]
 800922c:	2b00      	cmp	r3, #0
 800922e:	dd02      	ble.n	8009236 <_dtoa_r+0xa6e>
 8009230:	9b02      	ldr	r3, [sp, #8]
 8009232:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	f883 9000 	strb.w	r9, [r3]
 800923c:	e774      	b.n	8009128 <_dtoa_r+0x960>
 800923e:	4638      	mov	r0, r7
 8009240:	e7ba      	b.n	80091b8 <_dtoa_r+0x9f0>
 8009242:	2201      	movs	r2, #1
 8009244:	e7e1      	b.n	800920a <_dtoa_r+0xa42>
 8009246:	9b05      	ldr	r3, [sp, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	db04      	blt.n	8009256 <_dtoa_r+0xa8e>
 800924c:	9907      	ldr	r1, [sp, #28]
 800924e:	430b      	orrs	r3, r1
 8009250:	9906      	ldr	r1, [sp, #24]
 8009252:	430b      	orrs	r3, r1
 8009254:	d120      	bne.n	8009298 <_dtoa_r+0xad0>
 8009256:	2a00      	cmp	r2, #0
 8009258:	dded      	ble.n	8009236 <_dtoa_r+0xa6e>
 800925a:	4651      	mov	r1, sl
 800925c:	2201      	movs	r2, #1
 800925e:	4620      	mov	r0, r4
 8009260:	f000 fbfe 	bl	8009a60 <__lshift>
 8009264:	4631      	mov	r1, r6
 8009266:	4682      	mov	sl, r0
 8009268:	f000 fc66 	bl	8009b38 <__mcmp>
 800926c:	2800      	cmp	r0, #0
 800926e:	dc03      	bgt.n	8009278 <_dtoa_r+0xab0>
 8009270:	d1e1      	bne.n	8009236 <_dtoa_r+0xa6e>
 8009272:	f019 0f01 	tst.w	r9, #1
 8009276:	d0de      	beq.n	8009236 <_dtoa_r+0xa6e>
 8009278:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800927c:	d1d8      	bne.n	8009230 <_dtoa_r+0xa68>
 800927e:	9a01      	ldr	r2, [sp, #4]
 8009280:	2339      	movs	r3, #57	; 0x39
 8009282:	7013      	strb	r3, [r2, #0]
 8009284:	462b      	mov	r3, r5
 8009286:	461d      	mov	r5, r3
 8009288:	3b01      	subs	r3, #1
 800928a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800928e:	2a39      	cmp	r2, #57	; 0x39
 8009290:	d06c      	beq.n	800936c <_dtoa_r+0xba4>
 8009292:	3201      	adds	r2, #1
 8009294:	701a      	strb	r2, [r3, #0]
 8009296:	e747      	b.n	8009128 <_dtoa_r+0x960>
 8009298:	2a00      	cmp	r2, #0
 800929a:	dd07      	ble.n	80092ac <_dtoa_r+0xae4>
 800929c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092a0:	d0ed      	beq.n	800927e <_dtoa_r+0xab6>
 80092a2:	9a01      	ldr	r2, [sp, #4]
 80092a4:	f109 0301 	add.w	r3, r9, #1
 80092a8:	7013      	strb	r3, [r2, #0]
 80092aa:	e73d      	b.n	8009128 <_dtoa_r+0x960>
 80092ac:	9b04      	ldr	r3, [sp, #16]
 80092ae:	9a08      	ldr	r2, [sp, #32]
 80092b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d043      	beq.n	8009340 <_dtoa_r+0xb78>
 80092b8:	4651      	mov	r1, sl
 80092ba:	2300      	movs	r3, #0
 80092bc:	220a      	movs	r2, #10
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 f9d6 	bl	8009670 <__multadd>
 80092c4:	45b8      	cmp	r8, r7
 80092c6:	4682      	mov	sl, r0
 80092c8:	f04f 0300 	mov.w	r3, #0
 80092cc:	f04f 020a 	mov.w	r2, #10
 80092d0:	4641      	mov	r1, r8
 80092d2:	4620      	mov	r0, r4
 80092d4:	d107      	bne.n	80092e6 <_dtoa_r+0xb1e>
 80092d6:	f000 f9cb 	bl	8009670 <__multadd>
 80092da:	4680      	mov	r8, r0
 80092dc:	4607      	mov	r7, r0
 80092de:	9b04      	ldr	r3, [sp, #16]
 80092e0:	3301      	adds	r3, #1
 80092e2:	9304      	str	r3, [sp, #16]
 80092e4:	e775      	b.n	80091d2 <_dtoa_r+0xa0a>
 80092e6:	f000 f9c3 	bl	8009670 <__multadd>
 80092ea:	4639      	mov	r1, r7
 80092ec:	4680      	mov	r8, r0
 80092ee:	2300      	movs	r3, #0
 80092f0:	220a      	movs	r2, #10
 80092f2:	4620      	mov	r0, r4
 80092f4:	f000 f9bc 	bl	8009670 <__multadd>
 80092f8:	4607      	mov	r7, r0
 80092fa:	e7f0      	b.n	80092de <_dtoa_r+0xb16>
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	9d00      	ldr	r5, [sp, #0]
 8009302:	4631      	mov	r1, r6
 8009304:	4650      	mov	r0, sl
 8009306:	f7ff f9d7 	bl	80086b8 <quorem>
 800930a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800930e:	9b00      	ldr	r3, [sp, #0]
 8009310:	f805 9b01 	strb.w	r9, [r5], #1
 8009314:	1aea      	subs	r2, r5, r3
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	4293      	cmp	r3, r2
 800931a:	dd07      	ble.n	800932c <_dtoa_r+0xb64>
 800931c:	4651      	mov	r1, sl
 800931e:	2300      	movs	r3, #0
 8009320:	220a      	movs	r2, #10
 8009322:	4620      	mov	r0, r4
 8009324:	f000 f9a4 	bl	8009670 <__multadd>
 8009328:	4682      	mov	sl, r0
 800932a:	e7ea      	b.n	8009302 <_dtoa_r+0xb3a>
 800932c:	9b01      	ldr	r3, [sp, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	bfc8      	it	gt
 8009332:	461d      	movgt	r5, r3
 8009334:	9b00      	ldr	r3, [sp, #0]
 8009336:	bfd8      	it	le
 8009338:	2501      	movle	r5, #1
 800933a:	441d      	add	r5, r3
 800933c:	f04f 0800 	mov.w	r8, #0
 8009340:	4651      	mov	r1, sl
 8009342:	2201      	movs	r2, #1
 8009344:	4620      	mov	r0, r4
 8009346:	f000 fb8b 	bl	8009a60 <__lshift>
 800934a:	4631      	mov	r1, r6
 800934c:	4682      	mov	sl, r0
 800934e:	f000 fbf3 	bl	8009b38 <__mcmp>
 8009352:	2800      	cmp	r0, #0
 8009354:	dc96      	bgt.n	8009284 <_dtoa_r+0xabc>
 8009356:	d102      	bne.n	800935e <_dtoa_r+0xb96>
 8009358:	f019 0f01 	tst.w	r9, #1
 800935c:	d192      	bne.n	8009284 <_dtoa_r+0xabc>
 800935e:	462b      	mov	r3, r5
 8009360:	461d      	mov	r5, r3
 8009362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009366:	2a30      	cmp	r2, #48	; 0x30
 8009368:	d0fa      	beq.n	8009360 <_dtoa_r+0xb98>
 800936a:	e6dd      	b.n	8009128 <_dtoa_r+0x960>
 800936c:	9a00      	ldr	r2, [sp, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	d189      	bne.n	8009286 <_dtoa_r+0xabe>
 8009372:	f10b 0b01 	add.w	fp, fp, #1
 8009376:	2331      	movs	r3, #49	; 0x31
 8009378:	e796      	b.n	80092a8 <_dtoa_r+0xae0>
 800937a:	4b0a      	ldr	r3, [pc, #40]	; (80093a4 <_dtoa_r+0xbdc>)
 800937c:	f7ff ba99 	b.w	80088b2 <_dtoa_r+0xea>
 8009380:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009382:	2b00      	cmp	r3, #0
 8009384:	f47f aa6d 	bne.w	8008862 <_dtoa_r+0x9a>
 8009388:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <_dtoa_r+0xbe0>)
 800938a:	f7ff ba92 	b.w	80088b2 <_dtoa_r+0xea>
 800938e:	9b01      	ldr	r3, [sp, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	dcb5      	bgt.n	8009300 <_dtoa_r+0xb38>
 8009394:	9b07      	ldr	r3, [sp, #28]
 8009396:	2b02      	cmp	r3, #2
 8009398:	f73f aeb1 	bgt.w	80090fe <_dtoa_r+0x936>
 800939c:	e7b0      	b.n	8009300 <_dtoa_r+0xb38>
 800939e:	bf00      	nop
 80093a0:	0800ee99 	.word	0x0800ee99
 80093a4:	0800edf4 	.word	0x0800edf4
 80093a8:	0800ee1d 	.word	0x0800ee1d

080093ac <_free_r>:
 80093ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093ae:	2900      	cmp	r1, #0
 80093b0:	d044      	beq.n	800943c <_free_r+0x90>
 80093b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093b6:	9001      	str	r0, [sp, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f1a1 0404 	sub.w	r4, r1, #4
 80093be:	bfb8      	it	lt
 80093c0:	18e4      	addlt	r4, r4, r3
 80093c2:	f000 f8e7 	bl	8009594 <__malloc_lock>
 80093c6:	4a1e      	ldr	r2, [pc, #120]	; (8009440 <_free_r+0x94>)
 80093c8:	9801      	ldr	r0, [sp, #4]
 80093ca:	6813      	ldr	r3, [r2, #0]
 80093cc:	b933      	cbnz	r3, 80093dc <_free_r+0x30>
 80093ce:	6063      	str	r3, [r4, #4]
 80093d0:	6014      	str	r4, [r2, #0]
 80093d2:	b003      	add	sp, #12
 80093d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093d8:	f000 b8e2 	b.w	80095a0 <__malloc_unlock>
 80093dc:	42a3      	cmp	r3, r4
 80093de:	d908      	bls.n	80093f2 <_free_r+0x46>
 80093e0:	6825      	ldr	r5, [r4, #0]
 80093e2:	1961      	adds	r1, r4, r5
 80093e4:	428b      	cmp	r3, r1
 80093e6:	bf01      	itttt	eq
 80093e8:	6819      	ldreq	r1, [r3, #0]
 80093ea:	685b      	ldreq	r3, [r3, #4]
 80093ec:	1949      	addeq	r1, r1, r5
 80093ee:	6021      	streq	r1, [r4, #0]
 80093f0:	e7ed      	b.n	80093ce <_free_r+0x22>
 80093f2:	461a      	mov	r2, r3
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	b10b      	cbz	r3, 80093fc <_free_r+0x50>
 80093f8:	42a3      	cmp	r3, r4
 80093fa:	d9fa      	bls.n	80093f2 <_free_r+0x46>
 80093fc:	6811      	ldr	r1, [r2, #0]
 80093fe:	1855      	adds	r5, r2, r1
 8009400:	42a5      	cmp	r5, r4
 8009402:	d10b      	bne.n	800941c <_free_r+0x70>
 8009404:	6824      	ldr	r4, [r4, #0]
 8009406:	4421      	add	r1, r4
 8009408:	1854      	adds	r4, r2, r1
 800940a:	42a3      	cmp	r3, r4
 800940c:	6011      	str	r1, [r2, #0]
 800940e:	d1e0      	bne.n	80093d2 <_free_r+0x26>
 8009410:	681c      	ldr	r4, [r3, #0]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	6053      	str	r3, [r2, #4]
 8009416:	440c      	add	r4, r1
 8009418:	6014      	str	r4, [r2, #0]
 800941a:	e7da      	b.n	80093d2 <_free_r+0x26>
 800941c:	d902      	bls.n	8009424 <_free_r+0x78>
 800941e:	230c      	movs	r3, #12
 8009420:	6003      	str	r3, [r0, #0]
 8009422:	e7d6      	b.n	80093d2 <_free_r+0x26>
 8009424:	6825      	ldr	r5, [r4, #0]
 8009426:	1961      	adds	r1, r4, r5
 8009428:	428b      	cmp	r3, r1
 800942a:	bf04      	itt	eq
 800942c:	6819      	ldreq	r1, [r3, #0]
 800942e:	685b      	ldreq	r3, [r3, #4]
 8009430:	6063      	str	r3, [r4, #4]
 8009432:	bf04      	itt	eq
 8009434:	1949      	addeq	r1, r1, r5
 8009436:	6021      	streq	r1, [r4, #0]
 8009438:	6054      	str	r4, [r2, #4]
 800943a:	e7ca      	b.n	80093d2 <_free_r+0x26>
 800943c:	b003      	add	sp, #12
 800943e:	bd30      	pop	{r4, r5, pc}
 8009440:	20000674 	.word	0x20000674

08009444 <malloc>:
 8009444:	4b02      	ldr	r3, [pc, #8]	; (8009450 <malloc+0xc>)
 8009446:	4601      	mov	r1, r0
 8009448:	6818      	ldr	r0, [r3, #0]
 800944a:	f000 b823 	b.w	8009494 <_malloc_r>
 800944e:	bf00      	nop
 8009450:	2000006c 	.word	0x2000006c

08009454 <sbrk_aligned>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	4e0e      	ldr	r6, [pc, #56]	; (8009490 <sbrk_aligned+0x3c>)
 8009458:	460c      	mov	r4, r1
 800945a:	6831      	ldr	r1, [r6, #0]
 800945c:	4605      	mov	r5, r0
 800945e:	b911      	cbnz	r1, 8009466 <sbrk_aligned+0x12>
 8009460:	f001 fe1a 	bl	800b098 <_sbrk_r>
 8009464:	6030      	str	r0, [r6, #0]
 8009466:	4621      	mov	r1, r4
 8009468:	4628      	mov	r0, r5
 800946a:	f001 fe15 	bl	800b098 <_sbrk_r>
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	d00a      	beq.n	8009488 <sbrk_aligned+0x34>
 8009472:	1cc4      	adds	r4, r0, #3
 8009474:	f024 0403 	bic.w	r4, r4, #3
 8009478:	42a0      	cmp	r0, r4
 800947a:	d007      	beq.n	800948c <sbrk_aligned+0x38>
 800947c:	1a21      	subs	r1, r4, r0
 800947e:	4628      	mov	r0, r5
 8009480:	f001 fe0a 	bl	800b098 <_sbrk_r>
 8009484:	3001      	adds	r0, #1
 8009486:	d101      	bne.n	800948c <sbrk_aligned+0x38>
 8009488:	f04f 34ff 	mov.w	r4, #4294967295
 800948c:	4620      	mov	r0, r4
 800948e:	bd70      	pop	{r4, r5, r6, pc}
 8009490:	20000678 	.word	0x20000678

08009494 <_malloc_r>:
 8009494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009498:	1ccd      	adds	r5, r1, #3
 800949a:	f025 0503 	bic.w	r5, r5, #3
 800949e:	3508      	adds	r5, #8
 80094a0:	2d0c      	cmp	r5, #12
 80094a2:	bf38      	it	cc
 80094a4:	250c      	movcc	r5, #12
 80094a6:	2d00      	cmp	r5, #0
 80094a8:	4607      	mov	r7, r0
 80094aa:	db01      	blt.n	80094b0 <_malloc_r+0x1c>
 80094ac:	42a9      	cmp	r1, r5
 80094ae:	d905      	bls.n	80094bc <_malloc_r+0x28>
 80094b0:	230c      	movs	r3, #12
 80094b2:	603b      	str	r3, [r7, #0]
 80094b4:	2600      	movs	r6, #0
 80094b6:	4630      	mov	r0, r6
 80094b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009590 <_malloc_r+0xfc>
 80094c0:	f000 f868 	bl	8009594 <__malloc_lock>
 80094c4:	f8d8 3000 	ldr.w	r3, [r8]
 80094c8:	461c      	mov	r4, r3
 80094ca:	bb5c      	cbnz	r4, 8009524 <_malloc_r+0x90>
 80094cc:	4629      	mov	r1, r5
 80094ce:	4638      	mov	r0, r7
 80094d0:	f7ff ffc0 	bl	8009454 <sbrk_aligned>
 80094d4:	1c43      	adds	r3, r0, #1
 80094d6:	4604      	mov	r4, r0
 80094d8:	d155      	bne.n	8009586 <_malloc_r+0xf2>
 80094da:	f8d8 4000 	ldr.w	r4, [r8]
 80094de:	4626      	mov	r6, r4
 80094e0:	2e00      	cmp	r6, #0
 80094e2:	d145      	bne.n	8009570 <_malloc_r+0xdc>
 80094e4:	2c00      	cmp	r4, #0
 80094e6:	d048      	beq.n	800957a <_malloc_r+0xe6>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	4631      	mov	r1, r6
 80094ec:	4638      	mov	r0, r7
 80094ee:	eb04 0903 	add.w	r9, r4, r3
 80094f2:	f001 fdd1 	bl	800b098 <_sbrk_r>
 80094f6:	4581      	cmp	r9, r0
 80094f8:	d13f      	bne.n	800957a <_malloc_r+0xe6>
 80094fa:	6821      	ldr	r1, [r4, #0]
 80094fc:	1a6d      	subs	r5, r5, r1
 80094fe:	4629      	mov	r1, r5
 8009500:	4638      	mov	r0, r7
 8009502:	f7ff ffa7 	bl	8009454 <sbrk_aligned>
 8009506:	3001      	adds	r0, #1
 8009508:	d037      	beq.n	800957a <_malloc_r+0xe6>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	442b      	add	r3, r5
 800950e:	6023      	str	r3, [r4, #0]
 8009510:	f8d8 3000 	ldr.w	r3, [r8]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d038      	beq.n	800958a <_malloc_r+0xf6>
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	42a2      	cmp	r2, r4
 800951c:	d12b      	bne.n	8009576 <_malloc_r+0xe2>
 800951e:	2200      	movs	r2, #0
 8009520:	605a      	str	r2, [r3, #4]
 8009522:	e00f      	b.n	8009544 <_malloc_r+0xb0>
 8009524:	6822      	ldr	r2, [r4, #0]
 8009526:	1b52      	subs	r2, r2, r5
 8009528:	d41f      	bmi.n	800956a <_malloc_r+0xd6>
 800952a:	2a0b      	cmp	r2, #11
 800952c:	d917      	bls.n	800955e <_malloc_r+0xca>
 800952e:	1961      	adds	r1, r4, r5
 8009530:	42a3      	cmp	r3, r4
 8009532:	6025      	str	r5, [r4, #0]
 8009534:	bf18      	it	ne
 8009536:	6059      	strne	r1, [r3, #4]
 8009538:	6863      	ldr	r3, [r4, #4]
 800953a:	bf08      	it	eq
 800953c:	f8c8 1000 	streq.w	r1, [r8]
 8009540:	5162      	str	r2, [r4, r5]
 8009542:	604b      	str	r3, [r1, #4]
 8009544:	4638      	mov	r0, r7
 8009546:	f104 060b 	add.w	r6, r4, #11
 800954a:	f000 f829 	bl	80095a0 <__malloc_unlock>
 800954e:	f026 0607 	bic.w	r6, r6, #7
 8009552:	1d23      	adds	r3, r4, #4
 8009554:	1af2      	subs	r2, r6, r3
 8009556:	d0ae      	beq.n	80094b6 <_malloc_r+0x22>
 8009558:	1b9b      	subs	r3, r3, r6
 800955a:	50a3      	str	r3, [r4, r2]
 800955c:	e7ab      	b.n	80094b6 <_malloc_r+0x22>
 800955e:	42a3      	cmp	r3, r4
 8009560:	6862      	ldr	r2, [r4, #4]
 8009562:	d1dd      	bne.n	8009520 <_malloc_r+0x8c>
 8009564:	f8c8 2000 	str.w	r2, [r8]
 8009568:	e7ec      	b.n	8009544 <_malloc_r+0xb0>
 800956a:	4623      	mov	r3, r4
 800956c:	6864      	ldr	r4, [r4, #4]
 800956e:	e7ac      	b.n	80094ca <_malloc_r+0x36>
 8009570:	4634      	mov	r4, r6
 8009572:	6876      	ldr	r6, [r6, #4]
 8009574:	e7b4      	b.n	80094e0 <_malloc_r+0x4c>
 8009576:	4613      	mov	r3, r2
 8009578:	e7cc      	b.n	8009514 <_malloc_r+0x80>
 800957a:	230c      	movs	r3, #12
 800957c:	603b      	str	r3, [r7, #0]
 800957e:	4638      	mov	r0, r7
 8009580:	f000 f80e 	bl	80095a0 <__malloc_unlock>
 8009584:	e797      	b.n	80094b6 <_malloc_r+0x22>
 8009586:	6025      	str	r5, [r4, #0]
 8009588:	e7dc      	b.n	8009544 <_malloc_r+0xb0>
 800958a:	605b      	str	r3, [r3, #4]
 800958c:	deff      	udf	#255	; 0xff
 800958e:	bf00      	nop
 8009590:	20000674 	.word	0x20000674

08009594 <__malloc_lock>:
 8009594:	4801      	ldr	r0, [pc, #4]	; (800959c <__malloc_lock+0x8>)
 8009596:	f7ff b886 	b.w	80086a6 <__retarget_lock_acquire_recursive>
 800959a:	bf00      	nop
 800959c:	20000670 	.word	0x20000670

080095a0 <__malloc_unlock>:
 80095a0:	4801      	ldr	r0, [pc, #4]	; (80095a8 <__malloc_unlock+0x8>)
 80095a2:	f7ff b881 	b.w	80086a8 <__retarget_lock_release_recursive>
 80095a6:	bf00      	nop
 80095a8:	20000670 	.word	0x20000670

080095ac <_Balloc>:
 80095ac:	b570      	push	{r4, r5, r6, lr}
 80095ae:	69c6      	ldr	r6, [r0, #28]
 80095b0:	4604      	mov	r4, r0
 80095b2:	460d      	mov	r5, r1
 80095b4:	b976      	cbnz	r6, 80095d4 <_Balloc+0x28>
 80095b6:	2010      	movs	r0, #16
 80095b8:	f7ff ff44 	bl	8009444 <malloc>
 80095bc:	4602      	mov	r2, r0
 80095be:	61e0      	str	r0, [r4, #28]
 80095c0:	b920      	cbnz	r0, 80095cc <_Balloc+0x20>
 80095c2:	4b18      	ldr	r3, [pc, #96]	; (8009624 <_Balloc+0x78>)
 80095c4:	4818      	ldr	r0, [pc, #96]	; (8009628 <_Balloc+0x7c>)
 80095c6:	216b      	movs	r1, #107	; 0x6b
 80095c8:	f001 fd8e 	bl	800b0e8 <__assert_func>
 80095cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095d0:	6006      	str	r6, [r0, #0]
 80095d2:	60c6      	str	r6, [r0, #12]
 80095d4:	69e6      	ldr	r6, [r4, #28]
 80095d6:	68f3      	ldr	r3, [r6, #12]
 80095d8:	b183      	cbz	r3, 80095fc <_Balloc+0x50>
 80095da:	69e3      	ldr	r3, [r4, #28]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095e2:	b9b8      	cbnz	r0, 8009614 <_Balloc+0x68>
 80095e4:	2101      	movs	r1, #1
 80095e6:	fa01 f605 	lsl.w	r6, r1, r5
 80095ea:	1d72      	adds	r2, r6, #5
 80095ec:	0092      	lsls	r2, r2, #2
 80095ee:	4620      	mov	r0, r4
 80095f0:	f001 fd98 	bl	800b124 <_calloc_r>
 80095f4:	b160      	cbz	r0, 8009610 <_Balloc+0x64>
 80095f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095fa:	e00e      	b.n	800961a <_Balloc+0x6e>
 80095fc:	2221      	movs	r2, #33	; 0x21
 80095fe:	2104      	movs	r1, #4
 8009600:	4620      	mov	r0, r4
 8009602:	f001 fd8f 	bl	800b124 <_calloc_r>
 8009606:	69e3      	ldr	r3, [r4, #28]
 8009608:	60f0      	str	r0, [r6, #12]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e4      	bne.n	80095da <_Balloc+0x2e>
 8009610:	2000      	movs	r0, #0
 8009612:	bd70      	pop	{r4, r5, r6, pc}
 8009614:	6802      	ldr	r2, [r0, #0]
 8009616:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800961a:	2300      	movs	r3, #0
 800961c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009620:	e7f7      	b.n	8009612 <_Balloc+0x66>
 8009622:	bf00      	nop
 8009624:	0800ee2a 	.word	0x0800ee2a
 8009628:	0800eeaa 	.word	0x0800eeaa

0800962c <_Bfree>:
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	69c6      	ldr	r6, [r0, #28]
 8009630:	4605      	mov	r5, r0
 8009632:	460c      	mov	r4, r1
 8009634:	b976      	cbnz	r6, 8009654 <_Bfree+0x28>
 8009636:	2010      	movs	r0, #16
 8009638:	f7ff ff04 	bl	8009444 <malloc>
 800963c:	4602      	mov	r2, r0
 800963e:	61e8      	str	r0, [r5, #28]
 8009640:	b920      	cbnz	r0, 800964c <_Bfree+0x20>
 8009642:	4b09      	ldr	r3, [pc, #36]	; (8009668 <_Bfree+0x3c>)
 8009644:	4809      	ldr	r0, [pc, #36]	; (800966c <_Bfree+0x40>)
 8009646:	218f      	movs	r1, #143	; 0x8f
 8009648:	f001 fd4e 	bl	800b0e8 <__assert_func>
 800964c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009650:	6006      	str	r6, [r0, #0]
 8009652:	60c6      	str	r6, [r0, #12]
 8009654:	b13c      	cbz	r4, 8009666 <_Bfree+0x3a>
 8009656:	69eb      	ldr	r3, [r5, #28]
 8009658:	6862      	ldr	r2, [r4, #4]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009660:	6021      	str	r1, [r4, #0]
 8009662:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009666:	bd70      	pop	{r4, r5, r6, pc}
 8009668:	0800ee2a 	.word	0x0800ee2a
 800966c:	0800eeaa 	.word	0x0800eeaa

08009670 <__multadd>:
 8009670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009674:	690d      	ldr	r5, [r1, #16]
 8009676:	4607      	mov	r7, r0
 8009678:	460c      	mov	r4, r1
 800967a:	461e      	mov	r6, r3
 800967c:	f101 0c14 	add.w	ip, r1, #20
 8009680:	2000      	movs	r0, #0
 8009682:	f8dc 3000 	ldr.w	r3, [ip]
 8009686:	b299      	uxth	r1, r3
 8009688:	fb02 6101 	mla	r1, r2, r1, r6
 800968c:	0c1e      	lsrs	r6, r3, #16
 800968e:	0c0b      	lsrs	r3, r1, #16
 8009690:	fb02 3306 	mla	r3, r2, r6, r3
 8009694:	b289      	uxth	r1, r1
 8009696:	3001      	adds	r0, #1
 8009698:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800969c:	4285      	cmp	r5, r0
 800969e:	f84c 1b04 	str.w	r1, [ip], #4
 80096a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096a6:	dcec      	bgt.n	8009682 <__multadd+0x12>
 80096a8:	b30e      	cbz	r6, 80096ee <__multadd+0x7e>
 80096aa:	68a3      	ldr	r3, [r4, #8]
 80096ac:	42ab      	cmp	r3, r5
 80096ae:	dc19      	bgt.n	80096e4 <__multadd+0x74>
 80096b0:	6861      	ldr	r1, [r4, #4]
 80096b2:	4638      	mov	r0, r7
 80096b4:	3101      	adds	r1, #1
 80096b6:	f7ff ff79 	bl	80095ac <_Balloc>
 80096ba:	4680      	mov	r8, r0
 80096bc:	b928      	cbnz	r0, 80096ca <__multadd+0x5a>
 80096be:	4602      	mov	r2, r0
 80096c0:	4b0c      	ldr	r3, [pc, #48]	; (80096f4 <__multadd+0x84>)
 80096c2:	480d      	ldr	r0, [pc, #52]	; (80096f8 <__multadd+0x88>)
 80096c4:	21ba      	movs	r1, #186	; 0xba
 80096c6:	f001 fd0f 	bl	800b0e8 <__assert_func>
 80096ca:	6922      	ldr	r2, [r4, #16]
 80096cc:	3202      	adds	r2, #2
 80096ce:	f104 010c 	add.w	r1, r4, #12
 80096d2:	0092      	lsls	r2, r2, #2
 80096d4:	300c      	adds	r0, #12
 80096d6:	f001 fcef 	bl	800b0b8 <memcpy>
 80096da:	4621      	mov	r1, r4
 80096dc:	4638      	mov	r0, r7
 80096de:	f7ff ffa5 	bl	800962c <_Bfree>
 80096e2:	4644      	mov	r4, r8
 80096e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096e8:	3501      	adds	r5, #1
 80096ea:	615e      	str	r6, [r3, #20]
 80096ec:	6125      	str	r5, [r4, #16]
 80096ee:	4620      	mov	r0, r4
 80096f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096f4:	0800ee99 	.word	0x0800ee99
 80096f8:	0800eeaa 	.word	0x0800eeaa

080096fc <__s2b>:
 80096fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009700:	460c      	mov	r4, r1
 8009702:	4615      	mov	r5, r2
 8009704:	461f      	mov	r7, r3
 8009706:	2209      	movs	r2, #9
 8009708:	3308      	adds	r3, #8
 800970a:	4606      	mov	r6, r0
 800970c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009710:	2100      	movs	r1, #0
 8009712:	2201      	movs	r2, #1
 8009714:	429a      	cmp	r2, r3
 8009716:	db09      	blt.n	800972c <__s2b+0x30>
 8009718:	4630      	mov	r0, r6
 800971a:	f7ff ff47 	bl	80095ac <_Balloc>
 800971e:	b940      	cbnz	r0, 8009732 <__s2b+0x36>
 8009720:	4602      	mov	r2, r0
 8009722:	4b19      	ldr	r3, [pc, #100]	; (8009788 <__s2b+0x8c>)
 8009724:	4819      	ldr	r0, [pc, #100]	; (800978c <__s2b+0x90>)
 8009726:	21d3      	movs	r1, #211	; 0xd3
 8009728:	f001 fcde 	bl	800b0e8 <__assert_func>
 800972c:	0052      	lsls	r2, r2, #1
 800972e:	3101      	adds	r1, #1
 8009730:	e7f0      	b.n	8009714 <__s2b+0x18>
 8009732:	9b08      	ldr	r3, [sp, #32]
 8009734:	6143      	str	r3, [r0, #20]
 8009736:	2d09      	cmp	r5, #9
 8009738:	f04f 0301 	mov.w	r3, #1
 800973c:	6103      	str	r3, [r0, #16]
 800973e:	dd16      	ble.n	800976e <__s2b+0x72>
 8009740:	f104 0909 	add.w	r9, r4, #9
 8009744:	46c8      	mov	r8, r9
 8009746:	442c      	add	r4, r5
 8009748:	f818 3b01 	ldrb.w	r3, [r8], #1
 800974c:	4601      	mov	r1, r0
 800974e:	3b30      	subs	r3, #48	; 0x30
 8009750:	220a      	movs	r2, #10
 8009752:	4630      	mov	r0, r6
 8009754:	f7ff ff8c 	bl	8009670 <__multadd>
 8009758:	45a0      	cmp	r8, r4
 800975a:	d1f5      	bne.n	8009748 <__s2b+0x4c>
 800975c:	f1a5 0408 	sub.w	r4, r5, #8
 8009760:	444c      	add	r4, r9
 8009762:	1b2d      	subs	r5, r5, r4
 8009764:	1963      	adds	r3, r4, r5
 8009766:	42bb      	cmp	r3, r7
 8009768:	db04      	blt.n	8009774 <__s2b+0x78>
 800976a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800976e:	340a      	adds	r4, #10
 8009770:	2509      	movs	r5, #9
 8009772:	e7f6      	b.n	8009762 <__s2b+0x66>
 8009774:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009778:	4601      	mov	r1, r0
 800977a:	3b30      	subs	r3, #48	; 0x30
 800977c:	220a      	movs	r2, #10
 800977e:	4630      	mov	r0, r6
 8009780:	f7ff ff76 	bl	8009670 <__multadd>
 8009784:	e7ee      	b.n	8009764 <__s2b+0x68>
 8009786:	bf00      	nop
 8009788:	0800ee99 	.word	0x0800ee99
 800978c:	0800eeaa 	.word	0x0800eeaa

08009790 <__hi0bits>:
 8009790:	0c03      	lsrs	r3, r0, #16
 8009792:	041b      	lsls	r3, r3, #16
 8009794:	b9d3      	cbnz	r3, 80097cc <__hi0bits+0x3c>
 8009796:	0400      	lsls	r0, r0, #16
 8009798:	2310      	movs	r3, #16
 800979a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800979e:	bf04      	itt	eq
 80097a0:	0200      	lsleq	r0, r0, #8
 80097a2:	3308      	addeq	r3, #8
 80097a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097a8:	bf04      	itt	eq
 80097aa:	0100      	lsleq	r0, r0, #4
 80097ac:	3304      	addeq	r3, #4
 80097ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097b2:	bf04      	itt	eq
 80097b4:	0080      	lsleq	r0, r0, #2
 80097b6:	3302      	addeq	r3, #2
 80097b8:	2800      	cmp	r0, #0
 80097ba:	db05      	blt.n	80097c8 <__hi0bits+0x38>
 80097bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097c0:	f103 0301 	add.w	r3, r3, #1
 80097c4:	bf08      	it	eq
 80097c6:	2320      	moveq	r3, #32
 80097c8:	4618      	mov	r0, r3
 80097ca:	4770      	bx	lr
 80097cc:	2300      	movs	r3, #0
 80097ce:	e7e4      	b.n	800979a <__hi0bits+0xa>

080097d0 <__lo0bits>:
 80097d0:	6803      	ldr	r3, [r0, #0]
 80097d2:	f013 0207 	ands.w	r2, r3, #7
 80097d6:	d00c      	beq.n	80097f2 <__lo0bits+0x22>
 80097d8:	07d9      	lsls	r1, r3, #31
 80097da:	d422      	bmi.n	8009822 <__lo0bits+0x52>
 80097dc:	079a      	lsls	r2, r3, #30
 80097de:	bf49      	itett	mi
 80097e0:	085b      	lsrmi	r3, r3, #1
 80097e2:	089b      	lsrpl	r3, r3, #2
 80097e4:	6003      	strmi	r3, [r0, #0]
 80097e6:	2201      	movmi	r2, #1
 80097e8:	bf5c      	itt	pl
 80097ea:	6003      	strpl	r3, [r0, #0]
 80097ec:	2202      	movpl	r2, #2
 80097ee:	4610      	mov	r0, r2
 80097f0:	4770      	bx	lr
 80097f2:	b299      	uxth	r1, r3
 80097f4:	b909      	cbnz	r1, 80097fa <__lo0bits+0x2a>
 80097f6:	0c1b      	lsrs	r3, r3, #16
 80097f8:	2210      	movs	r2, #16
 80097fa:	b2d9      	uxtb	r1, r3
 80097fc:	b909      	cbnz	r1, 8009802 <__lo0bits+0x32>
 80097fe:	3208      	adds	r2, #8
 8009800:	0a1b      	lsrs	r3, r3, #8
 8009802:	0719      	lsls	r1, r3, #28
 8009804:	bf04      	itt	eq
 8009806:	091b      	lsreq	r3, r3, #4
 8009808:	3204      	addeq	r2, #4
 800980a:	0799      	lsls	r1, r3, #30
 800980c:	bf04      	itt	eq
 800980e:	089b      	lsreq	r3, r3, #2
 8009810:	3202      	addeq	r2, #2
 8009812:	07d9      	lsls	r1, r3, #31
 8009814:	d403      	bmi.n	800981e <__lo0bits+0x4e>
 8009816:	085b      	lsrs	r3, r3, #1
 8009818:	f102 0201 	add.w	r2, r2, #1
 800981c:	d003      	beq.n	8009826 <__lo0bits+0x56>
 800981e:	6003      	str	r3, [r0, #0]
 8009820:	e7e5      	b.n	80097ee <__lo0bits+0x1e>
 8009822:	2200      	movs	r2, #0
 8009824:	e7e3      	b.n	80097ee <__lo0bits+0x1e>
 8009826:	2220      	movs	r2, #32
 8009828:	e7e1      	b.n	80097ee <__lo0bits+0x1e>
	...

0800982c <__i2b>:
 800982c:	b510      	push	{r4, lr}
 800982e:	460c      	mov	r4, r1
 8009830:	2101      	movs	r1, #1
 8009832:	f7ff febb 	bl	80095ac <_Balloc>
 8009836:	4602      	mov	r2, r0
 8009838:	b928      	cbnz	r0, 8009846 <__i2b+0x1a>
 800983a:	4b05      	ldr	r3, [pc, #20]	; (8009850 <__i2b+0x24>)
 800983c:	4805      	ldr	r0, [pc, #20]	; (8009854 <__i2b+0x28>)
 800983e:	f240 1145 	movw	r1, #325	; 0x145
 8009842:	f001 fc51 	bl	800b0e8 <__assert_func>
 8009846:	2301      	movs	r3, #1
 8009848:	6144      	str	r4, [r0, #20]
 800984a:	6103      	str	r3, [r0, #16]
 800984c:	bd10      	pop	{r4, pc}
 800984e:	bf00      	nop
 8009850:	0800ee99 	.word	0x0800ee99
 8009854:	0800eeaa 	.word	0x0800eeaa

08009858 <__multiply>:
 8009858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	4691      	mov	r9, r2
 800985e:	690a      	ldr	r2, [r1, #16]
 8009860:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009864:	429a      	cmp	r2, r3
 8009866:	bfb8      	it	lt
 8009868:	460b      	movlt	r3, r1
 800986a:	460c      	mov	r4, r1
 800986c:	bfbc      	itt	lt
 800986e:	464c      	movlt	r4, r9
 8009870:	4699      	movlt	r9, r3
 8009872:	6927      	ldr	r7, [r4, #16]
 8009874:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009878:	68a3      	ldr	r3, [r4, #8]
 800987a:	6861      	ldr	r1, [r4, #4]
 800987c:	eb07 060a 	add.w	r6, r7, sl
 8009880:	42b3      	cmp	r3, r6
 8009882:	b085      	sub	sp, #20
 8009884:	bfb8      	it	lt
 8009886:	3101      	addlt	r1, #1
 8009888:	f7ff fe90 	bl	80095ac <_Balloc>
 800988c:	b930      	cbnz	r0, 800989c <__multiply+0x44>
 800988e:	4602      	mov	r2, r0
 8009890:	4b44      	ldr	r3, [pc, #272]	; (80099a4 <__multiply+0x14c>)
 8009892:	4845      	ldr	r0, [pc, #276]	; (80099a8 <__multiply+0x150>)
 8009894:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009898:	f001 fc26 	bl	800b0e8 <__assert_func>
 800989c:	f100 0514 	add.w	r5, r0, #20
 80098a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098a4:	462b      	mov	r3, r5
 80098a6:	2200      	movs	r2, #0
 80098a8:	4543      	cmp	r3, r8
 80098aa:	d321      	bcc.n	80098f0 <__multiply+0x98>
 80098ac:	f104 0314 	add.w	r3, r4, #20
 80098b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098b4:	f109 0314 	add.w	r3, r9, #20
 80098b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098bc:	9202      	str	r2, [sp, #8]
 80098be:	1b3a      	subs	r2, r7, r4
 80098c0:	3a15      	subs	r2, #21
 80098c2:	f022 0203 	bic.w	r2, r2, #3
 80098c6:	3204      	adds	r2, #4
 80098c8:	f104 0115 	add.w	r1, r4, #21
 80098cc:	428f      	cmp	r7, r1
 80098ce:	bf38      	it	cc
 80098d0:	2204      	movcc	r2, #4
 80098d2:	9201      	str	r2, [sp, #4]
 80098d4:	9a02      	ldr	r2, [sp, #8]
 80098d6:	9303      	str	r3, [sp, #12]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d80c      	bhi.n	80098f6 <__multiply+0x9e>
 80098dc:	2e00      	cmp	r6, #0
 80098de:	dd03      	ble.n	80098e8 <__multiply+0x90>
 80098e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d05b      	beq.n	80099a0 <__multiply+0x148>
 80098e8:	6106      	str	r6, [r0, #16]
 80098ea:	b005      	add	sp, #20
 80098ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f0:	f843 2b04 	str.w	r2, [r3], #4
 80098f4:	e7d8      	b.n	80098a8 <__multiply+0x50>
 80098f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80098fa:	f1ba 0f00 	cmp.w	sl, #0
 80098fe:	d024      	beq.n	800994a <__multiply+0xf2>
 8009900:	f104 0e14 	add.w	lr, r4, #20
 8009904:	46a9      	mov	r9, r5
 8009906:	f04f 0c00 	mov.w	ip, #0
 800990a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800990e:	f8d9 1000 	ldr.w	r1, [r9]
 8009912:	fa1f fb82 	uxth.w	fp, r2
 8009916:	b289      	uxth	r1, r1
 8009918:	fb0a 110b 	mla	r1, sl, fp, r1
 800991c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009920:	f8d9 2000 	ldr.w	r2, [r9]
 8009924:	4461      	add	r1, ip
 8009926:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800992a:	fb0a c20b 	mla	r2, sl, fp, ip
 800992e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009932:	b289      	uxth	r1, r1
 8009934:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009938:	4577      	cmp	r7, lr
 800993a:	f849 1b04 	str.w	r1, [r9], #4
 800993e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009942:	d8e2      	bhi.n	800990a <__multiply+0xb2>
 8009944:	9a01      	ldr	r2, [sp, #4]
 8009946:	f845 c002 	str.w	ip, [r5, r2]
 800994a:	9a03      	ldr	r2, [sp, #12]
 800994c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009950:	3304      	adds	r3, #4
 8009952:	f1b9 0f00 	cmp.w	r9, #0
 8009956:	d021      	beq.n	800999c <__multiply+0x144>
 8009958:	6829      	ldr	r1, [r5, #0]
 800995a:	f104 0c14 	add.w	ip, r4, #20
 800995e:	46ae      	mov	lr, r5
 8009960:	f04f 0a00 	mov.w	sl, #0
 8009964:	f8bc b000 	ldrh.w	fp, [ip]
 8009968:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800996c:	fb09 220b 	mla	r2, r9, fp, r2
 8009970:	4452      	add	r2, sl
 8009972:	b289      	uxth	r1, r1
 8009974:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009978:	f84e 1b04 	str.w	r1, [lr], #4
 800997c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009980:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009984:	f8be 1000 	ldrh.w	r1, [lr]
 8009988:	fb09 110a 	mla	r1, r9, sl, r1
 800998c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009990:	4567      	cmp	r7, ip
 8009992:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009996:	d8e5      	bhi.n	8009964 <__multiply+0x10c>
 8009998:	9a01      	ldr	r2, [sp, #4]
 800999a:	50a9      	str	r1, [r5, r2]
 800999c:	3504      	adds	r5, #4
 800999e:	e799      	b.n	80098d4 <__multiply+0x7c>
 80099a0:	3e01      	subs	r6, #1
 80099a2:	e79b      	b.n	80098dc <__multiply+0x84>
 80099a4:	0800ee99 	.word	0x0800ee99
 80099a8:	0800eeaa 	.word	0x0800eeaa

080099ac <__pow5mult>:
 80099ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b0:	4615      	mov	r5, r2
 80099b2:	f012 0203 	ands.w	r2, r2, #3
 80099b6:	4606      	mov	r6, r0
 80099b8:	460f      	mov	r7, r1
 80099ba:	d007      	beq.n	80099cc <__pow5mult+0x20>
 80099bc:	4c25      	ldr	r4, [pc, #148]	; (8009a54 <__pow5mult+0xa8>)
 80099be:	3a01      	subs	r2, #1
 80099c0:	2300      	movs	r3, #0
 80099c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099c6:	f7ff fe53 	bl	8009670 <__multadd>
 80099ca:	4607      	mov	r7, r0
 80099cc:	10ad      	asrs	r5, r5, #2
 80099ce:	d03d      	beq.n	8009a4c <__pow5mult+0xa0>
 80099d0:	69f4      	ldr	r4, [r6, #28]
 80099d2:	b97c      	cbnz	r4, 80099f4 <__pow5mult+0x48>
 80099d4:	2010      	movs	r0, #16
 80099d6:	f7ff fd35 	bl	8009444 <malloc>
 80099da:	4602      	mov	r2, r0
 80099dc:	61f0      	str	r0, [r6, #28]
 80099de:	b928      	cbnz	r0, 80099ec <__pow5mult+0x40>
 80099e0:	4b1d      	ldr	r3, [pc, #116]	; (8009a58 <__pow5mult+0xac>)
 80099e2:	481e      	ldr	r0, [pc, #120]	; (8009a5c <__pow5mult+0xb0>)
 80099e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80099e8:	f001 fb7e 	bl	800b0e8 <__assert_func>
 80099ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099f0:	6004      	str	r4, [r0, #0]
 80099f2:	60c4      	str	r4, [r0, #12]
 80099f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80099f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099fc:	b94c      	cbnz	r4, 8009a12 <__pow5mult+0x66>
 80099fe:	f240 2171 	movw	r1, #625	; 0x271
 8009a02:	4630      	mov	r0, r6
 8009a04:	f7ff ff12 	bl	800982c <__i2b>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a0e:	4604      	mov	r4, r0
 8009a10:	6003      	str	r3, [r0, #0]
 8009a12:	f04f 0900 	mov.w	r9, #0
 8009a16:	07eb      	lsls	r3, r5, #31
 8009a18:	d50a      	bpl.n	8009a30 <__pow5mult+0x84>
 8009a1a:	4639      	mov	r1, r7
 8009a1c:	4622      	mov	r2, r4
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f7ff ff1a 	bl	8009858 <__multiply>
 8009a24:	4639      	mov	r1, r7
 8009a26:	4680      	mov	r8, r0
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f7ff fdff 	bl	800962c <_Bfree>
 8009a2e:	4647      	mov	r7, r8
 8009a30:	106d      	asrs	r5, r5, #1
 8009a32:	d00b      	beq.n	8009a4c <__pow5mult+0xa0>
 8009a34:	6820      	ldr	r0, [r4, #0]
 8009a36:	b938      	cbnz	r0, 8009a48 <__pow5mult+0x9c>
 8009a38:	4622      	mov	r2, r4
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f7ff ff0b 	bl	8009858 <__multiply>
 8009a42:	6020      	str	r0, [r4, #0]
 8009a44:	f8c0 9000 	str.w	r9, [r0]
 8009a48:	4604      	mov	r4, r0
 8009a4a:	e7e4      	b.n	8009a16 <__pow5mult+0x6a>
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a52:	bf00      	nop
 8009a54:	0800eff8 	.word	0x0800eff8
 8009a58:	0800ee2a 	.word	0x0800ee2a
 8009a5c:	0800eeaa 	.word	0x0800eeaa

08009a60 <__lshift>:
 8009a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a64:	460c      	mov	r4, r1
 8009a66:	6849      	ldr	r1, [r1, #4]
 8009a68:	6923      	ldr	r3, [r4, #16]
 8009a6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a6e:	68a3      	ldr	r3, [r4, #8]
 8009a70:	4607      	mov	r7, r0
 8009a72:	4691      	mov	r9, r2
 8009a74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a78:	f108 0601 	add.w	r6, r8, #1
 8009a7c:	42b3      	cmp	r3, r6
 8009a7e:	db0b      	blt.n	8009a98 <__lshift+0x38>
 8009a80:	4638      	mov	r0, r7
 8009a82:	f7ff fd93 	bl	80095ac <_Balloc>
 8009a86:	4605      	mov	r5, r0
 8009a88:	b948      	cbnz	r0, 8009a9e <__lshift+0x3e>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	4b28      	ldr	r3, [pc, #160]	; (8009b30 <__lshift+0xd0>)
 8009a8e:	4829      	ldr	r0, [pc, #164]	; (8009b34 <__lshift+0xd4>)
 8009a90:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009a94:	f001 fb28 	bl	800b0e8 <__assert_func>
 8009a98:	3101      	adds	r1, #1
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	e7ee      	b.n	8009a7c <__lshift+0x1c>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f100 0114 	add.w	r1, r0, #20
 8009aa4:	f100 0210 	add.w	r2, r0, #16
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	4553      	cmp	r3, sl
 8009aac:	db33      	blt.n	8009b16 <__lshift+0xb6>
 8009aae:	6920      	ldr	r0, [r4, #16]
 8009ab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ab4:	f104 0314 	add.w	r3, r4, #20
 8009ab8:	f019 091f 	ands.w	r9, r9, #31
 8009abc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ac0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ac4:	d02b      	beq.n	8009b1e <__lshift+0xbe>
 8009ac6:	f1c9 0e20 	rsb	lr, r9, #32
 8009aca:	468a      	mov	sl, r1
 8009acc:	2200      	movs	r2, #0
 8009ace:	6818      	ldr	r0, [r3, #0]
 8009ad0:	fa00 f009 	lsl.w	r0, r0, r9
 8009ad4:	4310      	orrs	r0, r2
 8009ad6:	f84a 0b04 	str.w	r0, [sl], #4
 8009ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ade:	459c      	cmp	ip, r3
 8009ae0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ae4:	d8f3      	bhi.n	8009ace <__lshift+0x6e>
 8009ae6:	ebac 0304 	sub.w	r3, ip, r4
 8009aea:	3b15      	subs	r3, #21
 8009aec:	f023 0303 	bic.w	r3, r3, #3
 8009af0:	3304      	adds	r3, #4
 8009af2:	f104 0015 	add.w	r0, r4, #21
 8009af6:	4584      	cmp	ip, r0
 8009af8:	bf38      	it	cc
 8009afa:	2304      	movcc	r3, #4
 8009afc:	50ca      	str	r2, [r1, r3]
 8009afe:	b10a      	cbz	r2, 8009b04 <__lshift+0xa4>
 8009b00:	f108 0602 	add.w	r6, r8, #2
 8009b04:	3e01      	subs	r6, #1
 8009b06:	4638      	mov	r0, r7
 8009b08:	612e      	str	r6, [r5, #16]
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	f7ff fd8e 	bl	800962c <_Bfree>
 8009b10:	4628      	mov	r0, r5
 8009b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b16:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	e7c5      	b.n	8009aaa <__lshift+0x4a>
 8009b1e:	3904      	subs	r1, #4
 8009b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b24:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b28:	459c      	cmp	ip, r3
 8009b2a:	d8f9      	bhi.n	8009b20 <__lshift+0xc0>
 8009b2c:	e7ea      	b.n	8009b04 <__lshift+0xa4>
 8009b2e:	bf00      	nop
 8009b30:	0800ee99 	.word	0x0800ee99
 8009b34:	0800eeaa 	.word	0x0800eeaa

08009b38 <__mcmp>:
 8009b38:	b530      	push	{r4, r5, lr}
 8009b3a:	6902      	ldr	r2, [r0, #16]
 8009b3c:	690c      	ldr	r4, [r1, #16]
 8009b3e:	1b12      	subs	r2, r2, r4
 8009b40:	d10e      	bne.n	8009b60 <__mcmp+0x28>
 8009b42:	f100 0314 	add.w	r3, r0, #20
 8009b46:	3114      	adds	r1, #20
 8009b48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b58:	42a5      	cmp	r5, r4
 8009b5a:	d003      	beq.n	8009b64 <__mcmp+0x2c>
 8009b5c:	d305      	bcc.n	8009b6a <__mcmp+0x32>
 8009b5e:	2201      	movs	r2, #1
 8009b60:	4610      	mov	r0, r2
 8009b62:	bd30      	pop	{r4, r5, pc}
 8009b64:	4283      	cmp	r3, r0
 8009b66:	d3f3      	bcc.n	8009b50 <__mcmp+0x18>
 8009b68:	e7fa      	b.n	8009b60 <__mcmp+0x28>
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6e:	e7f7      	b.n	8009b60 <__mcmp+0x28>

08009b70 <__mdiff>:
 8009b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	460c      	mov	r4, r1
 8009b76:	4606      	mov	r6, r0
 8009b78:	4611      	mov	r1, r2
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	4690      	mov	r8, r2
 8009b7e:	f7ff ffdb 	bl	8009b38 <__mcmp>
 8009b82:	1e05      	subs	r5, r0, #0
 8009b84:	d110      	bne.n	8009ba8 <__mdiff+0x38>
 8009b86:	4629      	mov	r1, r5
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f7ff fd0f 	bl	80095ac <_Balloc>
 8009b8e:	b930      	cbnz	r0, 8009b9e <__mdiff+0x2e>
 8009b90:	4b3a      	ldr	r3, [pc, #232]	; (8009c7c <__mdiff+0x10c>)
 8009b92:	4602      	mov	r2, r0
 8009b94:	f240 2137 	movw	r1, #567	; 0x237
 8009b98:	4839      	ldr	r0, [pc, #228]	; (8009c80 <__mdiff+0x110>)
 8009b9a:	f001 faa5 	bl	800b0e8 <__assert_func>
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba8:	bfa4      	itt	ge
 8009baa:	4643      	movge	r3, r8
 8009bac:	46a0      	movge	r8, r4
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bb4:	bfa6      	itte	ge
 8009bb6:	461c      	movge	r4, r3
 8009bb8:	2500      	movge	r5, #0
 8009bba:	2501      	movlt	r5, #1
 8009bbc:	f7ff fcf6 	bl	80095ac <_Balloc>
 8009bc0:	b920      	cbnz	r0, 8009bcc <__mdiff+0x5c>
 8009bc2:	4b2e      	ldr	r3, [pc, #184]	; (8009c7c <__mdiff+0x10c>)
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	f240 2145 	movw	r1, #581	; 0x245
 8009bca:	e7e5      	b.n	8009b98 <__mdiff+0x28>
 8009bcc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bd0:	6926      	ldr	r6, [r4, #16]
 8009bd2:	60c5      	str	r5, [r0, #12]
 8009bd4:	f104 0914 	add.w	r9, r4, #20
 8009bd8:	f108 0514 	add.w	r5, r8, #20
 8009bdc:	f100 0e14 	add.w	lr, r0, #20
 8009be0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009be4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009be8:	f108 0210 	add.w	r2, r8, #16
 8009bec:	46f2      	mov	sl, lr
 8009bee:	2100      	movs	r1, #0
 8009bf0:	f859 3b04 	ldr.w	r3, [r9], #4
 8009bf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009bf8:	fa11 f88b 	uxtah	r8, r1, fp
 8009bfc:	b299      	uxth	r1, r3
 8009bfe:	0c1b      	lsrs	r3, r3, #16
 8009c00:	eba8 0801 	sub.w	r8, r8, r1
 8009c04:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c08:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c0c:	fa1f f888 	uxth.w	r8, r8
 8009c10:	1419      	asrs	r1, r3, #16
 8009c12:	454e      	cmp	r6, r9
 8009c14:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c18:	f84a 3b04 	str.w	r3, [sl], #4
 8009c1c:	d8e8      	bhi.n	8009bf0 <__mdiff+0x80>
 8009c1e:	1b33      	subs	r3, r6, r4
 8009c20:	3b15      	subs	r3, #21
 8009c22:	f023 0303 	bic.w	r3, r3, #3
 8009c26:	3304      	adds	r3, #4
 8009c28:	3415      	adds	r4, #21
 8009c2a:	42a6      	cmp	r6, r4
 8009c2c:	bf38      	it	cc
 8009c2e:	2304      	movcc	r3, #4
 8009c30:	441d      	add	r5, r3
 8009c32:	4473      	add	r3, lr
 8009c34:	469e      	mov	lr, r3
 8009c36:	462e      	mov	r6, r5
 8009c38:	4566      	cmp	r6, ip
 8009c3a:	d30e      	bcc.n	8009c5a <__mdiff+0xea>
 8009c3c:	f10c 0203 	add.w	r2, ip, #3
 8009c40:	1b52      	subs	r2, r2, r5
 8009c42:	f022 0203 	bic.w	r2, r2, #3
 8009c46:	3d03      	subs	r5, #3
 8009c48:	45ac      	cmp	ip, r5
 8009c4a:	bf38      	it	cc
 8009c4c:	2200      	movcc	r2, #0
 8009c4e:	4413      	add	r3, r2
 8009c50:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009c54:	b17a      	cbz	r2, 8009c76 <__mdiff+0x106>
 8009c56:	6107      	str	r7, [r0, #16]
 8009c58:	e7a4      	b.n	8009ba4 <__mdiff+0x34>
 8009c5a:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c5e:	fa11 f288 	uxtah	r2, r1, r8
 8009c62:	1414      	asrs	r4, r2, #16
 8009c64:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c68:	b292      	uxth	r2, r2
 8009c6a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c6e:	f84e 2b04 	str.w	r2, [lr], #4
 8009c72:	1421      	asrs	r1, r4, #16
 8009c74:	e7e0      	b.n	8009c38 <__mdiff+0xc8>
 8009c76:	3f01      	subs	r7, #1
 8009c78:	e7ea      	b.n	8009c50 <__mdiff+0xe0>
 8009c7a:	bf00      	nop
 8009c7c:	0800ee99 	.word	0x0800ee99
 8009c80:	0800eeaa 	.word	0x0800eeaa

08009c84 <__ulp>:
 8009c84:	b082      	sub	sp, #8
 8009c86:	ed8d 0b00 	vstr	d0, [sp]
 8009c8a:	9a01      	ldr	r2, [sp, #4]
 8009c8c:	4b0f      	ldr	r3, [pc, #60]	; (8009ccc <__ulp+0x48>)
 8009c8e:	4013      	ands	r3, r2
 8009c90:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dc08      	bgt.n	8009caa <__ulp+0x26>
 8009c98:	425b      	negs	r3, r3
 8009c9a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009c9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009ca2:	da04      	bge.n	8009cae <__ulp+0x2a>
 8009ca4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ca8:	4113      	asrs	r3, r2
 8009caa:	2200      	movs	r2, #0
 8009cac:	e008      	b.n	8009cc0 <__ulp+0x3c>
 8009cae:	f1a2 0314 	sub.w	r3, r2, #20
 8009cb2:	2b1e      	cmp	r3, #30
 8009cb4:	bfda      	itte	le
 8009cb6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009cba:	40da      	lsrle	r2, r3
 8009cbc:	2201      	movgt	r2, #1
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	ec41 0b10 	vmov	d0, r0, r1
 8009cc8:	b002      	add	sp, #8
 8009cca:	4770      	bx	lr
 8009ccc:	7ff00000 	.word	0x7ff00000

08009cd0 <__b2d>:
 8009cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd4:	6906      	ldr	r6, [r0, #16]
 8009cd6:	f100 0814 	add.w	r8, r0, #20
 8009cda:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009cde:	1f37      	subs	r7, r6, #4
 8009ce0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	f7ff fd53 	bl	8009790 <__hi0bits>
 8009cea:	f1c0 0320 	rsb	r3, r0, #32
 8009cee:	280a      	cmp	r0, #10
 8009cf0:	600b      	str	r3, [r1, #0]
 8009cf2:	491b      	ldr	r1, [pc, #108]	; (8009d60 <__b2d+0x90>)
 8009cf4:	dc15      	bgt.n	8009d22 <__b2d+0x52>
 8009cf6:	f1c0 0c0b 	rsb	ip, r0, #11
 8009cfa:	fa22 f30c 	lsr.w	r3, r2, ip
 8009cfe:	45b8      	cmp	r8, r7
 8009d00:	ea43 0501 	orr.w	r5, r3, r1
 8009d04:	bf34      	ite	cc
 8009d06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d0a:	2300      	movcs	r3, #0
 8009d0c:	3015      	adds	r0, #21
 8009d0e:	fa02 f000 	lsl.w	r0, r2, r0
 8009d12:	fa23 f30c 	lsr.w	r3, r3, ip
 8009d16:	4303      	orrs	r3, r0
 8009d18:	461c      	mov	r4, r3
 8009d1a:	ec45 4b10 	vmov	d0, r4, r5
 8009d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d22:	45b8      	cmp	r8, r7
 8009d24:	bf3a      	itte	cc
 8009d26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d2a:	f1a6 0708 	subcc.w	r7, r6, #8
 8009d2e:	2300      	movcs	r3, #0
 8009d30:	380b      	subs	r0, #11
 8009d32:	d012      	beq.n	8009d5a <__b2d+0x8a>
 8009d34:	f1c0 0120 	rsb	r1, r0, #32
 8009d38:	fa23 f401 	lsr.w	r4, r3, r1
 8009d3c:	4082      	lsls	r2, r0
 8009d3e:	4322      	orrs	r2, r4
 8009d40:	4547      	cmp	r7, r8
 8009d42:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009d46:	bf8c      	ite	hi
 8009d48:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009d4c:	2200      	movls	r2, #0
 8009d4e:	4083      	lsls	r3, r0
 8009d50:	40ca      	lsrs	r2, r1
 8009d52:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009d56:	4313      	orrs	r3, r2
 8009d58:	e7de      	b.n	8009d18 <__b2d+0x48>
 8009d5a:	ea42 0501 	orr.w	r5, r2, r1
 8009d5e:	e7db      	b.n	8009d18 <__b2d+0x48>
 8009d60:	3ff00000 	.word	0x3ff00000

08009d64 <__d2b>:
 8009d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d68:	460f      	mov	r7, r1
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	ec59 8b10 	vmov	r8, r9, d0
 8009d70:	4616      	mov	r6, r2
 8009d72:	f7ff fc1b 	bl	80095ac <_Balloc>
 8009d76:	4604      	mov	r4, r0
 8009d78:	b930      	cbnz	r0, 8009d88 <__d2b+0x24>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	4b24      	ldr	r3, [pc, #144]	; (8009e10 <__d2b+0xac>)
 8009d7e:	4825      	ldr	r0, [pc, #148]	; (8009e14 <__d2b+0xb0>)
 8009d80:	f240 310f 	movw	r1, #783	; 0x30f
 8009d84:	f001 f9b0 	bl	800b0e8 <__assert_func>
 8009d88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d90:	bb2d      	cbnz	r5, 8009dde <__d2b+0x7a>
 8009d92:	9301      	str	r3, [sp, #4]
 8009d94:	f1b8 0300 	subs.w	r3, r8, #0
 8009d98:	d026      	beq.n	8009de8 <__d2b+0x84>
 8009d9a:	4668      	mov	r0, sp
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	f7ff fd17 	bl	80097d0 <__lo0bits>
 8009da2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009da6:	b1e8      	cbz	r0, 8009de4 <__d2b+0x80>
 8009da8:	f1c0 0320 	rsb	r3, r0, #32
 8009dac:	fa02 f303 	lsl.w	r3, r2, r3
 8009db0:	430b      	orrs	r3, r1
 8009db2:	40c2      	lsrs	r2, r0
 8009db4:	6163      	str	r3, [r4, #20]
 8009db6:	9201      	str	r2, [sp, #4]
 8009db8:	9b01      	ldr	r3, [sp, #4]
 8009dba:	61a3      	str	r3, [r4, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	bf14      	ite	ne
 8009dc0:	2202      	movne	r2, #2
 8009dc2:	2201      	moveq	r2, #1
 8009dc4:	6122      	str	r2, [r4, #16]
 8009dc6:	b1bd      	cbz	r5, 8009df8 <__d2b+0x94>
 8009dc8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009dcc:	4405      	add	r5, r0
 8009dce:	603d      	str	r5, [r7, #0]
 8009dd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009dd4:	6030      	str	r0, [r6, #0]
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	b003      	add	sp, #12
 8009dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009de2:	e7d6      	b.n	8009d92 <__d2b+0x2e>
 8009de4:	6161      	str	r1, [r4, #20]
 8009de6:	e7e7      	b.n	8009db8 <__d2b+0x54>
 8009de8:	a801      	add	r0, sp, #4
 8009dea:	f7ff fcf1 	bl	80097d0 <__lo0bits>
 8009dee:	9b01      	ldr	r3, [sp, #4]
 8009df0:	6163      	str	r3, [r4, #20]
 8009df2:	3020      	adds	r0, #32
 8009df4:	2201      	movs	r2, #1
 8009df6:	e7e5      	b.n	8009dc4 <__d2b+0x60>
 8009df8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e00:	6038      	str	r0, [r7, #0]
 8009e02:	6918      	ldr	r0, [r3, #16]
 8009e04:	f7ff fcc4 	bl	8009790 <__hi0bits>
 8009e08:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e0c:	e7e2      	b.n	8009dd4 <__d2b+0x70>
 8009e0e:	bf00      	nop
 8009e10:	0800ee99 	.word	0x0800ee99
 8009e14:	0800eeaa 	.word	0x0800eeaa

08009e18 <__ratio>:
 8009e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	4688      	mov	r8, r1
 8009e1e:	4669      	mov	r1, sp
 8009e20:	4681      	mov	r9, r0
 8009e22:	f7ff ff55 	bl	8009cd0 <__b2d>
 8009e26:	a901      	add	r1, sp, #4
 8009e28:	4640      	mov	r0, r8
 8009e2a:	ec55 4b10 	vmov	r4, r5, d0
 8009e2e:	f7ff ff4f 	bl	8009cd0 <__b2d>
 8009e32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e3a:	eba3 0c02 	sub.w	ip, r3, r2
 8009e3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e48:	ec51 0b10 	vmov	r0, r1, d0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	bfd6      	itet	le
 8009e50:	460a      	movle	r2, r1
 8009e52:	462a      	movgt	r2, r5
 8009e54:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e58:	468b      	mov	fp, r1
 8009e5a:	462f      	mov	r7, r5
 8009e5c:	bfd4      	ite	le
 8009e5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009e62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e66:	4620      	mov	r0, r4
 8009e68:	ee10 2a10 	vmov	r2, s0
 8009e6c:	465b      	mov	r3, fp
 8009e6e:	4639      	mov	r1, r7
 8009e70:	f7f6 fcec 	bl	800084c <__aeabi_ddiv>
 8009e74:	ec41 0b10 	vmov	d0, r0, r1
 8009e78:	b003      	add	sp, #12
 8009e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e7e <__copybits>:
 8009e7e:	3901      	subs	r1, #1
 8009e80:	b570      	push	{r4, r5, r6, lr}
 8009e82:	1149      	asrs	r1, r1, #5
 8009e84:	6914      	ldr	r4, [r2, #16]
 8009e86:	3101      	adds	r1, #1
 8009e88:	f102 0314 	add.w	r3, r2, #20
 8009e8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e94:	1f05      	subs	r5, r0, #4
 8009e96:	42a3      	cmp	r3, r4
 8009e98:	d30c      	bcc.n	8009eb4 <__copybits+0x36>
 8009e9a:	1aa3      	subs	r3, r4, r2
 8009e9c:	3b11      	subs	r3, #17
 8009e9e:	f023 0303 	bic.w	r3, r3, #3
 8009ea2:	3211      	adds	r2, #17
 8009ea4:	42a2      	cmp	r2, r4
 8009ea6:	bf88      	it	hi
 8009ea8:	2300      	movhi	r3, #0
 8009eaa:	4418      	add	r0, r3
 8009eac:	2300      	movs	r3, #0
 8009eae:	4288      	cmp	r0, r1
 8009eb0:	d305      	bcc.n	8009ebe <__copybits+0x40>
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009eb8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009ebc:	e7eb      	b.n	8009e96 <__copybits+0x18>
 8009ebe:	f840 3b04 	str.w	r3, [r0], #4
 8009ec2:	e7f4      	b.n	8009eae <__copybits+0x30>

08009ec4 <__any_on>:
 8009ec4:	f100 0214 	add.w	r2, r0, #20
 8009ec8:	6900      	ldr	r0, [r0, #16]
 8009eca:	114b      	asrs	r3, r1, #5
 8009ecc:	4298      	cmp	r0, r3
 8009ece:	b510      	push	{r4, lr}
 8009ed0:	db11      	blt.n	8009ef6 <__any_on+0x32>
 8009ed2:	dd0a      	ble.n	8009eea <__any_on+0x26>
 8009ed4:	f011 011f 	ands.w	r1, r1, #31
 8009ed8:	d007      	beq.n	8009eea <__any_on+0x26>
 8009eda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ede:	fa24 f001 	lsr.w	r0, r4, r1
 8009ee2:	fa00 f101 	lsl.w	r1, r0, r1
 8009ee6:	428c      	cmp	r4, r1
 8009ee8:	d10b      	bne.n	8009f02 <__any_on+0x3e>
 8009eea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d803      	bhi.n	8009efa <__any_on+0x36>
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	bd10      	pop	{r4, pc}
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	e7f7      	b.n	8009eea <__any_on+0x26>
 8009efa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009efe:	2900      	cmp	r1, #0
 8009f00:	d0f5      	beq.n	8009eee <__any_on+0x2a>
 8009f02:	2001      	movs	r0, #1
 8009f04:	e7f6      	b.n	8009ef4 <__any_on+0x30>

08009f06 <sulp>:
 8009f06:	b570      	push	{r4, r5, r6, lr}
 8009f08:	4604      	mov	r4, r0
 8009f0a:	460d      	mov	r5, r1
 8009f0c:	ec45 4b10 	vmov	d0, r4, r5
 8009f10:	4616      	mov	r6, r2
 8009f12:	f7ff feb7 	bl	8009c84 <__ulp>
 8009f16:	ec51 0b10 	vmov	r0, r1, d0
 8009f1a:	b17e      	cbz	r6, 8009f3c <sulp+0x36>
 8009f1c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dd09      	ble.n	8009f3c <sulp+0x36>
 8009f28:	051b      	lsls	r3, r3, #20
 8009f2a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009f2e:	2400      	movs	r4, #0
 8009f30:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009f34:	4622      	mov	r2, r4
 8009f36:	462b      	mov	r3, r5
 8009f38:	f7f6 fb5e 	bl	80005f8 <__aeabi_dmul>
 8009f3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f40 <_strtod_l>:
 8009f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f44:	ed2d 8b02 	vpush	{d8}
 8009f48:	b09b      	sub	sp, #108	; 0x6c
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	9213      	str	r2, [sp, #76]	; 0x4c
 8009f4e:	2200      	movs	r2, #0
 8009f50:	9216      	str	r2, [sp, #88]	; 0x58
 8009f52:	460d      	mov	r5, r1
 8009f54:	f04f 0800 	mov.w	r8, #0
 8009f58:	f04f 0900 	mov.w	r9, #0
 8009f5c:	460a      	mov	r2, r1
 8009f5e:	9215      	str	r2, [sp, #84]	; 0x54
 8009f60:	7811      	ldrb	r1, [r2, #0]
 8009f62:	292b      	cmp	r1, #43	; 0x2b
 8009f64:	d04c      	beq.n	800a000 <_strtod_l+0xc0>
 8009f66:	d83a      	bhi.n	8009fde <_strtod_l+0x9e>
 8009f68:	290d      	cmp	r1, #13
 8009f6a:	d834      	bhi.n	8009fd6 <_strtod_l+0x96>
 8009f6c:	2908      	cmp	r1, #8
 8009f6e:	d834      	bhi.n	8009fda <_strtod_l+0x9a>
 8009f70:	2900      	cmp	r1, #0
 8009f72:	d03d      	beq.n	8009ff0 <_strtod_l+0xb0>
 8009f74:	2200      	movs	r2, #0
 8009f76:	920a      	str	r2, [sp, #40]	; 0x28
 8009f78:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009f7a:	7832      	ldrb	r2, [r6, #0]
 8009f7c:	2a30      	cmp	r2, #48	; 0x30
 8009f7e:	f040 80b4 	bne.w	800a0ea <_strtod_l+0x1aa>
 8009f82:	7872      	ldrb	r2, [r6, #1]
 8009f84:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009f88:	2a58      	cmp	r2, #88	; 0x58
 8009f8a:	d170      	bne.n	800a06e <_strtod_l+0x12e>
 8009f8c:	9302      	str	r3, [sp, #8]
 8009f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f90:	9301      	str	r3, [sp, #4]
 8009f92:	ab16      	add	r3, sp, #88	; 0x58
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	4a8e      	ldr	r2, [pc, #568]	; (800a1d0 <_strtod_l+0x290>)
 8009f98:	ab17      	add	r3, sp, #92	; 0x5c
 8009f9a:	a915      	add	r1, sp, #84	; 0x54
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f001 f93f 	bl	800b220 <__gethex>
 8009fa2:	f010 070f 	ands.w	r7, r0, #15
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	d005      	beq.n	8009fb6 <_strtod_l+0x76>
 8009faa:	2f06      	cmp	r7, #6
 8009fac:	d12a      	bne.n	800a004 <_strtod_l+0xc4>
 8009fae:	3601      	adds	r6, #1
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	9615      	str	r6, [sp, #84]	; 0x54
 8009fb4:	930a      	str	r3, [sp, #40]	; 0x28
 8009fb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f040 857f 	bne.w	800aabc <_strtod_l+0xb7c>
 8009fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc0:	b1db      	cbz	r3, 8009ffa <_strtod_l+0xba>
 8009fc2:	4642      	mov	r2, r8
 8009fc4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009fc8:	ec43 2b10 	vmov	d0, r2, r3
 8009fcc:	b01b      	add	sp, #108	; 0x6c
 8009fce:	ecbd 8b02 	vpop	{d8}
 8009fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd6:	2920      	cmp	r1, #32
 8009fd8:	d1cc      	bne.n	8009f74 <_strtod_l+0x34>
 8009fda:	3201      	adds	r2, #1
 8009fdc:	e7bf      	b.n	8009f5e <_strtod_l+0x1e>
 8009fde:	292d      	cmp	r1, #45	; 0x2d
 8009fe0:	d1c8      	bne.n	8009f74 <_strtod_l+0x34>
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	910a      	str	r1, [sp, #40]	; 0x28
 8009fe6:	1c51      	adds	r1, r2, #1
 8009fe8:	9115      	str	r1, [sp, #84]	; 0x54
 8009fea:	7852      	ldrb	r2, [r2, #1]
 8009fec:	2a00      	cmp	r2, #0
 8009fee:	d1c3      	bne.n	8009f78 <_strtod_l+0x38>
 8009ff0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ff2:	9515      	str	r5, [sp, #84]	; 0x54
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f040 855f 	bne.w	800aab8 <_strtod_l+0xb78>
 8009ffa:	4642      	mov	r2, r8
 8009ffc:	464b      	mov	r3, r9
 8009ffe:	e7e3      	b.n	8009fc8 <_strtod_l+0x88>
 800a000:	2100      	movs	r1, #0
 800a002:	e7ef      	b.n	8009fe4 <_strtod_l+0xa4>
 800a004:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a006:	b13a      	cbz	r2, 800a018 <_strtod_l+0xd8>
 800a008:	2135      	movs	r1, #53	; 0x35
 800a00a:	a818      	add	r0, sp, #96	; 0x60
 800a00c:	f7ff ff37 	bl	8009e7e <__copybits>
 800a010:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a012:	4620      	mov	r0, r4
 800a014:	f7ff fb0a 	bl	800962c <_Bfree>
 800a018:	3f01      	subs	r7, #1
 800a01a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a01c:	2f04      	cmp	r7, #4
 800a01e:	d806      	bhi.n	800a02e <_strtod_l+0xee>
 800a020:	e8df f007 	tbb	[pc, r7]
 800a024:	201d0314 	.word	0x201d0314
 800a028:	14          	.byte	0x14
 800a029:	00          	.byte	0x00
 800a02a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a02e:	05e9      	lsls	r1, r5, #23
 800a030:	bf48      	it	mi
 800a032:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a036:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a03a:	0d1b      	lsrs	r3, r3, #20
 800a03c:	051b      	lsls	r3, r3, #20
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1b9      	bne.n	8009fb6 <_strtod_l+0x76>
 800a042:	f7fe fb05 	bl	8008650 <__errno>
 800a046:	2322      	movs	r3, #34	; 0x22
 800a048:	6003      	str	r3, [r0, #0]
 800a04a:	e7b4      	b.n	8009fb6 <_strtod_l+0x76>
 800a04c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a050:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a054:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a058:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a05c:	e7e7      	b.n	800a02e <_strtod_l+0xee>
 800a05e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a1d8 <_strtod_l+0x298>
 800a062:	e7e4      	b.n	800a02e <_strtod_l+0xee>
 800a064:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a068:	f04f 38ff 	mov.w	r8, #4294967295
 800a06c:	e7df      	b.n	800a02e <_strtod_l+0xee>
 800a06e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a070:	1c5a      	adds	r2, r3, #1
 800a072:	9215      	str	r2, [sp, #84]	; 0x54
 800a074:	785b      	ldrb	r3, [r3, #1]
 800a076:	2b30      	cmp	r3, #48	; 0x30
 800a078:	d0f9      	beq.n	800a06e <_strtod_l+0x12e>
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d09b      	beq.n	8009fb6 <_strtod_l+0x76>
 800a07e:	2301      	movs	r3, #1
 800a080:	f04f 0a00 	mov.w	sl, #0
 800a084:	9304      	str	r3, [sp, #16]
 800a086:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a088:	930b      	str	r3, [sp, #44]	; 0x2c
 800a08a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a08e:	46d3      	mov	fp, sl
 800a090:	220a      	movs	r2, #10
 800a092:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a094:	7806      	ldrb	r6, [r0, #0]
 800a096:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a09a:	b2d9      	uxtb	r1, r3
 800a09c:	2909      	cmp	r1, #9
 800a09e:	d926      	bls.n	800a0ee <_strtod_l+0x1ae>
 800a0a0:	494c      	ldr	r1, [pc, #304]	; (800a1d4 <_strtod_l+0x294>)
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f000 ffe6 	bl	800b074 <strncmp>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d030      	beq.n	800a10e <_strtod_l+0x1ce>
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	4632      	mov	r2, r6
 800a0b0:	9005      	str	r0, [sp, #20]
 800a0b2:	465e      	mov	r6, fp
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2a65      	cmp	r2, #101	; 0x65
 800a0b8:	d001      	beq.n	800a0be <_strtod_l+0x17e>
 800a0ba:	2a45      	cmp	r2, #69	; 0x45
 800a0bc:	d113      	bne.n	800a0e6 <_strtod_l+0x1a6>
 800a0be:	b91e      	cbnz	r6, 800a0c8 <_strtod_l+0x188>
 800a0c0:	9a04      	ldr	r2, [sp, #16]
 800a0c2:	4302      	orrs	r2, r0
 800a0c4:	d094      	beq.n	8009ff0 <_strtod_l+0xb0>
 800a0c6:	2600      	movs	r6, #0
 800a0c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a0ca:	1c6a      	adds	r2, r5, #1
 800a0cc:	9215      	str	r2, [sp, #84]	; 0x54
 800a0ce:	786a      	ldrb	r2, [r5, #1]
 800a0d0:	2a2b      	cmp	r2, #43	; 0x2b
 800a0d2:	d074      	beq.n	800a1be <_strtod_l+0x27e>
 800a0d4:	2a2d      	cmp	r2, #45	; 0x2d
 800a0d6:	d078      	beq.n	800a1ca <_strtod_l+0x28a>
 800a0d8:	f04f 0c00 	mov.w	ip, #0
 800a0dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a0e0:	2909      	cmp	r1, #9
 800a0e2:	d97f      	bls.n	800a1e4 <_strtod_l+0x2a4>
 800a0e4:	9515      	str	r5, [sp, #84]	; 0x54
 800a0e6:	2700      	movs	r7, #0
 800a0e8:	e09e      	b.n	800a228 <_strtod_l+0x2e8>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	e7c8      	b.n	800a080 <_strtod_l+0x140>
 800a0ee:	f1bb 0f08 	cmp.w	fp, #8
 800a0f2:	bfd8      	it	le
 800a0f4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a0f6:	f100 0001 	add.w	r0, r0, #1
 800a0fa:	bfda      	itte	le
 800a0fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800a100:	9309      	strle	r3, [sp, #36]	; 0x24
 800a102:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a106:	f10b 0b01 	add.w	fp, fp, #1
 800a10a:	9015      	str	r0, [sp, #84]	; 0x54
 800a10c:	e7c1      	b.n	800a092 <_strtod_l+0x152>
 800a10e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	9215      	str	r2, [sp, #84]	; 0x54
 800a114:	785a      	ldrb	r2, [r3, #1]
 800a116:	f1bb 0f00 	cmp.w	fp, #0
 800a11a:	d037      	beq.n	800a18c <_strtod_l+0x24c>
 800a11c:	9005      	str	r0, [sp, #20]
 800a11e:	465e      	mov	r6, fp
 800a120:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a124:	2b09      	cmp	r3, #9
 800a126:	d912      	bls.n	800a14e <_strtod_l+0x20e>
 800a128:	2301      	movs	r3, #1
 800a12a:	e7c4      	b.n	800a0b6 <_strtod_l+0x176>
 800a12c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a12e:	1c5a      	adds	r2, r3, #1
 800a130:	9215      	str	r2, [sp, #84]	; 0x54
 800a132:	785a      	ldrb	r2, [r3, #1]
 800a134:	3001      	adds	r0, #1
 800a136:	2a30      	cmp	r2, #48	; 0x30
 800a138:	d0f8      	beq.n	800a12c <_strtod_l+0x1ec>
 800a13a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a13e:	2b08      	cmp	r3, #8
 800a140:	f200 84c1 	bhi.w	800aac6 <_strtod_l+0xb86>
 800a144:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a146:	9005      	str	r0, [sp, #20]
 800a148:	2000      	movs	r0, #0
 800a14a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a14c:	4606      	mov	r6, r0
 800a14e:	3a30      	subs	r2, #48	; 0x30
 800a150:	f100 0301 	add.w	r3, r0, #1
 800a154:	d014      	beq.n	800a180 <_strtod_l+0x240>
 800a156:	9905      	ldr	r1, [sp, #20]
 800a158:	4419      	add	r1, r3
 800a15a:	9105      	str	r1, [sp, #20]
 800a15c:	4633      	mov	r3, r6
 800a15e:	eb00 0c06 	add.w	ip, r0, r6
 800a162:	210a      	movs	r1, #10
 800a164:	4563      	cmp	r3, ip
 800a166:	d113      	bne.n	800a190 <_strtod_l+0x250>
 800a168:	1833      	adds	r3, r6, r0
 800a16a:	2b08      	cmp	r3, #8
 800a16c:	f106 0601 	add.w	r6, r6, #1
 800a170:	4406      	add	r6, r0
 800a172:	dc1a      	bgt.n	800a1aa <_strtod_l+0x26a>
 800a174:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a176:	230a      	movs	r3, #10
 800a178:	fb03 2301 	mla	r3, r3, r1, r2
 800a17c:	9309      	str	r3, [sp, #36]	; 0x24
 800a17e:	2300      	movs	r3, #0
 800a180:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a182:	1c51      	adds	r1, r2, #1
 800a184:	9115      	str	r1, [sp, #84]	; 0x54
 800a186:	7852      	ldrb	r2, [r2, #1]
 800a188:	4618      	mov	r0, r3
 800a18a:	e7c9      	b.n	800a120 <_strtod_l+0x1e0>
 800a18c:	4658      	mov	r0, fp
 800a18e:	e7d2      	b.n	800a136 <_strtod_l+0x1f6>
 800a190:	2b08      	cmp	r3, #8
 800a192:	f103 0301 	add.w	r3, r3, #1
 800a196:	dc03      	bgt.n	800a1a0 <_strtod_l+0x260>
 800a198:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a19a:	434f      	muls	r7, r1
 800a19c:	9709      	str	r7, [sp, #36]	; 0x24
 800a19e:	e7e1      	b.n	800a164 <_strtod_l+0x224>
 800a1a0:	2b10      	cmp	r3, #16
 800a1a2:	bfd8      	it	le
 800a1a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a1a8:	e7dc      	b.n	800a164 <_strtod_l+0x224>
 800a1aa:	2e10      	cmp	r6, #16
 800a1ac:	bfdc      	itt	le
 800a1ae:	230a      	movle	r3, #10
 800a1b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a1b4:	e7e3      	b.n	800a17e <_strtod_l+0x23e>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	9305      	str	r3, [sp, #20]
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e780      	b.n	800a0c0 <_strtod_l+0x180>
 800a1be:	f04f 0c00 	mov.w	ip, #0
 800a1c2:	1caa      	adds	r2, r5, #2
 800a1c4:	9215      	str	r2, [sp, #84]	; 0x54
 800a1c6:	78aa      	ldrb	r2, [r5, #2]
 800a1c8:	e788      	b.n	800a0dc <_strtod_l+0x19c>
 800a1ca:	f04f 0c01 	mov.w	ip, #1
 800a1ce:	e7f8      	b.n	800a1c2 <_strtod_l+0x282>
 800a1d0:	0800f008 	.word	0x0800f008
 800a1d4:	0800f004 	.word	0x0800f004
 800a1d8:	7ff00000 	.word	0x7ff00000
 800a1dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a1de:	1c51      	adds	r1, r2, #1
 800a1e0:	9115      	str	r1, [sp, #84]	; 0x54
 800a1e2:	7852      	ldrb	r2, [r2, #1]
 800a1e4:	2a30      	cmp	r2, #48	; 0x30
 800a1e6:	d0f9      	beq.n	800a1dc <_strtod_l+0x29c>
 800a1e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a1ec:	2908      	cmp	r1, #8
 800a1ee:	f63f af7a 	bhi.w	800a0e6 <_strtod_l+0x1a6>
 800a1f2:	3a30      	subs	r2, #48	; 0x30
 800a1f4:	9208      	str	r2, [sp, #32]
 800a1f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a1f8:	920c      	str	r2, [sp, #48]	; 0x30
 800a1fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a1fc:	1c57      	adds	r7, r2, #1
 800a1fe:	9715      	str	r7, [sp, #84]	; 0x54
 800a200:	7852      	ldrb	r2, [r2, #1]
 800a202:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a206:	f1be 0f09 	cmp.w	lr, #9
 800a20a:	d938      	bls.n	800a27e <_strtod_l+0x33e>
 800a20c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a20e:	1a7f      	subs	r7, r7, r1
 800a210:	2f08      	cmp	r7, #8
 800a212:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a216:	dc03      	bgt.n	800a220 <_strtod_l+0x2e0>
 800a218:	9908      	ldr	r1, [sp, #32]
 800a21a:	428f      	cmp	r7, r1
 800a21c:	bfa8      	it	ge
 800a21e:	460f      	movge	r7, r1
 800a220:	f1bc 0f00 	cmp.w	ip, #0
 800a224:	d000      	beq.n	800a228 <_strtod_l+0x2e8>
 800a226:	427f      	negs	r7, r7
 800a228:	2e00      	cmp	r6, #0
 800a22a:	d14f      	bne.n	800a2cc <_strtod_l+0x38c>
 800a22c:	9904      	ldr	r1, [sp, #16]
 800a22e:	4301      	orrs	r1, r0
 800a230:	f47f aec1 	bne.w	8009fb6 <_strtod_l+0x76>
 800a234:	2b00      	cmp	r3, #0
 800a236:	f47f aedb 	bne.w	8009ff0 <_strtod_l+0xb0>
 800a23a:	2a69      	cmp	r2, #105	; 0x69
 800a23c:	d029      	beq.n	800a292 <_strtod_l+0x352>
 800a23e:	dc26      	bgt.n	800a28e <_strtod_l+0x34e>
 800a240:	2a49      	cmp	r2, #73	; 0x49
 800a242:	d026      	beq.n	800a292 <_strtod_l+0x352>
 800a244:	2a4e      	cmp	r2, #78	; 0x4e
 800a246:	f47f aed3 	bne.w	8009ff0 <_strtod_l+0xb0>
 800a24a:	499b      	ldr	r1, [pc, #620]	; (800a4b8 <_strtod_l+0x578>)
 800a24c:	a815      	add	r0, sp, #84	; 0x54
 800a24e:	f001 fa27 	bl	800b6a0 <__match>
 800a252:	2800      	cmp	r0, #0
 800a254:	f43f aecc 	beq.w	8009ff0 <_strtod_l+0xb0>
 800a258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	2b28      	cmp	r3, #40	; 0x28
 800a25e:	d12f      	bne.n	800a2c0 <_strtod_l+0x380>
 800a260:	4996      	ldr	r1, [pc, #600]	; (800a4bc <_strtod_l+0x57c>)
 800a262:	aa18      	add	r2, sp, #96	; 0x60
 800a264:	a815      	add	r0, sp, #84	; 0x54
 800a266:	f001 fa2f 	bl	800b6c8 <__hexnan>
 800a26a:	2805      	cmp	r0, #5
 800a26c:	d128      	bne.n	800a2c0 <_strtod_l+0x380>
 800a26e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a270:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a274:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a278:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a27c:	e69b      	b.n	8009fb6 <_strtod_l+0x76>
 800a27e:	9f08      	ldr	r7, [sp, #32]
 800a280:	210a      	movs	r1, #10
 800a282:	fb01 2107 	mla	r1, r1, r7, r2
 800a286:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a28a:	9208      	str	r2, [sp, #32]
 800a28c:	e7b5      	b.n	800a1fa <_strtod_l+0x2ba>
 800a28e:	2a6e      	cmp	r2, #110	; 0x6e
 800a290:	e7d9      	b.n	800a246 <_strtod_l+0x306>
 800a292:	498b      	ldr	r1, [pc, #556]	; (800a4c0 <_strtod_l+0x580>)
 800a294:	a815      	add	r0, sp, #84	; 0x54
 800a296:	f001 fa03 	bl	800b6a0 <__match>
 800a29a:	2800      	cmp	r0, #0
 800a29c:	f43f aea8 	beq.w	8009ff0 <_strtod_l+0xb0>
 800a2a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2a2:	4988      	ldr	r1, [pc, #544]	; (800a4c4 <_strtod_l+0x584>)
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	a815      	add	r0, sp, #84	; 0x54
 800a2a8:	9315      	str	r3, [sp, #84]	; 0x54
 800a2aa:	f001 f9f9 	bl	800b6a0 <__match>
 800a2ae:	b910      	cbnz	r0, 800a2b6 <_strtod_l+0x376>
 800a2b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	9315      	str	r3, [sp, #84]	; 0x54
 800a2b6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a4d4 <_strtod_l+0x594>
 800a2ba:	f04f 0800 	mov.w	r8, #0
 800a2be:	e67a      	b.n	8009fb6 <_strtod_l+0x76>
 800a2c0:	4881      	ldr	r0, [pc, #516]	; (800a4c8 <_strtod_l+0x588>)
 800a2c2:	f000 ff09 	bl	800b0d8 <nan>
 800a2c6:	ec59 8b10 	vmov	r8, r9, d0
 800a2ca:	e674      	b.n	8009fb6 <_strtod_l+0x76>
 800a2cc:	9b05      	ldr	r3, [sp, #20]
 800a2ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2d0:	1afb      	subs	r3, r7, r3
 800a2d2:	f1bb 0f00 	cmp.w	fp, #0
 800a2d6:	bf08      	it	eq
 800a2d8:	46b3      	moveq	fp, r6
 800a2da:	2e10      	cmp	r6, #16
 800a2dc:	9308      	str	r3, [sp, #32]
 800a2de:	4635      	mov	r5, r6
 800a2e0:	bfa8      	it	ge
 800a2e2:	2510      	movge	r5, #16
 800a2e4:	f7f6 f90e 	bl	8000504 <__aeabi_ui2d>
 800a2e8:	2e09      	cmp	r6, #9
 800a2ea:	4680      	mov	r8, r0
 800a2ec:	4689      	mov	r9, r1
 800a2ee:	dd13      	ble.n	800a318 <_strtod_l+0x3d8>
 800a2f0:	4b76      	ldr	r3, [pc, #472]	; (800a4cc <_strtod_l+0x58c>)
 800a2f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a2f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a2fa:	f7f6 f97d 	bl	80005f8 <__aeabi_dmul>
 800a2fe:	4680      	mov	r8, r0
 800a300:	4650      	mov	r0, sl
 800a302:	4689      	mov	r9, r1
 800a304:	f7f6 f8fe 	bl	8000504 <__aeabi_ui2d>
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4640      	mov	r0, r8
 800a30e:	4649      	mov	r1, r9
 800a310:	f7f5 ffbc 	bl	800028c <__adddf3>
 800a314:	4680      	mov	r8, r0
 800a316:	4689      	mov	r9, r1
 800a318:	2e0f      	cmp	r6, #15
 800a31a:	dc38      	bgt.n	800a38e <_strtod_l+0x44e>
 800a31c:	9b08      	ldr	r3, [sp, #32]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f43f ae49 	beq.w	8009fb6 <_strtod_l+0x76>
 800a324:	dd24      	ble.n	800a370 <_strtod_l+0x430>
 800a326:	2b16      	cmp	r3, #22
 800a328:	dc0b      	bgt.n	800a342 <_strtod_l+0x402>
 800a32a:	4968      	ldr	r1, [pc, #416]	; (800a4cc <_strtod_l+0x58c>)
 800a32c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a330:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a334:	4642      	mov	r2, r8
 800a336:	464b      	mov	r3, r9
 800a338:	f7f6 f95e 	bl	80005f8 <__aeabi_dmul>
 800a33c:	4680      	mov	r8, r0
 800a33e:	4689      	mov	r9, r1
 800a340:	e639      	b.n	8009fb6 <_strtod_l+0x76>
 800a342:	9a08      	ldr	r2, [sp, #32]
 800a344:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a348:	4293      	cmp	r3, r2
 800a34a:	db20      	blt.n	800a38e <_strtod_l+0x44e>
 800a34c:	4c5f      	ldr	r4, [pc, #380]	; (800a4cc <_strtod_l+0x58c>)
 800a34e:	f1c6 060f 	rsb	r6, r6, #15
 800a352:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a356:	4642      	mov	r2, r8
 800a358:	464b      	mov	r3, r9
 800a35a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a35e:	f7f6 f94b 	bl	80005f8 <__aeabi_dmul>
 800a362:	9b08      	ldr	r3, [sp, #32]
 800a364:	1b9e      	subs	r6, r3, r6
 800a366:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a36a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a36e:	e7e3      	b.n	800a338 <_strtod_l+0x3f8>
 800a370:	9b08      	ldr	r3, [sp, #32]
 800a372:	3316      	adds	r3, #22
 800a374:	db0b      	blt.n	800a38e <_strtod_l+0x44e>
 800a376:	9b05      	ldr	r3, [sp, #20]
 800a378:	1bdf      	subs	r7, r3, r7
 800a37a:	4b54      	ldr	r3, [pc, #336]	; (800a4cc <_strtod_l+0x58c>)
 800a37c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a380:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a384:	4640      	mov	r0, r8
 800a386:	4649      	mov	r1, r9
 800a388:	f7f6 fa60 	bl	800084c <__aeabi_ddiv>
 800a38c:	e7d6      	b.n	800a33c <_strtod_l+0x3fc>
 800a38e:	9b08      	ldr	r3, [sp, #32]
 800a390:	1b75      	subs	r5, r6, r5
 800a392:	441d      	add	r5, r3
 800a394:	2d00      	cmp	r5, #0
 800a396:	dd70      	ble.n	800a47a <_strtod_l+0x53a>
 800a398:	f015 030f 	ands.w	r3, r5, #15
 800a39c:	d00a      	beq.n	800a3b4 <_strtod_l+0x474>
 800a39e:	494b      	ldr	r1, [pc, #300]	; (800a4cc <_strtod_l+0x58c>)
 800a3a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a3a4:	4642      	mov	r2, r8
 800a3a6:	464b      	mov	r3, r9
 800a3a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3ac:	f7f6 f924 	bl	80005f8 <__aeabi_dmul>
 800a3b0:	4680      	mov	r8, r0
 800a3b2:	4689      	mov	r9, r1
 800a3b4:	f035 050f 	bics.w	r5, r5, #15
 800a3b8:	d04d      	beq.n	800a456 <_strtod_l+0x516>
 800a3ba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a3be:	dd22      	ble.n	800a406 <_strtod_l+0x4c6>
 800a3c0:	2500      	movs	r5, #0
 800a3c2:	46ab      	mov	fp, r5
 800a3c4:	9509      	str	r5, [sp, #36]	; 0x24
 800a3c6:	9505      	str	r5, [sp, #20]
 800a3c8:	2322      	movs	r3, #34	; 0x22
 800a3ca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a4d4 <_strtod_l+0x594>
 800a3ce:	6023      	str	r3, [r4, #0]
 800a3d0:	f04f 0800 	mov.w	r8, #0
 800a3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f43f aded 	beq.w	8009fb6 <_strtod_l+0x76>
 800a3dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f7ff f924 	bl	800962c <_Bfree>
 800a3e4:	9905      	ldr	r1, [sp, #20]
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f7ff f920 	bl	800962c <_Bfree>
 800a3ec:	4659      	mov	r1, fp
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f7ff f91c 	bl	800962c <_Bfree>
 800a3f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f7ff f918 	bl	800962c <_Bfree>
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	4620      	mov	r0, r4
 800a400:	f7ff f914 	bl	800962c <_Bfree>
 800a404:	e5d7      	b.n	8009fb6 <_strtod_l+0x76>
 800a406:	4b32      	ldr	r3, [pc, #200]	; (800a4d0 <_strtod_l+0x590>)
 800a408:	9304      	str	r3, [sp, #16]
 800a40a:	2300      	movs	r3, #0
 800a40c:	112d      	asrs	r5, r5, #4
 800a40e:	4640      	mov	r0, r8
 800a410:	4649      	mov	r1, r9
 800a412:	469a      	mov	sl, r3
 800a414:	2d01      	cmp	r5, #1
 800a416:	dc21      	bgt.n	800a45c <_strtod_l+0x51c>
 800a418:	b10b      	cbz	r3, 800a41e <_strtod_l+0x4de>
 800a41a:	4680      	mov	r8, r0
 800a41c:	4689      	mov	r9, r1
 800a41e:	492c      	ldr	r1, [pc, #176]	; (800a4d0 <_strtod_l+0x590>)
 800a420:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a424:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a428:	4642      	mov	r2, r8
 800a42a:	464b      	mov	r3, r9
 800a42c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a430:	f7f6 f8e2 	bl	80005f8 <__aeabi_dmul>
 800a434:	4b27      	ldr	r3, [pc, #156]	; (800a4d4 <_strtod_l+0x594>)
 800a436:	460a      	mov	r2, r1
 800a438:	400b      	ands	r3, r1
 800a43a:	4927      	ldr	r1, [pc, #156]	; (800a4d8 <_strtod_l+0x598>)
 800a43c:	428b      	cmp	r3, r1
 800a43e:	4680      	mov	r8, r0
 800a440:	d8be      	bhi.n	800a3c0 <_strtod_l+0x480>
 800a442:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a446:	428b      	cmp	r3, r1
 800a448:	bf86      	itte	hi
 800a44a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a4dc <_strtod_l+0x59c>
 800a44e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a452:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a456:	2300      	movs	r3, #0
 800a458:	9304      	str	r3, [sp, #16]
 800a45a:	e07b      	b.n	800a554 <_strtod_l+0x614>
 800a45c:	07ea      	lsls	r2, r5, #31
 800a45e:	d505      	bpl.n	800a46c <_strtod_l+0x52c>
 800a460:	9b04      	ldr	r3, [sp, #16]
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	f7f6 f8c7 	bl	80005f8 <__aeabi_dmul>
 800a46a:	2301      	movs	r3, #1
 800a46c:	9a04      	ldr	r2, [sp, #16]
 800a46e:	3208      	adds	r2, #8
 800a470:	f10a 0a01 	add.w	sl, sl, #1
 800a474:	106d      	asrs	r5, r5, #1
 800a476:	9204      	str	r2, [sp, #16]
 800a478:	e7cc      	b.n	800a414 <_strtod_l+0x4d4>
 800a47a:	d0ec      	beq.n	800a456 <_strtod_l+0x516>
 800a47c:	426d      	negs	r5, r5
 800a47e:	f015 020f 	ands.w	r2, r5, #15
 800a482:	d00a      	beq.n	800a49a <_strtod_l+0x55a>
 800a484:	4b11      	ldr	r3, [pc, #68]	; (800a4cc <_strtod_l+0x58c>)
 800a486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a48a:	4640      	mov	r0, r8
 800a48c:	4649      	mov	r1, r9
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	f7f6 f9db 	bl	800084c <__aeabi_ddiv>
 800a496:	4680      	mov	r8, r0
 800a498:	4689      	mov	r9, r1
 800a49a:	112d      	asrs	r5, r5, #4
 800a49c:	d0db      	beq.n	800a456 <_strtod_l+0x516>
 800a49e:	2d1f      	cmp	r5, #31
 800a4a0:	dd1e      	ble.n	800a4e0 <_strtod_l+0x5a0>
 800a4a2:	2500      	movs	r5, #0
 800a4a4:	46ab      	mov	fp, r5
 800a4a6:	9509      	str	r5, [sp, #36]	; 0x24
 800a4a8:	9505      	str	r5, [sp, #20]
 800a4aa:	2322      	movs	r3, #34	; 0x22
 800a4ac:	f04f 0800 	mov.w	r8, #0
 800a4b0:	f04f 0900 	mov.w	r9, #0
 800a4b4:	6023      	str	r3, [r4, #0]
 800a4b6:	e78d      	b.n	800a3d4 <_strtod_l+0x494>
 800a4b8:	0800edf1 	.word	0x0800edf1
 800a4bc:	0800f01c 	.word	0x0800f01c
 800a4c0:	0800ede9 	.word	0x0800ede9
 800a4c4:	0800ee20 	.word	0x0800ee20
 800a4c8:	0800f1ad 	.word	0x0800f1ad
 800a4cc:	0800ef30 	.word	0x0800ef30
 800a4d0:	0800ef08 	.word	0x0800ef08
 800a4d4:	7ff00000 	.word	0x7ff00000
 800a4d8:	7ca00000 	.word	0x7ca00000
 800a4dc:	7fefffff 	.word	0x7fefffff
 800a4e0:	f015 0310 	ands.w	r3, r5, #16
 800a4e4:	bf18      	it	ne
 800a4e6:	236a      	movne	r3, #106	; 0x6a
 800a4e8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a88c <_strtod_l+0x94c>
 800a4ec:	9304      	str	r3, [sp, #16]
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	07ea      	lsls	r2, r5, #31
 800a4f6:	d504      	bpl.n	800a502 <_strtod_l+0x5c2>
 800a4f8:	e9da 2300 	ldrd	r2, r3, [sl]
 800a4fc:	f7f6 f87c 	bl	80005f8 <__aeabi_dmul>
 800a500:	2301      	movs	r3, #1
 800a502:	106d      	asrs	r5, r5, #1
 800a504:	f10a 0a08 	add.w	sl, sl, #8
 800a508:	d1f4      	bne.n	800a4f4 <_strtod_l+0x5b4>
 800a50a:	b10b      	cbz	r3, 800a510 <_strtod_l+0x5d0>
 800a50c:	4680      	mov	r8, r0
 800a50e:	4689      	mov	r9, r1
 800a510:	9b04      	ldr	r3, [sp, #16]
 800a512:	b1bb      	cbz	r3, 800a544 <_strtod_l+0x604>
 800a514:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a518:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	4649      	mov	r1, r9
 800a520:	dd10      	ble.n	800a544 <_strtod_l+0x604>
 800a522:	2b1f      	cmp	r3, #31
 800a524:	f340 811e 	ble.w	800a764 <_strtod_l+0x824>
 800a528:	2b34      	cmp	r3, #52	; 0x34
 800a52a:	bfde      	ittt	le
 800a52c:	f04f 33ff 	movle.w	r3, #4294967295
 800a530:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a534:	4093      	lslle	r3, r2
 800a536:	f04f 0800 	mov.w	r8, #0
 800a53a:	bfcc      	ite	gt
 800a53c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a540:	ea03 0901 	andle.w	r9, r3, r1
 800a544:	2200      	movs	r2, #0
 800a546:	2300      	movs	r3, #0
 800a548:	4640      	mov	r0, r8
 800a54a:	4649      	mov	r1, r9
 800a54c:	f7f6 fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a550:	2800      	cmp	r0, #0
 800a552:	d1a6      	bne.n	800a4a2 <_strtod_l+0x562>
 800a554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a55a:	4633      	mov	r3, r6
 800a55c:	465a      	mov	r2, fp
 800a55e:	4620      	mov	r0, r4
 800a560:	f7ff f8cc 	bl	80096fc <__s2b>
 800a564:	9009      	str	r0, [sp, #36]	; 0x24
 800a566:	2800      	cmp	r0, #0
 800a568:	f43f af2a 	beq.w	800a3c0 <_strtod_l+0x480>
 800a56c:	9a08      	ldr	r2, [sp, #32]
 800a56e:	9b05      	ldr	r3, [sp, #20]
 800a570:	2a00      	cmp	r2, #0
 800a572:	eba3 0307 	sub.w	r3, r3, r7
 800a576:	bfa8      	it	ge
 800a578:	2300      	movge	r3, #0
 800a57a:	930c      	str	r3, [sp, #48]	; 0x30
 800a57c:	2500      	movs	r5, #0
 800a57e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a582:	9312      	str	r3, [sp, #72]	; 0x48
 800a584:	46ab      	mov	fp, r5
 800a586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a588:	4620      	mov	r0, r4
 800a58a:	6859      	ldr	r1, [r3, #4]
 800a58c:	f7ff f80e 	bl	80095ac <_Balloc>
 800a590:	9005      	str	r0, [sp, #20]
 800a592:	2800      	cmp	r0, #0
 800a594:	f43f af18 	beq.w	800a3c8 <_strtod_l+0x488>
 800a598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59a:	691a      	ldr	r2, [r3, #16]
 800a59c:	3202      	adds	r2, #2
 800a59e:	f103 010c 	add.w	r1, r3, #12
 800a5a2:	0092      	lsls	r2, r2, #2
 800a5a4:	300c      	adds	r0, #12
 800a5a6:	f000 fd87 	bl	800b0b8 <memcpy>
 800a5aa:	ec49 8b10 	vmov	d0, r8, r9
 800a5ae:	aa18      	add	r2, sp, #96	; 0x60
 800a5b0:	a917      	add	r1, sp, #92	; 0x5c
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f7ff fbd6 	bl	8009d64 <__d2b>
 800a5b8:	ec49 8b18 	vmov	d8, r8, r9
 800a5bc:	9016      	str	r0, [sp, #88]	; 0x58
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	f43f af02 	beq.w	800a3c8 <_strtod_l+0x488>
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f7ff f930 	bl	800982c <__i2b>
 800a5cc:	4683      	mov	fp, r0
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	f43f aefa 	beq.w	800a3c8 <_strtod_l+0x488>
 800a5d4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a5d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a5d8:	2e00      	cmp	r6, #0
 800a5da:	bfab      	itete	ge
 800a5dc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a5de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a5e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a5e2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a5e6:	bfac      	ite	ge
 800a5e8:	eb06 0a03 	addge.w	sl, r6, r3
 800a5ec:	1b9f      	sublt	r7, r3, r6
 800a5ee:	9b04      	ldr	r3, [sp, #16]
 800a5f0:	1af6      	subs	r6, r6, r3
 800a5f2:	4416      	add	r6, r2
 800a5f4:	4ba0      	ldr	r3, [pc, #640]	; (800a878 <_strtod_l+0x938>)
 800a5f6:	3e01      	subs	r6, #1
 800a5f8:	429e      	cmp	r6, r3
 800a5fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a5fe:	f280 80c4 	bge.w	800a78a <_strtod_l+0x84a>
 800a602:	1b9b      	subs	r3, r3, r6
 800a604:	2b1f      	cmp	r3, #31
 800a606:	eba2 0203 	sub.w	r2, r2, r3
 800a60a:	f04f 0101 	mov.w	r1, #1
 800a60e:	f300 80b0 	bgt.w	800a772 <_strtod_l+0x832>
 800a612:	fa01 f303 	lsl.w	r3, r1, r3
 800a616:	930e      	str	r3, [sp, #56]	; 0x38
 800a618:	2300      	movs	r3, #0
 800a61a:	930d      	str	r3, [sp, #52]	; 0x34
 800a61c:	eb0a 0602 	add.w	r6, sl, r2
 800a620:	9b04      	ldr	r3, [sp, #16]
 800a622:	45b2      	cmp	sl, r6
 800a624:	4417      	add	r7, r2
 800a626:	441f      	add	r7, r3
 800a628:	4653      	mov	r3, sl
 800a62a:	bfa8      	it	ge
 800a62c:	4633      	movge	r3, r6
 800a62e:	42bb      	cmp	r3, r7
 800a630:	bfa8      	it	ge
 800a632:	463b      	movge	r3, r7
 800a634:	2b00      	cmp	r3, #0
 800a636:	bfc2      	ittt	gt
 800a638:	1af6      	subgt	r6, r6, r3
 800a63a:	1aff      	subgt	r7, r7, r3
 800a63c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a642:	2b00      	cmp	r3, #0
 800a644:	dd17      	ble.n	800a676 <_strtod_l+0x736>
 800a646:	4659      	mov	r1, fp
 800a648:	461a      	mov	r2, r3
 800a64a:	4620      	mov	r0, r4
 800a64c:	f7ff f9ae 	bl	80099ac <__pow5mult>
 800a650:	4683      	mov	fp, r0
 800a652:	2800      	cmp	r0, #0
 800a654:	f43f aeb8 	beq.w	800a3c8 <_strtod_l+0x488>
 800a658:	4601      	mov	r1, r0
 800a65a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a65c:	4620      	mov	r0, r4
 800a65e:	f7ff f8fb 	bl	8009858 <__multiply>
 800a662:	900b      	str	r0, [sp, #44]	; 0x2c
 800a664:	2800      	cmp	r0, #0
 800a666:	f43f aeaf 	beq.w	800a3c8 <_strtod_l+0x488>
 800a66a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a66c:	4620      	mov	r0, r4
 800a66e:	f7fe ffdd 	bl	800962c <_Bfree>
 800a672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a674:	9316      	str	r3, [sp, #88]	; 0x58
 800a676:	2e00      	cmp	r6, #0
 800a678:	f300 808c 	bgt.w	800a794 <_strtod_l+0x854>
 800a67c:	9b08      	ldr	r3, [sp, #32]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	dd08      	ble.n	800a694 <_strtod_l+0x754>
 800a682:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a684:	9905      	ldr	r1, [sp, #20]
 800a686:	4620      	mov	r0, r4
 800a688:	f7ff f990 	bl	80099ac <__pow5mult>
 800a68c:	9005      	str	r0, [sp, #20]
 800a68e:	2800      	cmp	r0, #0
 800a690:	f43f ae9a 	beq.w	800a3c8 <_strtod_l+0x488>
 800a694:	2f00      	cmp	r7, #0
 800a696:	dd08      	ble.n	800a6aa <_strtod_l+0x76a>
 800a698:	9905      	ldr	r1, [sp, #20]
 800a69a:	463a      	mov	r2, r7
 800a69c:	4620      	mov	r0, r4
 800a69e:	f7ff f9df 	bl	8009a60 <__lshift>
 800a6a2:	9005      	str	r0, [sp, #20]
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	f43f ae8f 	beq.w	800a3c8 <_strtod_l+0x488>
 800a6aa:	f1ba 0f00 	cmp.w	sl, #0
 800a6ae:	dd08      	ble.n	800a6c2 <_strtod_l+0x782>
 800a6b0:	4659      	mov	r1, fp
 800a6b2:	4652      	mov	r2, sl
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f7ff f9d3 	bl	8009a60 <__lshift>
 800a6ba:	4683      	mov	fp, r0
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	f43f ae83 	beq.w	800a3c8 <_strtod_l+0x488>
 800a6c2:	9a05      	ldr	r2, [sp, #20]
 800a6c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f7ff fa52 	bl	8009b70 <__mdiff>
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f43f ae7a 	beq.w	800a3c8 <_strtod_l+0x488>
 800a6d4:	68c3      	ldr	r3, [r0, #12]
 800a6d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6d8:	2300      	movs	r3, #0
 800a6da:	60c3      	str	r3, [r0, #12]
 800a6dc:	4659      	mov	r1, fp
 800a6de:	f7ff fa2b 	bl	8009b38 <__mcmp>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	da60      	bge.n	800a7a8 <_strtod_l+0x868>
 800a6e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6e8:	ea53 0308 	orrs.w	r3, r3, r8
 800a6ec:	f040 8084 	bne.w	800a7f8 <_strtod_l+0x8b8>
 800a6f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d17f      	bne.n	800a7f8 <_strtod_l+0x8b8>
 800a6f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6fc:	0d1b      	lsrs	r3, r3, #20
 800a6fe:	051b      	lsls	r3, r3, #20
 800a700:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a704:	d978      	bls.n	800a7f8 <_strtod_l+0x8b8>
 800a706:	696b      	ldr	r3, [r5, #20]
 800a708:	b913      	cbnz	r3, 800a710 <_strtod_l+0x7d0>
 800a70a:	692b      	ldr	r3, [r5, #16]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	dd73      	ble.n	800a7f8 <_strtod_l+0x8b8>
 800a710:	4629      	mov	r1, r5
 800a712:	2201      	movs	r2, #1
 800a714:	4620      	mov	r0, r4
 800a716:	f7ff f9a3 	bl	8009a60 <__lshift>
 800a71a:	4659      	mov	r1, fp
 800a71c:	4605      	mov	r5, r0
 800a71e:	f7ff fa0b 	bl	8009b38 <__mcmp>
 800a722:	2800      	cmp	r0, #0
 800a724:	dd68      	ble.n	800a7f8 <_strtod_l+0x8b8>
 800a726:	9904      	ldr	r1, [sp, #16]
 800a728:	4a54      	ldr	r2, [pc, #336]	; (800a87c <_strtod_l+0x93c>)
 800a72a:	464b      	mov	r3, r9
 800a72c:	2900      	cmp	r1, #0
 800a72e:	f000 8084 	beq.w	800a83a <_strtod_l+0x8fa>
 800a732:	ea02 0109 	and.w	r1, r2, r9
 800a736:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a73a:	dc7e      	bgt.n	800a83a <_strtod_l+0x8fa>
 800a73c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a740:	f77f aeb3 	ble.w	800a4aa <_strtod_l+0x56a>
 800a744:	4b4e      	ldr	r3, [pc, #312]	; (800a880 <_strtod_l+0x940>)
 800a746:	4640      	mov	r0, r8
 800a748:	4649      	mov	r1, r9
 800a74a:	2200      	movs	r2, #0
 800a74c:	f7f5 ff54 	bl	80005f8 <__aeabi_dmul>
 800a750:	4b4a      	ldr	r3, [pc, #296]	; (800a87c <_strtod_l+0x93c>)
 800a752:	400b      	ands	r3, r1
 800a754:	4680      	mov	r8, r0
 800a756:	4689      	mov	r9, r1
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f47f ae3f 	bne.w	800a3dc <_strtod_l+0x49c>
 800a75e:	2322      	movs	r3, #34	; 0x22
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	e63b      	b.n	800a3dc <_strtod_l+0x49c>
 800a764:	f04f 32ff 	mov.w	r2, #4294967295
 800a768:	fa02 f303 	lsl.w	r3, r2, r3
 800a76c:	ea03 0808 	and.w	r8, r3, r8
 800a770:	e6e8      	b.n	800a544 <_strtod_l+0x604>
 800a772:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a776:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a77a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a77e:	36e2      	adds	r6, #226	; 0xe2
 800a780:	fa01 f306 	lsl.w	r3, r1, r6
 800a784:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a788:	e748      	b.n	800a61c <_strtod_l+0x6dc>
 800a78a:	2100      	movs	r1, #0
 800a78c:	2301      	movs	r3, #1
 800a78e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a792:	e743      	b.n	800a61c <_strtod_l+0x6dc>
 800a794:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a796:	4632      	mov	r2, r6
 800a798:	4620      	mov	r0, r4
 800a79a:	f7ff f961 	bl	8009a60 <__lshift>
 800a79e:	9016      	str	r0, [sp, #88]	; 0x58
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	f47f af6b 	bne.w	800a67c <_strtod_l+0x73c>
 800a7a6:	e60f      	b.n	800a3c8 <_strtod_l+0x488>
 800a7a8:	46ca      	mov	sl, r9
 800a7aa:	d171      	bne.n	800a890 <_strtod_l+0x950>
 800a7ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7b2:	b352      	cbz	r2, 800a80a <_strtod_l+0x8ca>
 800a7b4:	4a33      	ldr	r2, [pc, #204]	; (800a884 <_strtod_l+0x944>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d12a      	bne.n	800a810 <_strtod_l+0x8d0>
 800a7ba:	9b04      	ldr	r3, [sp, #16]
 800a7bc:	4641      	mov	r1, r8
 800a7be:	b1fb      	cbz	r3, 800a800 <_strtod_l+0x8c0>
 800a7c0:	4b2e      	ldr	r3, [pc, #184]	; (800a87c <_strtod_l+0x93c>)
 800a7c2:	ea09 0303 	and.w	r3, r9, r3
 800a7c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ce:	d81a      	bhi.n	800a806 <_strtod_l+0x8c6>
 800a7d0:	0d1b      	lsrs	r3, r3, #20
 800a7d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7da:	4299      	cmp	r1, r3
 800a7dc:	d118      	bne.n	800a810 <_strtod_l+0x8d0>
 800a7de:	4b2a      	ldr	r3, [pc, #168]	; (800a888 <_strtod_l+0x948>)
 800a7e0:	459a      	cmp	sl, r3
 800a7e2:	d102      	bne.n	800a7ea <_strtod_l+0x8aa>
 800a7e4:	3101      	adds	r1, #1
 800a7e6:	f43f adef 	beq.w	800a3c8 <_strtod_l+0x488>
 800a7ea:	4b24      	ldr	r3, [pc, #144]	; (800a87c <_strtod_l+0x93c>)
 800a7ec:	ea0a 0303 	and.w	r3, sl, r3
 800a7f0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a7f4:	f04f 0800 	mov.w	r8, #0
 800a7f8:	9b04      	ldr	r3, [sp, #16]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1a2      	bne.n	800a744 <_strtod_l+0x804>
 800a7fe:	e5ed      	b.n	800a3dc <_strtod_l+0x49c>
 800a800:	f04f 33ff 	mov.w	r3, #4294967295
 800a804:	e7e9      	b.n	800a7da <_strtod_l+0x89a>
 800a806:	4613      	mov	r3, r2
 800a808:	e7e7      	b.n	800a7da <_strtod_l+0x89a>
 800a80a:	ea53 0308 	orrs.w	r3, r3, r8
 800a80e:	d08a      	beq.n	800a726 <_strtod_l+0x7e6>
 800a810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a812:	b1e3      	cbz	r3, 800a84e <_strtod_l+0x90e>
 800a814:	ea13 0f0a 	tst.w	r3, sl
 800a818:	d0ee      	beq.n	800a7f8 <_strtod_l+0x8b8>
 800a81a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a81c:	9a04      	ldr	r2, [sp, #16]
 800a81e:	4640      	mov	r0, r8
 800a820:	4649      	mov	r1, r9
 800a822:	b1c3      	cbz	r3, 800a856 <_strtod_l+0x916>
 800a824:	f7ff fb6f 	bl	8009f06 <sulp>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	ec51 0b18 	vmov	r0, r1, d8
 800a830:	f7f5 fd2c 	bl	800028c <__adddf3>
 800a834:	4680      	mov	r8, r0
 800a836:	4689      	mov	r9, r1
 800a838:	e7de      	b.n	800a7f8 <_strtod_l+0x8b8>
 800a83a:	4013      	ands	r3, r2
 800a83c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a840:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a844:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a848:	f04f 38ff 	mov.w	r8, #4294967295
 800a84c:	e7d4      	b.n	800a7f8 <_strtod_l+0x8b8>
 800a84e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a850:	ea13 0f08 	tst.w	r3, r8
 800a854:	e7e0      	b.n	800a818 <_strtod_l+0x8d8>
 800a856:	f7ff fb56 	bl	8009f06 <sulp>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	ec51 0b18 	vmov	r0, r1, d8
 800a862:	f7f5 fd11 	bl	8000288 <__aeabi_dsub>
 800a866:	2200      	movs	r2, #0
 800a868:	2300      	movs	r3, #0
 800a86a:	4680      	mov	r8, r0
 800a86c:	4689      	mov	r9, r1
 800a86e:	f7f6 f92b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a872:	2800      	cmp	r0, #0
 800a874:	d0c0      	beq.n	800a7f8 <_strtod_l+0x8b8>
 800a876:	e618      	b.n	800a4aa <_strtod_l+0x56a>
 800a878:	fffffc02 	.word	0xfffffc02
 800a87c:	7ff00000 	.word	0x7ff00000
 800a880:	39500000 	.word	0x39500000
 800a884:	000fffff 	.word	0x000fffff
 800a888:	7fefffff 	.word	0x7fefffff
 800a88c:	0800f030 	.word	0x0800f030
 800a890:	4659      	mov	r1, fp
 800a892:	4628      	mov	r0, r5
 800a894:	f7ff fac0 	bl	8009e18 <__ratio>
 800a898:	ec57 6b10 	vmov	r6, r7, d0
 800a89c:	ee10 0a10 	vmov	r0, s0
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	f7f6 f922 	bl	8000af0 <__aeabi_dcmple>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d071      	beq.n	800a994 <_strtod_l+0xa54>
 800a8b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d17c      	bne.n	800a9b0 <_strtod_l+0xa70>
 800a8b6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ba:	d15a      	bne.n	800a972 <_strtod_l+0xa32>
 800a8bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d15d      	bne.n	800a980 <_strtod_l+0xa40>
 800a8c4:	4b90      	ldr	r3, [pc, #576]	; (800ab08 <_strtod_l+0xbc8>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	4639      	mov	r1, r7
 800a8cc:	f7f6 f906 	bl	8000adc <__aeabi_dcmplt>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d15c      	bne.n	800a98e <_strtod_l+0xa4e>
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	4639      	mov	r1, r7
 800a8d8:	4b8c      	ldr	r3, [pc, #560]	; (800ab0c <_strtod_l+0xbcc>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f7f5 fe8c 	bl	80005f8 <__aeabi_dmul>
 800a8e0:	4606      	mov	r6, r0
 800a8e2:	460f      	mov	r7, r1
 800a8e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a8e8:	9606      	str	r6, [sp, #24]
 800a8ea:	9307      	str	r3, [sp, #28]
 800a8ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a8f4:	4b86      	ldr	r3, [pc, #536]	; (800ab10 <_strtod_l+0xbd0>)
 800a8f6:	ea0a 0303 	and.w	r3, sl, r3
 800a8fa:	930d      	str	r3, [sp, #52]	; 0x34
 800a8fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8fe:	4b85      	ldr	r3, [pc, #532]	; (800ab14 <_strtod_l+0xbd4>)
 800a900:	429a      	cmp	r2, r3
 800a902:	f040 8090 	bne.w	800aa26 <_strtod_l+0xae6>
 800a906:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a90a:	ec49 8b10 	vmov	d0, r8, r9
 800a90e:	f7ff f9b9 	bl	8009c84 <__ulp>
 800a912:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a916:	ec51 0b10 	vmov	r0, r1, d0
 800a91a:	f7f5 fe6d 	bl	80005f8 <__aeabi_dmul>
 800a91e:	4642      	mov	r2, r8
 800a920:	464b      	mov	r3, r9
 800a922:	f7f5 fcb3 	bl	800028c <__adddf3>
 800a926:	460b      	mov	r3, r1
 800a928:	4979      	ldr	r1, [pc, #484]	; (800ab10 <_strtod_l+0xbd0>)
 800a92a:	4a7b      	ldr	r2, [pc, #492]	; (800ab18 <_strtod_l+0xbd8>)
 800a92c:	4019      	ands	r1, r3
 800a92e:	4291      	cmp	r1, r2
 800a930:	4680      	mov	r8, r0
 800a932:	d944      	bls.n	800a9be <_strtod_l+0xa7e>
 800a934:	ee18 2a90 	vmov	r2, s17
 800a938:	4b78      	ldr	r3, [pc, #480]	; (800ab1c <_strtod_l+0xbdc>)
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d104      	bne.n	800a948 <_strtod_l+0xa08>
 800a93e:	ee18 3a10 	vmov	r3, s16
 800a942:	3301      	adds	r3, #1
 800a944:	f43f ad40 	beq.w	800a3c8 <_strtod_l+0x488>
 800a948:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ab1c <_strtod_l+0xbdc>
 800a94c:	f04f 38ff 	mov.w	r8, #4294967295
 800a950:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a952:	4620      	mov	r0, r4
 800a954:	f7fe fe6a 	bl	800962c <_Bfree>
 800a958:	9905      	ldr	r1, [sp, #20]
 800a95a:	4620      	mov	r0, r4
 800a95c:	f7fe fe66 	bl	800962c <_Bfree>
 800a960:	4659      	mov	r1, fp
 800a962:	4620      	mov	r0, r4
 800a964:	f7fe fe62 	bl	800962c <_Bfree>
 800a968:	4629      	mov	r1, r5
 800a96a:	4620      	mov	r0, r4
 800a96c:	f7fe fe5e 	bl	800962c <_Bfree>
 800a970:	e609      	b.n	800a586 <_strtod_l+0x646>
 800a972:	f1b8 0f01 	cmp.w	r8, #1
 800a976:	d103      	bne.n	800a980 <_strtod_l+0xa40>
 800a978:	f1b9 0f00 	cmp.w	r9, #0
 800a97c:	f43f ad95 	beq.w	800a4aa <_strtod_l+0x56a>
 800a980:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800aad8 <_strtod_l+0xb98>
 800a984:	4f60      	ldr	r7, [pc, #384]	; (800ab08 <_strtod_l+0xbc8>)
 800a986:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a98a:	2600      	movs	r6, #0
 800a98c:	e7ae      	b.n	800a8ec <_strtod_l+0x9ac>
 800a98e:	4f5f      	ldr	r7, [pc, #380]	; (800ab0c <_strtod_l+0xbcc>)
 800a990:	2600      	movs	r6, #0
 800a992:	e7a7      	b.n	800a8e4 <_strtod_l+0x9a4>
 800a994:	4b5d      	ldr	r3, [pc, #372]	; (800ab0c <_strtod_l+0xbcc>)
 800a996:	4630      	mov	r0, r6
 800a998:	4639      	mov	r1, r7
 800a99a:	2200      	movs	r2, #0
 800a99c:	f7f5 fe2c 	bl	80005f8 <__aeabi_dmul>
 800a9a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	460f      	mov	r7, r1
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d09c      	beq.n	800a8e4 <_strtod_l+0x9a4>
 800a9aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a9ae:	e79d      	b.n	800a8ec <_strtod_l+0x9ac>
 800a9b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800aae0 <_strtod_l+0xba0>
 800a9b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9b8:	ec57 6b17 	vmov	r6, r7, d7
 800a9bc:	e796      	b.n	800a8ec <_strtod_l+0x9ac>
 800a9be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a9c2:	9b04      	ldr	r3, [sp, #16]
 800a9c4:	46ca      	mov	sl, r9
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1c2      	bne.n	800a950 <_strtod_l+0xa10>
 800a9ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9d0:	0d1b      	lsrs	r3, r3, #20
 800a9d2:	051b      	lsls	r3, r3, #20
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d1bb      	bne.n	800a950 <_strtod_l+0xa10>
 800a9d8:	4630      	mov	r0, r6
 800a9da:	4639      	mov	r1, r7
 800a9dc:	f7f6 f96c 	bl	8000cb8 <__aeabi_d2lz>
 800a9e0:	f7f5 fddc 	bl	800059c <__aeabi_l2d>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	f7f5 fc4c 	bl	8000288 <__aeabi_dsub>
 800a9f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9f6:	ea43 0308 	orr.w	r3, r3, r8
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	460f      	mov	r7, r1
 800aa00:	d054      	beq.n	800aaac <_strtod_l+0xb6c>
 800aa02:	a339      	add	r3, pc, #228	; (adr r3, 800aae8 <_strtod_l+0xba8>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f7f6 f868 	bl	8000adc <__aeabi_dcmplt>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	f47f ace5 	bne.w	800a3dc <_strtod_l+0x49c>
 800aa12:	a337      	add	r3, pc, #220	; (adr r3, 800aaf0 <_strtod_l+0xbb0>)
 800aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa18:	4630      	mov	r0, r6
 800aa1a:	4639      	mov	r1, r7
 800aa1c:	f7f6 f87c 	bl	8000b18 <__aeabi_dcmpgt>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d095      	beq.n	800a950 <_strtod_l+0xa10>
 800aa24:	e4da      	b.n	800a3dc <_strtod_l+0x49c>
 800aa26:	9b04      	ldr	r3, [sp, #16]
 800aa28:	b333      	cbz	r3, 800aa78 <_strtod_l+0xb38>
 800aa2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aa30:	d822      	bhi.n	800aa78 <_strtod_l+0xb38>
 800aa32:	a331      	add	r3, pc, #196	; (adr r3, 800aaf8 <_strtod_l+0xbb8>)
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f7f6 f858 	bl	8000af0 <__aeabi_dcmple>
 800aa40:	b1a0      	cbz	r0, 800aa6c <_strtod_l+0xb2c>
 800aa42:	4639      	mov	r1, r7
 800aa44:	4630      	mov	r0, r6
 800aa46:	f7f6 f8af 	bl	8000ba8 <__aeabi_d2uiz>
 800aa4a:	2801      	cmp	r0, #1
 800aa4c:	bf38      	it	cc
 800aa4e:	2001      	movcc	r0, #1
 800aa50:	f7f5 fd58 	bl	8000504 <__aeabi_ui2d>
 800aa54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa56:	4606      	mov	r6, r0
 800aa58:	460f      	mov	r7, r1
 800aa5a:	bb23      	cbnz	r3, 800aaa6 <_strtod_l+0xb66>
 800aa5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa60:	9010      	str	r0, [sp, #64]	; 0x40
 800aa62:	9311      	str	r3, [sp, #68]	; 0x44
 800aa64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa68:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800aa6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa70:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800aa74:	1a9b      	subs	r3, r3, r2
 800aa76:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa78:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aa7c:	eeb0 0a48 	vmov.f32	s0, s16
 800aa80:	eef0 0a68 	vmov.f32	s1, s17
 800aa84:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800aa88:	f7ff f8fc 	bl	8009c84 <__ulp>
 800aa8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aa90:	ec53 2b10 	vmov	r2, r3, d0
 800aa94:	f7f5 fdb0 	bl	80005f8 <__aeabi_dmul>
 800aa98:	ec53 2b18 	vmov	r2, r3, d8
 800aa9c:	f7f5 fbf6 	bl	800028c <__adddf3>
 800aaa0:	4680      	mov	r8, r0
 800aaa2:	4689      	mov	r9, r1
 800aaa4:	e78d      	b.n	800a9c2 <_strtod_l+0xa82>
 800aaa6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800aaaa:	e7db      	b.n	800aa64 <_strtod_l+0xb24>
 800aaac:	a314      	add	r3, pc, #80	; (adr r3, 800ab00 <_strtod_l+0xbc0>)
 800aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab2:	f7f6 f813 	bl	8000adc <__aeabi_dcmplt>
 800aab6:	e7b3      	b.n	800aa20 <_strtod_l+0xae0>
 800aab8:	2300      	movs	r3, #0
 800aaba:	930a      	str	r3, [sp, #40]	; 0x28
 800aabc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aabe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aac0:	6013      	str	r3, [r2, #0]
 800aac2:	f7ff ba7c 	b.w	8009fbe <_strtod_l+0x7e>
 800aac6:	2a65      	cmp	r2, #101	; 0x65
 800aac8:	f43f ab75 	beq.w	800a1b6 <_strtod_l+0x276>
 800aacc:	2a45      	cmp	r2, #69	; 0x45
 800aace:	f43f ab72 	beq.w	800a1b6 <_strtod_l+0x276>
 800aad2:	2301      	movs	r3, #1
 800aad4:	f7ff bbaa 	b.w	800a22c <_strtod_l+0x2ec>
 800aad8:	00000000 	.word	0x00000000
 800aadc:	bff00000 	.word	0xbff00000
 800aae0:	00000000 	.word	0x00000000
 800aae4:	3ff00000 	.word	0x3ff00000
 800aae8:	94a03595 	.word	0x94a03595
 800aaec:	3fdfffff 	.word	0x3fdfffff
 800aaf0:	35afe535 	.word	0x35afe535
 800aaf4:	3fe00000 	.word	0x3fe00000
 800aaf8:	ffc00000 	.word	0xffc00000
 800aafc:	41dfffff 	.word	0x41dfffff
 800ab00:	94a03595 	.word	0x94a03595
 800ab04:	3fcfffff 	.word	0x3fcfffff
 800ab08:	3ff00000 	.word	0x3ff00000
 800ab0c:	3fe00000 	.word	0x3fe00000
 800ab10:	7ff00000 	.word	0x7ff00000
 800ab14:	7fe00000 	.word	0x7fe00000
 800ab18:	7c9fffff 	.word	0x7c9fffff
 800ab1c:	7fefffff 	.word	0x7fefffff

0800ab20 <_strtod_r>:
 800ab20:	4b01      	ldr	r3, [pc, #4]	; (800ab28 <_strtod_r+0x8>)
 800ab22:	f7ff ba0d 	b.w	8009f40 <_strtod_l>
 800ab26:	bf00      	nop
 800ab28:	20000070 	.word	0x20000070

0800ab2c <_strtol_l.constprop.0>:
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab32:	d001      	beq.n	800ab38 <_strtol_l.constprop.0+0xc>
 800ab34:	2b24      	cmp	r3, #36	; 0x24
 800ab36:	d906      	bls.n	800ab46 <_strtol_l.constprop.0+0x1a>
 800ab38:	f7fd fd8a 	bl	8008650 <__errno>
 800ab3c:	2316      	movs	r3, #22
 800ab3e:	6003      	str	r3, [r0, #0]
 800ab40:	2000      	movs	r0, #0
 800ab42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab46:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac2c <_strtol_l.constprop.0+0x100>
 800ab4a:	460d      	mov	r5, r1
 800ab4c:	462e      	mov	r6, r5
 800ab4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab52:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ab56:	f017 0708 	ands.w	r7, r7, #8
 800ab5a:	d1f7      	bne.n	800ab4c <_strtol_l.constprop.0+0x20>
 800ab5c:	2c2d      	cmp	r4, #45	; 0x2d
 800ab5e:	d132      	bne.n	800abc6 <_strtol_l.constprop.0+0x9a>
 800ab60:	782c      	ldrb	r4, [r5, #0]
 800ab62:	2701      	movs	r7, #1
 800ab64:	1cb5      	adds	r5, r6, #2
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d05b      	beq.n	800ac22 <_strtol_l.constprop.0+0xf6>
 800ab6a:	2b10      	cmp	r3, #16
 800ab6c:	d109      	bne.n	800ab82 <_strtol_l.constprop.0+0x56>
 800ab6e:	2c30      	cmp	r4, #48	; 0x30
 800ab70:	d107      	bne.n	800ab82 <_strtol_l.constprop.0+0x56>
 800ab72:	782c      	ldrb	r4, [r5, #0]
 800ab74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ab78:	2c58      	cmp	r4, #88	; 0x58
 800ab7a:	d14d      	bne.n	800ac18 <_strtol_l.constprop.0+0xec>
 800ab7c:	786c      	ldrb	r4, [r5, #1]
 800ab7e:	2310      	movs	r3, #16
 800ab80:	3502      	adds	r5, #2
 800ab82:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ab86:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab8a:	f04f 0e00 	mov.w	lr, #0
 800ab8e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ab92:	4676      	mov	r6, lr
 800ab94:	fb03 8a19 	mls	sl, r3, r9, r8
 800ab98:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ab9c:	f1bc 0f09 	cmp.w	ip, #9
 800aba0:	d816      	bhi.n	800abd0 <_strtol_l.constprop.0+0xa4>
 800aba2:	4664      	mov	r4, ip
 800aba4:	42a3      	cmp	r3, r4
 800aba6:	dd24      	ble.n	800abf2 <_strtol_l.constprop.0+0xc6>
 800aba8:	f1be 3fff 	cmp.w	lr, #4294967295
 800abac:	d008      	beq.n	800abc0 <_strtol_l.constprop.0+0x94>
 800abae:	45b1      	cmp	r9, r6
 800abb0:	d31c      	bcc.n	800abec <_strtol_l.constprop.0+0xc0>
 800abb2:	d101      	bne.n	800abb8 <_strtol_l.constprop.0+0x8c>
 800abb4:	45a2      	cmp	sl, r4
 800abb6:	db19      	blt.n	800abec <_strtol_l.constprop.0+0xc0>
 800abb8:	fb06 4603 	mla	r6, r6, r3, r4
 800abbc:	f04f 0e01 	mov.w	lr, #1
 800abc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abc4:	e7e8      	b.n	800ab98 <_strtol_l.constprop.0+0x6c>
 800abc6:	2c2b      	cmp	r4, #43	; 0x2b
 800abc8:	bf04      	itt	eq
 800abca:	782c      	ldrbeq	r4, [r5, #0]
 800abcc:	1cb5      	addeq	r5, r6, #2
 800abce:	e7ca      	b.n	800ab66 <_strtol_l.constprop.0+0x3a>
 800abd0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800abd4:	f1bc 0f19 	cmp.w	ip, #25
 800abd8:	d801      	bhi.n	800abde <_strtol_l.constprop.0+0xb2>
 800abda:	3c37      	subs	r4, #55	; 0x37
 800abdc:	e7e2      	b.n	800aba4 <_strtol_l.constprop.0+0x78>
 800abde:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800abe2:	f1bc 0f19 	cmp.w	ip, #25
 800abe6:	d804      	bhi.n	800abf2 <_strtol_l.constprop.0+0xc6>
 800abe8:	3c57      	subs	r4, #87	; 0x57
 800abea:	e7db      	b.n	800aba4 <_strtol_l.constprop.0+0x78>
 800abec:	f04f 3eff 	mov.w	lr, #4294967295
 800abf0:	e7e6      	b.n	800abc0 <_strtol_l.constprop.0+0x94>
 800abf2:	f1be 3fff 	cmp.w	lr, #4294967295
 800abf6:	d105      	bne.n	800ac04 <_strtol_l.constprop.0+0xd8>
 800abf8:	2322      	movs	r3, #34	; 0x22
 800abfa:	6003      	str	r3, [r0, #0]
 800abfc:	4646      	mov	r6, r8
 800abfe:	b942      	cbnz	r2, 800ac12 <_strtol_l.constprop.0+0xe6>
 800ac00:	4630      	mov	r0, r6
 800ac02:	e79e      	b.n	800ab42 <_strtol_l.constprop.0+0x16>
 800ac04:	b107      	cbz	r7, 800ac08 <_strtol_l.constprop.0+0xdc>
 800ac06:	4276      	negs	r6, r6
 800ac08:	2a00      	cmp	r2, #0
 800ac0a:	d0f9      	beq.n	800ac00 <_strtol_l.constprop.0+0xd4>
 800ac0c:	f1be 0f00 	cmp.w	lr, #0
 800ac10:	d000      	beq.n	800ac14 <_strtol_l.constprop.0+0xe8>
 800ac12:	1e69      	subs	r1, r5, #1
 800ac14:	6011      	str	r1, [r2, #0]
 800ac16:	e7f3      	b.n	800ac00 <_strtol_l.constprop.0+0xd4>
 800ac18:	2430      	movs	r4, #48	; 0x30
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1b1      	bne.n	800ab82 <_strtol_l.constprop.0+0x56>
 800ac1e:	2308      	movs	r3, #8
 800ac20:	e7af      	b.n	800ab82 <_strtol_l.constprop.0+0x56>
 800ac22:	2c30      	cmp	r4, #48	; 0x30
 800ac24:	d0a5      	beq.n	800ab72 <_strtol_l.constprop.0+0x46>
 800ac26:	230a      	movs	r3, #10
 800ac28:	e7ab      	b.n	800ab82 <_strtol_l.constprop.0+0x56>
 800ac2a:	bf00      	nop
 800ac2c:	0800f059 	.word	0x0800f059

0800ac30 <_strtol_r>:
 800ac30:	f7ff bf7c 	b.w	800ab2c <_strtol_l.constprop.0>

0800ac34 <__ssputs_r>:
 800ac34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac38:	688e      	ldr	r6, [r1, #8]
 800ac3a:	461f      	mov	r7, r3
 800ac3c:	42be      	cmp	r6, r7
 800ac3e:	680b      	ldr	r3, [r1, #0]
 800ac40:	4682      	mov	sl, r0
 800ac42:	460c      	mov	r4, r1
 800ac44:	4690      	mov	r8, r2
 800ac46:	d82c      	bhi.n	800aca2 <__ssputs_r+0x6e>
 800ac48:	898a      	ldrh	r2, [r1, #12]
 800ac4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac4e:	d026      	beq.n	800ac9e <__ssputs_r+0x6a>
 800ac50:	6965      	ldr	r5, [r4, #20]
 800ac52:	6909      	ldr	r1, [r1, #16]
 800ac54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac58:	eba3 0901 	sub.w	r9, r3, r1
 800ac5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac60:	1c7b      	adds	r3, r7, #1
 800ac62:	444b      	add	r3, r9
 800ac64:	106d      	asrs	r5, r5, #1
 800ac66:	429d      	cmp	r5, r3
 800ac68:	bf38      	it	cc
 800ac6a:	461d      	movcc	r5, r3
 800ac6c:	0553      	lsls	r3, r2, #21
 800ac6e:	d527      	bpl.n	800acc0 <__ssputs_r+0x8c>
 800ac70:	4629      	mov	r1, r5
 800ac72:	f7fe fc0f 	bl	8009494 <_malloc_r>
 800ac76:	4606      	mov	r6, r0
 800ac78:	b360      	cbz	r0, 800acd4 <__ssputs_r+0xa0>
 800ac7a:	6921      	ldr	r1, [r4, #16]
 800ac7c:	464a      	mov	r2, r9
 800ac7e:	f000 fa1b 	bl	800b0b8 <memcpy>
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac8c:	81a3      	strh	r3, [r4, #12]
 800ac8e:	6126      	str	r6, [r4, #16]
 800ac90:	6165      	str	r5, [r4, #20]
 800ac92:	444e      	add	r6, r9
 800ac94:	eba5 0509 	sub.w	r5, r5, r9
 800ac98:	6026      	str	r6, [r4, #0]
 800ac9a:	60a5      	str	r5, [r4, #8]
 800ac9c:	463e      	mov	r6, r7
 800ac9e:	42be      	cmp	r6, r7
 800aca0:	d900      	bls.n	800aca4 <__ssputs_r+0x70>
 800aca2:	463e      	mov	r6, r7
 800aca4:	6820      	ldr	r0, [r4, #0]
 800aca6:	4632      	mov	r2, r6
 800aca8:	4641      	mov	r1, r8
 800acaa:	f000 f9c9 	bl	800b040 <memmove>
 800acae:	68a3      	ldr	r3, [r4, #8]
 800acb0:	1b9b      	subs	r3, r3, r6
 800acb2:	60a3      	str	r3, [r4, #8]
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	4433      	add	r3, r6
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	2000      	movs	r0, #0
 800acbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc0:	462a      	mov	r2, r5
 800acc2:	f000 fdae 	bl	800b822 <_realloc_r>
 800acc6:	4606      	mov	r6, r0
 800acc8:	2800      	cmp	r0, #0
 800acca:	d1e0      	bne.n	800ac8e <__ssputs_r+0x5a>
 800accc:	6921      	ldr	r1, [r4, #16]
 800acce:	4650      	mov	r0, sl
 800acd0:	f7fe fb6c 	bl	80093ac <_free_r>
 800acd4:	230c      	movs	r3, #12
 800acd6:	f8ca 3000 	str.w	r3, [sl]
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ace0:	81a3      	strh	r3, [r4, #12]
 800ace2:	f04f 30ff 	mov.w	r0, #4294967295
 800ace6:	e7e9      	b.n	800acbc <__ssputs_r+0x88>

0800ace8 <_svfiprintf_r>:
 800ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acec:	4698      	mov	r8, r3
 800acee:	898b      	ldrh	r3, [r1, #12]
 800acf0:	061b      	lsls	r3, r3, #24
 800acf2:	b09d      	sub	sp, #116	; 0x74
 800acf4:	4607      	mov	r7, r0
 800acf6:	460d      	mov	r5, r1
 800acf8:	4614      	mov	r4, r2
 800acfa:	d50e      	bpl.n	800ad1a <_svfiprintf_r+0x32>
 800acfc:	690b      	ldr	r3, [r1, #16]
 800acfe:	b963      	cbnz	r3, 800ad1a <_svfiprintf_r+0x32>
 800ad00:	2140      	movs	r1, #64	; 0x40
 800ad02:	f7fe fbc7 	bl	8009494 <_malloc_r>
 800ad06:	6028      	str	r0, [r5, #0]
 800ad08:	6128      	str	r0, [r5, #16]
 800ad0a:	b920      	cbnz	r0, 800ad16 <_svfiprintf_r+0x2e>
 800ad0c:	230c      	movs	r3, #12
 800ad0e:	603b      	str	r3, [r7, #0]
 800ad10:	f04f 30ff 	mov.w	r0, #4294967295
 800ad14:	e0d0      	b.n	800aeb8 <_svfiprintf_r+0x1d0>
 800ad16:	2340      	movs	r3, #64	; 0x40
 800ad18:	616b      	str	r3, [r5, #20]
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad1e:	2320      	movs	r3, #32
 800ad20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad28:	2330      	movs	r3, #48	; 0x30
 800ad2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aed0 <_svfiprintf_r+0x1e8>
 800ad2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad32:	f04f 0901 	mov.w	r9, #1
 800ad36:	4623      	mov	r3, r4
 800ad38:	469a      	mov	sl, r3
 800ad3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad3e:	b10a      	cbz	r2, 800ad44 <_svfiprintf_r+0x5c>
 800ad40:	2a25      	cmp	r2, #37	; 0x25
 800ad42:	d1f9      	bne.n	800ad38 <_svfiprintf_r+0x50>
 800ad44:	ebba 0b04 	subs.w	fp, sl, r4
 800ad48:	d00b      	beq.n	800ad62 <_svfiprintf_r+0x7a>
 800ad4a:	465b      	mov	r3, fp
 800ad4c:	4622      	mov	r2, r4
 800ad4e:	4629      	mov	r1, r5
 800ad50:	4638      	mov	r0, r7
 800ad52:	f7ff ff6f 	bl	800ac34 <__ssputs_r>
 800ad56:	3001      	adds	r0, #1
 800ad58:	f000 80a9 	beq.w	800aeae <_svfiprintf_r+0x1c6>
 800ad5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad5e:	445a      	add	r2, fp
 800ad60:	9209      	str	r2, [sp, #36]	; 0x24
 800ad62:	f89a 3000 	ldrb.w	r3, [sl]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f000 80a1 	beq.w	800aeae <_svfiprintf_r+0x1c6>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad76:	f10a 0a01 	add.w	sl, sl, #1
 800ad7a:	9304      	str	r3, [sp, #16]
 800ad7c:	9307      	str	r3, [sp, #28]
 800ad7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad82:	931a      	str	r3, [sp, #104]	; 0x68
 800ad84:	4654      	mov	r4, sl
 800ad86:	2205      	movs	r2, #5
 800ad88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad8c:	4850      	ldr	r0, [pc, #320]	; (800aed0 <_svfiprintf_r+0x1e8>)
 800ad8e:	f7f5 fa1f 	bl	80001d0 <memchr>
 800ad92:	9a04      	ldr	r2, [sp, #16]
 800ad94:	b9d8      	cbnz	r0, 800adce <_svfiprintf_r+0xe6>
 800ad96:	06d0      	lsls	r0, r2, #27
 800ad98:	bf44      	itt	mi
 800ad9a:	2320      	movmi	r3, #32
 800ad9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ada0:	0711      	lsls	r1, r2, #28
 800ada2:	bf44      	itt	mi
 800ada4:	232b      	movmi	r3, #43	; 0x2b
 800ada6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adaa:	f89a 3000 	ldrb.w	r3, [sl]
 800adae:	2b2a      	cmp	r3, #42	; 0x2a
 800adb0:	d015      	beq.n	800adde <_svfiprintf_r+0xf6>
 800adb2:	9a07      	ldr	r2, [sp, #28]
 800adb4:	4654      	mov	r4, sl
 800adb6:	2000      	movs	r0, #0
 800adb8:	f04f 0c0a 	mov.w	ip, #10
 800adbc:	4621      	mov	r1, r4
 800adbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adc2:	3b30      	subs	r3, #48	; 0x30
 800adc4:	2b09      	cmp	r3, #9
 800adc6:	d94d      	bls.n	800ae64 <_svfiprintf_r+0x17c>
 800adc8:	b1b0      	cbz	r0, 800adf8 <_svfiprintf_r+0x110>
 800adca:	9207      	str	r2, [sp, #28]
 800adcc:	e014      	b.n	800adf8 <_svfiprintf_r+0x110>
 800adce:	eba0 0308 	sub.w	r3, r0, r8
 800add2:	fa09 f303 	lsl.w	r3, r9, r3
 800add6:	4313      	orrs	r3, r2
 800add8:	9304      	str	r3, [sp, #16]
 800adda:	46a2      	mov	sl, r4
 800addc:	e7d2      	b.n	800ad84 <_svfiprintf_r+0x9c>
 800adde:	9b03      	ldr	r3, [sp, #12]
 800ade0:	1d19      	adds	r1, r3, #4
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	9103      	str	r1, [sp, #12]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	bfbb      	ittet	lt
 800adea:	425b      	neglt	r3, r3
 800adec:	f042 0202 	orrlt.w	r2, r2, #2
 800adf0:	9307      	strge	r3, [sp, #28]
 800adf2:	9307      	strlt	r3, [sp, #28]
 800adf4:	bfb8      	it	lt
 800adf6:	9204      	strlt	r2, [sp, #16]
 800adf8:	7823      	ldrb	r3, [r4, #0]
 800adfa:	2b2e      	cmp	r3, #46	; 0x2e
 800adfc:	d10c      	bne.n	800ae18 <_svfiprintf_r+0x130>
 800adfe:	7863      	ldrb	r3, [r4, #1]
 800ae00:	2b2a      	cmp	r3, #42	; 0x2a
 800ae02:	d134      	bne.n	800ae6e <_svfiprintf_r+0x186>
 800ae04:	9b03      	ldr	r3, [sp, #12]
 800ae06:	1d1a      	adds	r2, r3, #4
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	9203      	str	r2, [sp, #12]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	bfb8      	it	lt
 800ae10:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae14:	3402      	adds	r4, #2
 800ae16:	9305      	str	r3, [sp, #20]
 800ae18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aee0 <_svfiprintf_r+0x1f8>
 800ae1c:	7821      	ldrb	r1, [r4, #0]
 800ae1e:	2203      	movs	r2, #3
 800ae20:	4650      	mov	r0, sl
 800ae22:	f7f5 f9d5 	bl	80001d0 <memchr>
 800ae26:	b138      	cbz	r0, 800ae38 <_svfiprintf_r+0x150>
 800ae28:	9b04      	ldr	r3, [sp, #16]
 800ae2a:	eba0 000a 	sub.w	r0, r0, sl
 800ae2e:	2240      	movs	r2, #64	; 0x40
 800ae30:	4082      	lsls	r2, r0
 800ae32:	4313      	orrs	r3, r2
 800ae34:	3401      	adds	r4, #1
 800ae36:	9304      	str	r3, [sp, #16]
 800ae38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae3c:	4825      	ldr	r0, [pc, #148]	; (800aed4 <_svfiprintf_r+0x1ec>)
 800ae3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae42:	2206      	movs	r2, #6
 800ae44:	f7f5 f9c4 	bl	80001d0 <memchr>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d038      	beq.n	800aebe <_svfiprintf_r+0x1d6>
 800ae4c:	4b22      	ldr	r3, [pc, #136]	; (800aed8 <_svfiprintf_r+0x1f0>)
 800ae4e:	bb1b      	cbnz	r3, 800ae98 <_svfiprintf_r+0x1b0>
 800ae50:	9b03      	ldr	r3, [sp, #12]
 800ae52:	3307      	adds	r3, #7
 800ae54:	f023 0307 	bic.w	r3, r3, #7
 800ae58:	3308      	adds	r3, #8
 800ae5a:	9303      	str	r3, [sp, #12]
 800ae5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae5e:	4433      	add	r3, r6
 800ae60:	9309      	str	r3, [sp, #36]	; 0x24
 800ae62:	e768      	b.n	800ad36 <_svfiprintf_r+0x4e>
 800ae64:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae68:	460c      	mov	r4, r1
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	e7a6      	b.n	800adbc <_svfiprintf_r+0xd4>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	3401      	adds	r4, #1
 800ae72:	9305      	str	r3, [sp, #20]
 800ae74:	4619      	mov	r1, r3
 800ae76:	f04f 0c0a 	mov.w	ip, #10
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae80:	3a30      	subs	r2, #48	; 0x30
 800ae82:	2a09      	cmp	r2, #9
 800ae84:	d903      	bls.n	800ae8e <_svfiprintf_r+0x1a6>
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0c6      	beq.n	800ae18 <_svfiprintf_r+0x130>
 800ae8a:	9105      	str	r1, [sp, #20]
 800ae8c:	e7c4      	b.n	800ae18 <_svfiprintf_r+0x130>
 800ae8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae92:	4604      	mov	r4, r0
 800ae94:	2301      	movs	r3, #1
 800ae96:	e7f0      	b.n	800ae7a <_svfiprintf_r+0x192>
 800ae98:	ab03      	add	r3, sp, #12
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	462a      	mov	r2, r5
 800ae9e:	4b0f      	ldr	r3, [pc, #60]	; (800aedc <_svfiprintf_r+0x1f4>)
 800aea0:	a904      	add	r1, sp, #16
 800aea2:	4638      	mov	r0, r7
 800aea4:	f7fc fc52 	bl	800774c <_printf_float>
 800aea8:	1c42      	adds	r2, r0, #1
 800aeaa:	4606      	mov	r6, r0
 800aeac:	d1d6      	bne.n	800ae5c <_svfiprintf_r+0x174>
 800aeae:	89ab      	ldrh	r3, [r5, #12]
 800aeb0:	065b      	lsls	r3, r3, #25
 800aeb2:	f53f af2d 	bmi.w	800ad10 <_svfiprintf_r+0x28>
 800aeb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeb8:	b01d      	add	sp, #116	; 0x74
 800aeba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aebe:	ab03      	add	r3, sp, #12
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	462a      	mov	r2, r5
 800aec4:	4b05      	ldr	r3, [pc, #20]	; (800aedc <_svfiprintf_r+0x1f4>)
 800aec6:	a904      	add	r1, sp, #16
 800aec8:	4638      	mov	r0, r7
 800aeca:	f7fc fee3 	bl	8007c94 <_printf_i>
 800aece:	e7eb      	b.n	800aea8 <_svfiprintf_r+0x1c0>
 800aed0:	0800f159 	.word	0x0800f159
 800aed4:	0800f163 	.word	0x0800f163
 800aed8:	0800774d 	.word	0x0800774d
 800aedc:	0800ac35 	.word	0x0800ac35
 800aee0:	0800f15f 	.word	0x0800f15f

0800aee4 <__sflush_r>:
 800aee4:	898a      	ldrh	r2, [r1, #12]
 800aee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeea:	4605      	mov	r5, r0
 800aeec:	0710      	lsls	r0, r2, #28
 800aeee:	460c      	mov	r4, r1
 800aef0:	d458      	bmi.n	800afa4 <__sflush_r+0xc0>
 800aef2:	684b      	ldr	r3, [r1, #4]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dc05      	bgt.n	800af04 <__sflush_r+0x20>
 800aef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	dc02      	bgt.n	800af04 <__sflush_r+0x20>
 800aefe:	2000      	movs	r0, #0
 800af00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af06:	2e00      	cmp	r6, #0
 800af08:	d0f9      	beq.n	800aefe <__sflush_r+0x1a>
 800af0a:	2300      	movs	r3, #0
 800af0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af10:	682f      	ldr	r7, [r5, #0]
 800af12:	6a21      	ldr	r1, [r4, #32]
 800af14:	602b      	str	r3, [r5, #0]
 800af16:	d032      	beq.n	800af7e <__sflush_r+0x9a>
 800af18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	075a      	lsls	r2, r3, #29
 800af1e:	d505      	bpl.n	800af2c <__sflush_r+0x48>
 800af20:	6863      	ldr	r3, [r4, #4]
 800af22:	1ac0      	subs	r0, r0, r3
 800af24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af26:	b10b      	cbz	r3, 800af2c <__sflush_r+0x48>
 800af28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af2a:	1ac0      	subs	r0, r0, r3
 800af2c:	2300      	movs	r3, #0
 800af2e:	4602      	mov	r2, r0
 800af30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af32:	6a21      	ldr	r1, [r4, #32]
 800af34:	4628      	mov	r0, r5
 800af36:	47b0      	blx	r6
 800af38:	1c43      	adds	r3, r0, #1
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	d106      	bne.n	800af4c <__sflush_r+0x68>
 800af3e:	6829      	ldr	r1, [r5, #0]
 800af40:	291d      	cmp	r1, #29
 800af42:	d82b      	bhi.n	800af9c <__sflush_r+0xb8>
 800af44:	4a29      	ldr	r2, [pc, #164]	; (800afec <__sflush_r+0x108>)
 800af46:	410a      	asrs	r2, r1
 800af48:	07d6      	lsls	r6, r2, #31
 800af4a:	d427      	bmi.n	800af9c <__sflush_r+0xb8>
 800af4c:	2200      	movs	r2, #0
 800af4e:	6062      	str	r2, [r4, #4]
 800af50:	04d9      	lsls	r1, r3, #19
 800af52:	6922      	ldr	r2, [r4, #16]
 800af54:	6022      	str	r2, [r4, #0]
 800af56:	d504      	bpl.n	800af62 <__sflush_r+0x7e>
 800af58:	1c42      	adds	r2, r0, #1
 800af5a:	d101      	bne.n	800af60 <__sflush_r+0x7c>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	b903      	cbnz	r3, 800af62 <__sflush_r+0x7e>
 800af60:	6560      	str	r0, [r4, #84]	; 0x54
 800af62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af64:	602f      	str	r7, [r5, #0]
 800af66:	2900      	cmp	r1, #0
 800af68:	d0c9      	beq.n	800aefe <__sflush_r+0x1a>
 800af6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af6e:	4299      	cmp	r1, r3
 800af70:	d002      	beq.n	800af78 <__sflush_r+0x94>
 800af72:	4628      	mov	r0, r5
 800af74:	f7fe fa1a 	bl	80093ac <_free_r>
 800af78:	2000      	movs	r0, #0
 800af7a:	6360      	str	r0, [r4, #52]	; 0x34
 800af7c:	e7c0      	b.n	800af00 <__sflush_r+0x1c>
 800af7e:	2301      	movs	r3, #1
 800af80:	4628      	mov	r0, r5
 800af82:	47b0      	blx	r6
 800af84:	1c41      	adds	r1, r0, #1
 800af86:	d1c8      	bne.n	800af1a <__sflush_r+0x36>
 800af88:	682b      	ldr	r3, [r5, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0c5      	beq.n	800af1a <__sflush_r+0x36>
 800af8e:	2b1d      	cmp	r3, #29
 800af90:	d001      	beq.n	800af96 <__sflush_r+0xb2>
 800af92:	2b16      	cmp	r3, #22
 800af94:	d101      	bne.n	800af9a <__sflush_r+0xb6>
 800af96:	602f      	str	r7, [r5, #0]
 800af98:	e7b1      	b.n	800aefe <__sflush_r+0x1a>
 800af9a:	89a3      	ldrh	r3, [r4, #12]
 800af9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afa0:	81a3      	strh	r3, [r4, #12]
 800afa2:	e7ad      	b.n	800af00 <__sflush_r+0x1c>
 800afa4:	690f      	ldr	r7, [r1, #16]
 800afa6:	2f00      	cmp	r7, #0
 800afa8:	d0a9      	beq.n	800aefe <__sflush_r+0x1a>
 800afaa:	0793      	lsls	r3, r2, #30
 800afac:	680e      	ldr	r6, [r1, #0]
 800afae:	bf08      	it	eq
 800afb0:	694b      	ldreq	r3, [r1, #20]
 800afb2:	600f      	str	r7, [r1, #0]
 800afb4:	bf18      	it	ne
 800afb6:	2300      	movne	r3, #0
 800afb8:	eba6 0807 	sub.w	r8, r6, r7
 800afbc:	608b      	str	r3, [r1, #8]
 800afbe:	f1b8 0f00 	cmp.w	r8, #0
 800afc2:	dd9c      	ble.n	800aefe <__sflush_r+0x1a>
 800afc4:	6a21      	ldr	r1, [r4, #32]
 800afc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800afc8:	4643      	mov	r3, r8
 800afca:	463a      	mov	r2, r7
 800afcc:	4628      	mov	r0, r5
 800afce:	47b0      	blx	r6
 800afd0:	2800      	cmp	r0, #0
 800afd2:	dc06      	bgt.n	800afe2 <__sflush_r+0xfe>
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afda:	81a3      	strh	r3, [r4, #12]
 800afdc:	f04f 30ff 	mov.w	r0, #4294967295
 800afe0:	e78e      	b.n	800af00 <__sflush_r+0x1c>
 800afe2:	4407      	add	r7, r0
 800afe4:	eba8 0800 	sub.w	r8, r8, r0
 800afe8:	e7e9      	b.n	800afbe <__sflush_r+0xda>
 800afea:	bf00      	nop
 800afec:	dfbffffe 	.word	0xdfbffffe

0800aff0 <_fflush_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	690b      	ldr	r3, [r1, #16]
 800aff4:	4605      	mov	r5, r0
 800aff6:	460c      	mov	r4, r1
 800aff8:	b913      	cbnz	r3, 800b000 <_fflush_r+0x10>
 800affa:	2500      	movs	r5, #0
 800affc:	4628      	mov	r0, r5
 800affe:	bd38      	pop	{r3, r4, r5, pc}
 800b000:	b118      	cbz	r0, 800b00a <_fflush_r+0x1a>
 800b002:	6a03      	ldr	r3, [r0, #32]
 800b004:	b90b      	cbnz	r3, 800b00a <_fflush_r+0x1a>
 800b006:	f7fd fa03 	bl	8008410 <__sinit>
 800b00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d0f3      	beq.n	800affa <_fflush_r+0xa>
 800b012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b014:	07d0      	lsls	r0, r2, #31
 800b016:	d404      	bmi.n	800b022 <_fflush_r+0x32>
 800b018:	0599      	lsls	r1, r3, #22
 800b01a:	d402      	bmi.n	800b022 <_fflush_r+0x32>
 800b01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b01e:	f7fd fb42 	bl	80086a6 <__retarget_lock_acquire_recursive>
 800b022:	4628      	mov	r0, r5
 800b024:	4621      	mov	r1, r4
 800b026:	f7ff ff5d 	bl	800aee4 <__sflush_r>
 800b02a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b02c:	07da      	lsls	r2, r3, #31
 800b02e:	4605      	mov	r5, r0
 800b030:	d4e4      	bmi.n	800affc <_fflush_r+0xc>
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	059b      	lsls	r3, r3, #22
 800b036:	d4e1      	bmi.n	800affc <_fflush_r+0xc>
 800b038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b03a:	f7fd fb35 	bl	80086a8 <__retarget_lock_release_recursive>
 800b03e:	e7dd      	b.n	800affc <_fflush_r+0xc>

0800b040 <memmove>:
 800b040:	4288      	cmp	r0, r1
 800b042:	b510      	push	{r4, lr}
 800b044:	eb01 0402 	add.w	r4, r1, r2
 800b048:	d902      	bls.n	800b050 <memmove+0x10>
 800b04a:	4284      	cmp	r4, r0
 800b04c:	4623      	mov	r3, r4
 800b04e:	d807      	bhi.n	800b060 <memmove+0x20>
 800b050:	1e43      	subs	r3, r0, #1
 800b052:	42a1      	cmp	r1, r4
 800b054:	d008      	beq.n	800b068 <memmove+0x28>
 800b056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b05a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b05e:	e7f8      	b.n	800b052 <memmove+0x12>
 800b060:	4402      	add	r2, r0
 800b062:	4601      	mov	r1, r0
 800b064:	428a      	cmp	r2, r1
 800b066:	d100      	bne.n	800b06a <memmove+0x2a>
 800b068:	bd10      	pop	{r4, pc}
 800b06a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b06e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b072:	e7f7      	b.n	800b064 <memmove+0x24>

0800b074 <strncmp>:
 800b074:	b510      	push	{r4, lr}
 800b076:	b16a      	cbz	r2, 800b094 <strncmp+0x20>
 800b078:	3901      	subs	r1, #1
 800b07a:	1884      	adds	r4, r0, r2
 800b07c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b080:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b084:	429a      	cmp	r2, r3
 800b086:	d103      	bne.n	800b090 <strncmp+0x1c>
 800b088:	42a0      	cmp	r0, r4
 800b08a:	d001      	beq.n	800b090 <strncmp+0x1c>
 800b08c:	2a00      	cmp	r2, #0
 800b08e:	d1f5      	bne.n	800b07c <strncmp+0x8>
 800b090:	1ad0      	subs	r0, r2, r3
 800b092:	bd10      	pop	{r4, pc}
 800b094:	4610      	mov	r0, r2
 800b096:	e7fc      	b.n	800b092 <strncmp+0x1e>

0800b098 <_sbrk_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d06      	ldr	r5, [pc, #24]	; (800b0b4 <_sbrk_r+0x1c>)
 800b09c:	2300      	movs	r3, #0
 800b09e:	4604      	mov	r4, r0
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	602b      	str	r3, [r5, #0]
 800b0a4:	f7f7 fa72 	bl	800258c <_sbrk>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	d102      	bne.n	800b0b2 <_sbrk_r+0x1a>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	b103      	cbz	r3, 800b0b2 <_sbrk_r+0x1a>
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	2000066c 	.word	0x2000066c

0800b0b8 <memcpy>:
 800b0b8:	440a      	add	r2, r1
 800b0ba:	4291      	cmp	r1, r2
 800b0bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0c0:	d100      	bne.n	800b0c4 <memcpy+0xc>
 800b0c2:	4770      	bx	lr
 800b0c4:	b510      	push	{r4, lr}
 800b0c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0ce:	4291      	cmp	r1, r2
 800b0d0:	d1f9      	bne.n	800b0c6 <memcpy+0xe>
 800b0d2:	bd10      	pop	{r4, pc}
 800b0d4:	0000      	movs	r0, r0
	...

0800b0d8 <nan>:
 800b0d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b0e0 <nan+0x8>
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	00000000 	.word	0x00000000
 800b0e4:	7ff80000 	.word	0x7ff80000

0800b0e8 <__assert_func>:
 800b0e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0ea:	4614      	mov	r4, r2
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	4b09      	ldr	r3, [pc, #36]	; (800b114 <__assert_func+0x2c>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4605      	mov	r5, r0
 800b0f4:	68d8      	ldr	r0, [r3, #12]
 800b0f6:	b14c      	cbz	r4, 800b10c <__assert_func+0x24>
 800b0f8:	4b07      	ldr	r3, [pc, #28]	; (800b118 <__assert_func+0x30>)
 800b0fa:	9100      	str	r1, [sp, #0]
 800b0fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b100:	4906      	ldr	r1, [pc, #24]	; (800b11c <__assert_func+0x34>)
 800b102:	462b      	mov	r3, r5
 800b104:	f000 fbca 	bl	800b89c <fiprintf>
 800b108:	f000 fbda 	bl	800b8c0 <abort>
 800b10c:	4b04      	ldr	r3, [pc, #16]	; (800b120 <__assert_func+0x38>)
 800b10e:	461c      	mov	r4, r3
 800b110:	e7f3      	b.n	800b0fa <__assert_func+0x12>
 800b112:	bf00      	nop
 800b114:	2000006c 	.word	0x2000006c
 800b118:	0800f172 	.word	0x0800f172
 800b11c:	0800f17f 	.word	0x0800f17f
 800b120:	0800f1ad 	.word	0x0800f1ad

0800b124 <_calloc_r>:
 800b124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b126:	fba1 2402 	umull	r2, r4, r1, r2
 800b12a:	b94c      	cbnz	r4, 800b140 <_calloc_r+0x1c>
 800b12c:	4611      	mov	r1, r2
 800b12e:	9201      	str	r2, [sp, #4]
 800b130:	f7fe f9b0 	bl	8009494 <_malloc_r>
 800b134:	9a01      	ldr	r2, [sp, #4]
 800b136:	4605      	mov	r5, r0
 800b138:	b930      	cbnz	r0, 800b148 <_calloc_r+0x24>
 800b13a:	4628      	mov	r0, r5
 800b13c:	b003      	add	sp, #12
 800b13e:	bd30      	pop	{r4, r5, pc}
 800b140:	220c      	movs	r2, #12
 800b142:	6002      	str	r2, [r0, #0]
 800b144:	2500      	movs	r5, #0
 800b146:	e7f8      	b.n	800b13a <_calloc_r+0x16>
 800b148:	4621      	mov	r1, r4
 800b14a:	f7fd fa2e 	bl	80085aa <memset>
 800b14e:	e7f4      	b.n	800b13a <_calloc_r+0x16>

0800b150 <rshift>:
 800b150:	6903      	ldr	r3, [r0, #16]
 800b152:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b156:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b15a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b15e:	f100 0414 	add.w	r4, r0, #20
 800b162:	dd45      	ble.n	800b1f0 <rshift+0xa0>
 800b164:	f011 011f 	ands.w	r1, r1, #31
 800b168:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b16c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b170:	d10c      	bne.n	800b18c <rshift+0x3c>
 800b172:	f100 0710 	add.w	r7, r0, #16
 800b176:	4629      	mov	r1, r5
 800b178:	42b1      	cmp	r1, r6
 800b17a:	d334      	bcc.n	800b1e6 <rshift+0x96>
 800b17c:	1a9b      	subs	r3, r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	1eea      	subs	r2, r5, #3
 800b182:	4296      	cmp	r6, r2
 800b184:	bf38      	it	cc
 800b186:	2300      	movcc	r3, #0
 800b188:	4423      	add	r3, r4
 800b18a:	e015      	b.n	800b1b8 <rshift+0x68>
 800b18c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b190:	f1c1 0820 	rsb	r8, r1, #32
 800b194:	40cf      	lsrs	r7, r1
 800b196:	f105 0e04 	add.w	lr, r5, #4
 800b19a:	46a1      	mov	r9, r4
 800b19c:	4576      	cmp	r6, lr
 800b19e:	46f4      	mov	ip, lr
 800b1a0:	d815      	bhi.n	800b1ce <rshift+0x7e>
 800b1a2:	1a9a      	subs	r2, r3, r2
 800b1a4:	0092      	lsls	r2, r2, #2
 800b1a6:	3a04      	subs	r2, #4
 800b1a8:	3501      	adds	r5, #1
 800b1aa:	42ae      	cmp	r6, r5
 800b1ac:	bf38      	it	cc
 800b1ae:	2200      	movcc	r2, #0
 800b1b0:	18a3      	adds	r3, r4, r2
 800b1b2:	50a7      	str	r7, [r4, r2]
 800b1b4:	b107      	cbz	r7, 800b1b8 <rshift+0x68>
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	1b1a      	subs	r2, r3, r4
 800b1ba:	42a3      	cmp	r3, r4
 800b1bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1c0:	bf08      	it	eq
 800b1c2:	2300      	moveq	r3, #0
 800b1c4:	6102      	str	r2, [r0, #16]
 800b1c6:	bf08      	it	eq
 800b1c8:	6143      	streq	r3, [r0, #20]
 800b1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ce:	f8dc c000 	ldr.w	ip, [ip]
 800b1d2:	fa0c fc08 	lsl.w	ip, ip, r8
 800b1d6:	ea4c 0707 	orr.w	r7, ip, r7
 800b1da:	f849 7b04 	str.w	r7, [r9], #4
 800b1de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1e2:	40cf      	lsrs	r7, r1
 800b1e4:	e7da      	b.n	800b19c <rshift+0x4c>
 800b1e6:	f851 cb04 	ldr.w	ip, [r1], #4
 800b1ea:	f847 cf04 	str.w	ip, [r7, #4]!
 800b1ee:	e7c3      	b.n	800b178 <rshift+0x28>
 800b1f0:	4623      	mov	r3, r4
 800b1f2:	e7e1      	b.n	800b1b8 <rshift+0x68>

0800b1f4 <__hexdig_fun>:
 800b1f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b1f8:	2b09      	cmp	r3, #9
 800b1fa:	d802      	bhi.n	800b202 <__hexdig_fun+0xe>
 800b1fc:	3820      	subs	r0, #32
 800b1fe:	b2c0      	uxtb	r0, r0
 800b200:	4770      	bx	lr
 800b202:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b206:	2b05      	cmp	r3, #5
 800b208:	d801      	bhi.n	800b20e <__hexdig_fun+0x1a>
 800b20a:	3847      	subs	r0, #71	; 0x47
 800b20c:	e7f7      	b.n	800b1fe <__hexdig_fun+0xa>
 800b20e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b212:	2b05      	cmp	r3, #5
 800b214:	d801      	bhi.n	800b21a <__hexdig_fun+0x26>
 800b216:	3827      	subs	r0, #39	; 0x27
 800b218:	e7f1      	b.n	800b1fe <__hexdig_fun+0xa>
 800b21a:	2000      	movs	r0, #0
 800b21c:	4770      	bx	lr
	...

0800b220 <__gethex>:
 800b220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b224:	4617      	mov	r7, r2
 800b226:	680a      	ldr	r2, [r1, #0]
 800b228:	b085      	sub	sp, #20
 800b22a:	f102 0b02 	add.w	fp, r2, #2
 800b22e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b232:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b236:	4681      	mov	r9, r0
 800b238:	468a      	mov	sl, r1
 800b23a:	9302      	str	r3, [sp, #8]
 800b23c:	32fe      	adds	r2, #254	; 0xfe
 800b23e:	eb02 030b 	add.w	r3, r2, fp
 800b242:	46d8      	mov	r8, fp
 800b244:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	2830      	cmp	r0, #48	; 0x30
 800b24c:	d0f7      	beq.n	800b23e <__gethex+0x1e>
 800b24e:	f7ff ffd1 	bl	800b1f4 <__hexdig_fun>
 800b252:	4604      	mov	r4, r0
 800b254:	2800      	cmp	r0, #0
 800b256:	d138      	bne.n	800b2ca <__gethex+0xaa>
 800b258:	49a7      	ldr	r1, [pc, #668]	; (800b4f8 <__gethex+0x2d8>)
 800b25a:	2201      	movs	r2, #1
 800b25c:	4640      	mov	r0, r8
 800b25e:	f7ff ff09 	bl	800b074 <strncmp>
 800b262:	4606      	mov	r6, r0
 800b264:	2800      	cmp	r0, #0
 800b266:	d169      	bne.n	800b33c <__gethex+0x11c>
 800b268:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b26c:	465d      	mov	r5, fp
 800b26e:	f7ff ffc1 	bl	800b1f4 <__hexdig_fun>
 800b272:	2800      	cmp	r0, #0
 800b274:	d064      	beq.n	800b340 <__gethex+0x120>
 800b276:	465a      	mov	r2, fp
 800b278:	7810      	ldrb	r0, [r2, #0]
 800b27a:	2830      	cmp	r0, #48	; 0x30
 800b27c:	4690      	mov	r8, r2
 800b27e:	f102 0201 	add.w	r2, r2, #1
 800b282:	d0f9      	beq.n	800b278 <__gethex+0x58>
 800b284:	f7ff ffb6 	bl	800b1f4 <__hexdig_fun>
 800b288:	2301      	movs	r3, #1
 800b28a:	fab0 f480 	clz	r4, r0
 800b28e:	0964      	lsrs	r4, r4, #5
 800b290:	465e      	mov	r6, fp
 800b292:	9301      	str	r3, [sp, #4]
 800b294:	4642      	mov	r2, r8
 800b296:	4615      	mov	r5, r2
 800b298:	3201      	adds	r2, #1
 800b29a:	7828      	ldrb	r0, [r5, #0]
 800b29c:	f7ff ffaa 	bl	800b1f4 <__hexdig_fun>
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	d1f8      	bne.n	800b296 <__gethex+0x76>
 800b2a4:	4994      	ldr	r1, [pc, #592]	; (800b4f8 <__gethex+0x2d8>)
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	f7ff fee3 	bl	800b074 <strncmp>
 800b2ae:	b978      	cbnz	r0, 800b2d0 <__gethex+0xb0>
 800b2b0:	b946      	cbnz	r6, 800b2c4 <__gethex+0xa4>
 800b2b2:	1c6e      	adds	r6, r5, #1
 800b2b4:	4632      	mov	r2, r6
 800b2b6:	4615      	mov	r5, r2
 800b2b8:	3201      	adds	r2, #1
 800b2ba:	7828      	ldrb	r0, [r5, #0]
 800b2bc:	f7ff ff9a 	bl	800b1f4 <__hexdig_fun>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d1f8      	bne.n	800b2b6 <__gethex+0x96>
 800b2c4:	1b73      	subs	r3, r6, r5
 800b2c6:	009e      	lsls	r6, r3, #2
 800b2c8:	e004      	b.n	800b2d4 <__gethex+0xb4>
 800b2ca:	2400      	movs	r4, #0
 800b2cc:	4626      	mov	r6, r4
 800b2ce:	e7e1      	b.n	800b294 <__gethex+0x74>
 800b2d0:	2e00      	cmp	r6, #0
 800b2d2:	d1f7      	bne.n	800b2c4 <__gethex+0xa4>
 800b2d4:	782b      	ldrb	r3, [r5, #0]
 800b2d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b2da:	2b50      	cmp	r3, #80	; 0x50
 800b2dc:	d13d      	bne.n	800b35a <__gethex+0x13a>
 800b2de:	786b      	ldrb	r3, [r5, #1]
 800b2e0:	2b2b      	cmp	r3, #43	; 0x2b
 800b2e2:	d02f      	beq.n	800b344 <__gethex+0x124>
 800b2e4:	2b2d      	cmp	r3, #45	; 0x2d
 800b2e6:	d031      	beq.n	800b34c <__gethex+0x12c>
 800b2e8:	1c69      	adds	r1, r5, #1
 800b2ea:	f04f 0b00 	mov.w	fp, #0
 800b2ee:	7808      	ldrb	r0, [r1, #0]
 800b2f0:	f7ff ff80 	bl	800b1f4 <__hexdig_fun>
 800b2f4:	1e42      	subs	r2, r0, #1
 800b2f6:	b2d2      	uxtb	r2, r2
 800b2f8:	2a18      	cmp	r2, #24
 800b2fa:	d82e      	bhi.n	800b35a <__gethex+0x13a>
 800b2fc:	f1a0 0210 	sub.w	r2, r0, #16
 800b300:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b304:	f7ff ff76 	bl	800b1f4 <__hexdig_fun>
 800b308:	f100 3cff 	add.w	ip, r0, #4294967295
 800b30c:	fa5f fc8c 	uxtb.w	ip, ip
 800b310:	f1bc 0f18 	cmp.w	ip, #24
 800b314:	d91d      	bls.n	800b352 <__gethex+0x132>
 800b316:	f1bb 0f00 	cmp.w	fp, #0
 800b31a:	d000      	beq.n	800b31e <__gethex+0xfe>
 800b31c:	4252      	negs	r2, r2
 800b31e:	4416      	add	r6, r2
 800b320:	f8ca 1000 	str.w	r1, [sl]
 800b324:	b1dc      	cbz	r4, 800b35e <__gethex+0x13e>
 800b326:	9b01      	ldr	r3, [sp, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	bf14      	ite	ne
 800b32c:	f04f 0800 	movne.w	r8, #0
 800b330:	f04f 0806 	moveq.w	r8, #6
 800b334:	4640      	mov	r0, r8
 800b336:	b005      	add	sp, #20
 800b338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33c:	4645      	mov	r5, r8
 800b33e:	4626      	mov	r6, r4
 800b340:	2401      	movs	r4, #1
 800b342:	e7c7      	b.n	800b2d4 <__gethex+0xb4>
 800b344:	f04f 0b00 	mov.w	fp, #0
 800b348:	1ca9      	adds	r1, r5, #2
 800b34a:	e7d0      	b.n	800b2ee <__gethex+0xce>
 800b34c:	f04f 0b01 	mov.w	fp, #1
 800b350:	e7fa      	b.n	800b348 <__gethex+0x128>
 800b352:	230a      	movs	r3, #10
 800b354:	fb03 0002 	mla	r0, r3, r2, r0
 800b358:	e7d0      	b.n	800b2fc <__gethex+0xdc>
 800b35a:	4629      	mov	r1, r5
 800b35c:	e7e0      	b.n	800b320 <__gethex+0x100>
 800b35e:	eba5 0308 	sub.w	r3, r5, r8
 800b362:	3b01      	subs	r3, #1
 800b364:	4621      	mov	r1, r4
 800b366:	2b07      	cmp	r3, #7
 800b368:	dc0a      	bgt.n	800b380 <__gethex+0x160>
 800b36a:	4648      	mov	r0, r9
 800b36c:	f7fe f91e 	bl	80095ac <_Balloc>
 800b370:	4604      	mov	r4, r0
 800b372:	b940      	cbnz	r0, 800b386 <__gethex+0x166>
 800b374:	4b61      	ldr	r3, [pc, #388]	; (800b4fc <__gethex+0x2dc>)
 800b376:	4602      	mov	r2, r0
 800b378:	21e4      	movs	r1, #228	; 0xe4
 800b37a:	4861      	ldr	r0, [pc, #388]	; (800b500 <__gethex+0x2e0>)
 800b37c:	f7ff feb4 	bl	800b0e8 <__assert_func>
 800b380:	3101      	adds	r1, #1
 800b382:	105b      	asrs	r3, r3, #1
 800b384:	e7ef      	b.n	800b366 <__gethex+0x146>
 800b386:	f100 0a14 	add.w	sl, r0, #20
 800b38a:	2300      	movs	r3, #0
 800b38c:	495a      	ldr	r1, [pc, #360]	; (800b4f8 <__gethex+0x2d8>)
 800b38e:	f8cd a004 	str.w	sl, [sp, #4]
 800b392:	469b      	mov	fp, r3
 800b394:	45a8      	cmp	r8, r5
 800b396:	d342      	bcc.n	800b41e <__gethex+0x1fe>
 800b398:	9801      	ldr	r0, [sp, #4]
 800b39a:	f840 bb04 	str.w	fp, [r0], #4
 800b39e:	eba0 000a 	sub.w	r0, r0, sl
 800b3a2:	1080      	asrs	r0, r0, #2
 800b3a4:	6120      	str	r0, [r4, #16]
 800b3a6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b3aa:	4658      	mov	r0, fp
 800b3ac:	f7fe f9f0 	bl	8009790 <__hi0bits>
 800b3b0:	683d      	ldr	r5, [r7, #0]
 800b3b2:	eba8 0000 	sub.w	r0, r8, r0
 800b3b6:	42a8      	cmp	r0, r5
 800b3b8:	dd59      	ble.n	800b46e <__gethex+0x24e>
 800b3ba:	eba0 0805 	sub.w	r8, r0, r5
 800b3be:	4641      	mov	r1, r8
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f7fe fd7f 	bl	8009ec4 <__any_on>
 800b3c6:	4683      	mov	fp, r0
 800b3c8:	b1b8      	cbz	r0, 800b3fa <__gethex+0x1da>
 800b3ca:	f108 33ff 	add.w	r3, r8, #4294967295
 800b3ce:	1159      	asrs	r1, r3, #5
 800b3d0:	f003 021f 	and.w	r2, r3, #31
 800b3d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b3d8:	f04f 0b01 	mov.w	fp, #1
 800b3dc:	fa0b f202 	lsl.w	r2, fp, r2
 800b3e0:	420a      	tst	r2, r1
 800b3e2:	d00a      	beq.n	800b3fa <__gethex+0x1da>
 800b3e4:	455b      	cmp	r3, fp
 800b3e6:	dd06      	ble.n	800b3f6 <__gethex+0x1d6>
 800b3e8:	f1a8 0102 	sub.w	r1, r8, #2
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f7fe fd69 	bl	8009ec4 <__any_on>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d138      	bne.n	800b468 <__gethex+0x248>
 800b3f6:	f04f 0b02 	mov.w	fp, #2
 800b3fa:	4641      	mov	r1, r8
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f7ff fea7 	bl	800b150 <rshift>
 800b402:	4446      	add	r6, r8
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	42b3      	cmp	r3, r6
 800b408:	da41      	bge.n	800b48e <__gethex+0x26e>
 800b40a:	4621      	mov	r1, r4
 800b40c:	4648      	mov	r0, r9
 800b40e:	f7fe f90d 	bl	800962c <_Bfree>
 800b412:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b414:	2300      	movs	r3, #0
 800b416:	6013      	str	r3, [r2, #0]
 800b418:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b41c:	e78a      	b.n	800b334 <__gethex+0x114>
 800b41e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b422:	2a2e      	cmp	r2, #46	; 0x2e
 800b424:	d014      	beq.n	800b450 <__gethex+0x230>
 800b426:	2b20      	cmp	r3, #32
 800b428:	d106      	bne.n	800b438 <__gethex+0x218>
 800b42a:	9b01      	ldr	r3, [sp, #4]
 800b42c:	f843 bb04 	str.w	fp, [r3], #4
 800b430:	f04f 0b00 	mov.w	fp, #0
 800b434:	9301      	str	r3, [sp, #4]
 800b436:	465b      	mov	r3, fp
 800b438:	7828      	ldrb	r0, [r5, #0]
 800b43a:	9303      	str	r3, [sp, #12]
 800b43c:	f7ff feda 	bl	800b1f4 <__hexdig_fun>
 800b440:	9b03      	ldr	r3, [sp, #12]
 800b442:	f000 000f 	and.w	r0, r0, #15
 800b446:	4098      	lsls	r0, r3
 800b448:	ea4b 0b00 	orr.w	fp, fp, r0
 800b44c:	3304      	adds	r3, #4
 800b44e:	e7a1      	b.n	800b394 <__gethex+0x174>
 800b450:	45a8      	cmp	r8, r5
 800b452:	d8e8      	bhi.n	800b426 <__gethex+0x206>
 800b454:	2201      	movs	r2, #1
 800b456:	4628      	mov	r0, r5
 800b458:	9303      	str	r3, [sp, #12]
 800b45a:	f7ff fe0b 	bl	800b074 <strncmp>
 800b45e:	4926      	ldr	r1, [pc, #152]	; (800b4f8 <__gethex+0x2d8>)
 800b460:	9b03      	ldr	r3, [sp, #12]
 800b462:	2800      	cmp	r0, #0
 800b464:	d1df      	bne.n	800b426 <__gethex+0x206>
 800b466:	e795      	b.n	800b394 <__gethex+0x174>
 800b468:	f04f 0b03 	mov.w	fp, #3
 800b46c:	e7c5      	b.n	800b3fa <__gethex+0x1da>
 800b46e:	da0b      	bge.n	800b488 <__gethex+0x268>
 800b470:	eba5 0800 	sub.w	r8, r5, r0
 800b474:	4621      	mov	r1, r4
 800b476:	4642      	mov	r2, r8
 800b478:	4648      	mov	r0, r9
 800b47a:	f7fe faf1 	bl	8009a60 <__lshift>
 800b47e:	eba6 0608 	sub.w	r6, r6, r8
 800b482:	4604      	mov	r4, r0
 800b484:	f100 0a14 	add.w	sl, r0, #20
 800b488:	f04f 0b00 	mov.w	fp, #0
 800b48c:	e7ba      	b.n	800b404 <__gethex+0x1e4>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	42b3      	cmp	r3, r6
 800b492:	dd73      	ble.n	800b57c <__gethex+0x35c>
 800b494:	1b9e      	subs	r6, r3, r6
 800b496:	42b5      	cmp	r5, r6
 800b498:	dc34      	bgt.n	800b504 <__gethex+0x2e4>
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	d023      	beq.n	800b4e8 <__gethex+0x2c8>
 800b4a0:	2b03      	cmp	r3, #3
 800b4a2:	d025      	beq.n	800b4f0 <__gethex+0x2d0>
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d115      	bne.n	800b4d4 <__gethex+0x2b4>
 800b4a8:	42b5      	cmp	r5, r6
 800b4aa:	d113      	bne.n	800b4d4 <__gethex+0x2b4>
 800b4ac:	2d01      	cmp	r5, #1
 800b4ae:	d10b      	bne.n	800b4c8 <__gethex+0x2a8>
 800b4b0:	9a02      	ldr	r2, [sp, #8]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	6123      	str	r3, [r4, #16]
 800b4ba:	f8ca 3000 	str.w	r3, [sl]
 800b4be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4c0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b4c4:	601c      	str	r4, [r3, #0]
 800b4c6:	e735      	b.n	800b334 <__gethex+0x114>
 800b4c8:	1e69      	subs	r1, r5, #1
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f7fe fcfa 	bl	8009ec4 <__any_on>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d1ed      	bne.n	800b4b0 <__gethex+0x290>
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	4648      	mov	r0, r9
 800b4d8:	f7fe f8a8 	bl	800962c <_Bfree>
 800b4dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4de:	2300      	movs	r3, #0
 800b4e0:	6013      	str	r3, [r2, #0]
 800b4e2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b4e6:	e725      	b.n	800b334 <__gethex+0x114>
 800b4e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1f2      	bne.n	800b4d4 <__gethex+0x2b4>
 800b4ee:	e7df      	b.n	800b4b0 <__gethex+0x290>
 800b4f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1dc      	bne.n	800b4b0 <__gethex+0x290>
 800b4f6:	e7ed      	b.n	800b4d4 <__gethex+0x2b4>
 800b4f8:	0800f004 	.word	0x0800f004
 800b4fc:	0800ee99 	.word	0x0800ee99
 800b500:	0800f1ae 	.word	0x0800f1ae
 800b504:	f106 38ff 	add.w	r8, r6, #4294967295
 800b508:	f1bb 0f00 	cmp.w	fp, #0
 800b50c:	d133      	bne.n	800b576 <__gethex+0x356>
 800b50e:	f1b8 0f00 	cmp.w	r8, #0
 800b512:	d004      	beq.n	800b51e <__gethex+0x2fe>
 800b514:	4641      	mov	r1, r8
 800b516:	4620      	mov	r0, r4
 800b518:	f7fe fcd4 	bl	8009ec4 <__any_on>
 800b51c:	4683      	mov	fp, r0
 800b51e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b522:	2301      	movs	r3, #1
 800b524:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b528:	f008 081f 	and.w	r8, r8, #31
 800b52c:	fa03 f308 	lsl.w	r3, r3, r8
 800b530:	4213      	tst	r3, r2
 800b532:	4631      	mov	r1, r6
 800b534:	4620      	mov	r0, r4
 800b536:	bf18      	it	ne
 800b538:	f04b 0b02 	orrne.w	fp, fp, #2
 800b53c:	1bad      	subs	r5, r5, r6
 800b53e:	f7ff fe07 	bl	800b150 <rshift>
 800b542:	687e      	ldr	r6, [r7, #4]
 800b544:	f04f 0802 	mov.w	r8, #2
 800b548:	f1bb 0f00 	cmp.w	fp, #0
 800b54c:	d04a      	beq.n	800b5e4 <__gethex+0x3c4>
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2b02      	cmp	r3, #2
 800b552:	d016      	beq.n	800b582 <__gethex+0x362>
 800b554:	2b03      	cmp	r3, #3
 800b556:	d018      	beq.n	800b58a <__gethex+0x36a>
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d109      	bne.n	800b570 <__gethex+0x350>
 800b55c:	f01b 0f02 	tst.w	fp, #2
 800b560:	d006      	beq.n	800b570 <__gethex+0x350>
 800b562:	f8da 3000 	ldr.w	r3, [sl]
 800b566:	ea4b 0b03 	orr.w	fp, fp, r3
 800b56a:	f01b 0f01 	tst.w	fp, #1
 800b56e:	d10f      	bne.n	800b590 <__gethex+0x370>
 800b570:	f048 0810 	orr.w	r8, r8, #16
 800b574:	e036      	b.n	800b5e4 <__gethex+0x3c4>
 800b576:	f04f 0b01 	mov.w	fp, #1
 800b57a:	e7d0      	b.n	800b51e <__gethex+0x2fe>
 800b57c:	f04f 0801 	mov.w	r8, #1
 800b580:	e7e2      	b.n	800b548 <__gethex+0x328>
 800b582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b584:	f1c3 0301 	rsb	r3, r3, #1
 800b588:	930f      	str	r3, [sp, #60]	; 0x3c
 800b58a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d0ef      	beq.n	800b570 <__gethex+0x350>
 800b590:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b594:	f104 0214 	add.w	r2, r4, #20
 800b598:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	4694      	mov	ip, r2
 800b5a6:	f852 1b04 	ldr.w	r1, [r2], #4
 800b5aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b5ae:	d01e      	beq.n	800b5ee <__gethex+0x3ce>
 800b5b0:	3101      	adds	r1, #1
 800b5b2:	f8cc 1000 	str.w	r1, [ip]
 800b5b6:	f1b8 0f02 	cmp.w	r8, #2
 800b5ba:	f104 0214 	add.w	r2, r4, #20
 800b5be:	d13d      	bne.n	800b63c <__gethex+0x41c>
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	42ab      	cmp	r3, r5
 800b5c6:	d10b      	bne.n	800b5e0 <__gethex+0x3c0>
 800b5c8:	1169      	asrs	r1, r5, #5
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	f005 051f 	and.w	r5, r5, #31
 800b5d0:	fa03 f505 	lsl.w	r5, r3, r5
 800b5d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5d8:	421d      	tst	r5, r3
 800b5da:	bf18      	it	ne
 800b5dc:	f04f 0801 	movne.w	r8, #1
 800b5e0:	f048 0820 	orr.w	r8, r8, #32
 800b5e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5e6:	601c      	str	r4, [r3, #0]
 800b5e8:	9b02      	ldr	r3, [sp, #8]
 800b5ea:	601e      	str	r6, [r3, #0]
 800b5ec:	e6a2      	b.n	800b334 <__gethex+0x114>
 800b5ee:	4290      	cmp	r0, r2
 800b5f0:	f842 3c04 	str.w	r3, [r2, #-4]
 800b5f4:	d8d6      	bhi.n	800b5a4 <__gethex+0x384>
 800b5f6:	68a2      	ldr	r2, [r4, #8]
 800b5f8:	4593      	cmp	fp, r2
 800b5fa:	db17      	blt.n	800b62c <__gethex+0x40c>
 800b5fc:	6861      	ldr	r1, [r4, #4]
 800b5fe:	4648      	mov	r0, r9
 800b600:	3101      	adds	r1, #1
 800b602:	f7fd ffd3 	bl	80095ac <_Balloc>
 800b606:	4682      	mov	sl, r0
 800b608:	b918      	cbnz	r0, 800b612 <__gethex+0x3f2>
 800b60a:	4b1b      	ldr	r3, [pc, #108]	; (800b678 <__gethex+0x458>)
 800b60c:	4602      	mov	r2, r0
 800b60e:	2184      	movs	r1, #132	; 0x84
 800b610:	e6b3      	b.n	800b37a <__gethex+0x15a>
 800b612:	6922      	ldr	r2, [r4, #16]
 800b614:	3202      	adds	r2, #2
 800b616:	f104 010c 	add.w	r1, r4, #12
 800b61a:	0092      	lsls	r2, r2, #2
 800b61c:	300c      	adds	r0, #12
 800b61e:	f7ff fd4b 	bl	800b0b8 <memcpy>
 800b622:	4621      	mov	r1, r4
 800b624:	4648      	mov	r0, r9
 800b626:	f7fe f801 	bl	800962c <_Bfree>
 800b62a:	4654      	mov	r4, sl
 800b62c:	6922      	ldr	r2, [r4, #16]
 800b62e:	1c51      	adds	r1, r2, #1
 800b630:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b634:	6121      	str	r1, [r4, #16]
 800b636:	2101      	movs	r1, #1
 800b638:	6151      	str	r1, [r2, #20]
 800b63a:	e7bc      	b.n	800b5b6 <__gethex+0x396>
 800b63c:	6921      	ldr	r1, [r4, #16]
 800b63e:	4559      	cmp	r1, fp
 800b640:	dd0b      	ble.n	800b65a <__gethex+0x43a>
 800b642:	2101      	movs	r1, #1
 800b644:	4620      	mov	r0, r4
 800b646:	f7ff fd83 	bl	800b150 <rshift>
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	3601      	adds	r6, #1
 800b64e:	42b3      	cmp	r3, r6
 800b650:	f6ff aedb 	blt.w	800b40a <__gethex+0x1ea>
 800b654:	f04f 0801 	mov.w	r8, #1
 800b658:	e7c2      	b.n	800b5e0 <__gethex+0x3c0>
 800b65a:	f015 051f 	ands.w	r5, r5, #31
 800b65e:	d0f9      	beq.n	800b654 <__gethex+0x434>
 800b660:	9b01      	ldr	r3, [sp, #4]
 800b662:	441a      	add	r2, r3
 800b664:	f1c5 0520 	rsb	r5, r5, #32
 800b668:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b66c:	f7fe f890 	bl	8009790 <__hi0bits>
 800b670:	42a8      	cmp	r0, r5
 800b672:	dbe6      	blt.n	800b642 <__gethex+0x422>
 800b674:	e7ee      	b.n	800b654 <__gethex+0x434>
 800b676:	bf00      	nop
 800b678:	0800ee99 	.word	0x0800ee99

0800b67c <L_shift>:
 800b67c:	f1c2 0208 	rsb	r2, r2, #8
 800b680:	0092      	lsls	r2, r2, #2
 800b682:	b570      	push	{r4, r5, r6, lr}
 800b684:	f1c2 0620 	rsb	r6, r2, #32
 800b688:	6843      	ldr	r3, [r0, #4]
 800b68a:	6804      	ldr	r4, [r0, #0]
 800b68c:	fa03 f506 	lsl.w	r5, r3, r6
 800b690:	432c      	orrs	r4, r5
 800b692:	40d3      	lsrs	r3, r2
 800b694:	6004      	str	r4, [r0, #0]
 800b696:	f840 3f04 	str.w	r3, [r0, #4]!
 800b69a:	4288      	cmp	r0, r1
 800b69c:	d3f4      	bcc.n	800b688 <L_shift+0xc>
 800b69e:	bd70      	pop	{r4, r5, r6, pc}

0800b6a0 <__match>:
 800b6a0:	b530      	push	{r4, r5, lr}
 800b6a2:	6803      	ldr	r3, [r0, #0]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6aa:	b914      	cbnz	r4, 800b6b2 <__match+0x12>
 800b6ac:	6003      	str	r3, [r0, #0]
 800b6ae:	2001      	movs	r0, #1
 800b6b0:	bd30      	pop	{r4, r5, pc}
 800b6b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6ba:	2d19      	cmp	r5, #25
 800b6bc:	bf98      	it	ls
 800b6be:	3220      	addls	r2, #32
 800b6c0:	42a2      	cmp	r2, r4
 800b6c2:	d0f0      	beq.n	800b6a6 <__match+0x6>
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	e7f3      	b.n	800b6b0 <__match+0x10>

0800b6c8 <__hexnan>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	680b      	ldr	r3, [r1, #0]
 800b6ce:	6801      	ldr	r1, [r0, #0]
 800b6d0:	115e      	asrs	r6, r3, #5
 800b6d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b6d6:	f013 031f 	ands.w	r3, r3, #31
 800b6da:	b087      	sub	sp, #28
 800b6dc:	bf18      	it	ne
 800b6de:	3604      	addne	r6, #4
 800b6e0:	2500      	movs	r5, #0
 800b6e2:	1f37      	subs	r7, r6, #4
 800b6e4:	4682      	mov	sl, r0
 800b6e6:	4690      	mov	r8, r2
 800b6e8:	9301      	str	r3, [sp, #4]
 800b6ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800b6ee:	46b9      	mov	r9, r7
 800b6f0:	463c      	mov	r4, r7
 800b6f2:	9502      	str	r5, [sp, #8]
 800b6f4:	46ab      	mov	fp, r5
 800b6f6:	784a      	ldrb	r2, [r1, #1]
 800b6f8:	1c4b      	adds	r3, r1, #1
 800b6fa:	9303      	str	r3, [sp, #12]
 800b6fc:	b342      	cbz	r2, 800b750 <__hexnan+0x88>
 800b6fe:	4610      	mov	r0, r2
 800b700:	9105      	str	r1, [sp, #20]
 800b702:	9204      	str	r2, [sp, #16]
 800b704:	f7ff fd76 	bl	800b1f4 <__hexdig_fun>
 800b708:	2800      	cmp	r0, #0
 800b70a:	d14f      	bne.n	800b7ac <__hexnan+0xe4>
 800b70c:	9a04      	ldr	r2, [sp, #16]
 800b70e:	9905      	ldr	r1, [sp, #20]
 800b710:	2a20      	cmp	r2, #32
 800b712:	d818      	bhi.n	800b746 <__hexnan+0x7e>
 800b714:	9b02      	ldr	r3, [sp, #8]
 800b716:	459b      	cmp	fp, r3
 800b718:	dd13      	ble.n	800b742 <__hexnan+0x7a>
 800b71a:	454c      	cmp	r4, r9
 800b71c:	d206      	bcs.n	800b72c <__hexnan+0x64>
 800b71e:	2d07      	cmp	r5, #7
 800b720:	dc04      	bgt.n	800b72c <__hexnan+0x64>
 800b722:	462a      	mov	r2, r5
 800b724:	4649      	mov	r1, r9
 800b726:	4620      	mov	r0, r4
 800b728:	f7ff ffa8 	bl	800b67c <L_shift>
 800b72c:	4544      	cmp	r4, r8
 800b72e:	d950      	bls.n	800b7d2 <__hexnan+0x10a>
 800b730:	2300      	movs	r3, #0
 800b732:	f1a4 0904 	sub.w	r9, r4, #4
 800b736:	f844 3c04 	str.w	r3, [r4, #-4]
 800b73a:	f8cd b008 	str.w	fp, [sp, #8]
 800b73e:	464c      	mov	r4, r9
 800b740:	461d      	mov	r5, r3
 800b742:	9903      	ldr	r1, [sp, #12]
 800b744:	e7d7      	b.n	800b6f6 <__hexnan+0x2e>
 800b746:	2a29      	cmp	r2, #41	; 0x29
 800b748:	d155      	bne.n	800b7f6 <__hexnan+0x12e>
 800b74a:	3102      	adds	r1, #2
 800b74c:	f8ca 1000 	str.w	r1, [sl]
 800b750:	f1bb 0f00 	cmp.w	fp, #0
 800b754:	d04f      	beq.n	800b7f6 <__hexnan+0x12e>
 800b756:	454c      	cmp	r4, r9
 800b758:	d206      	bcs.n	800b768 <__hexnan+0xa0>
 800b75a:	2d07      	cmp	r5, #7
 800b75c:	dc04      	bgt.n	800b768 <__hexnan+0xa0>
 800b75e:	462a      	mov	r2, r5
 800b760:	4649      	mov	r1, r9
 800b762:	4620      	mov	r0, r4
 800b764:	f7ff ff8a 	bl	800b67c <L_shift>
 800b768:	4544      	cmp	r4, r8
 800b76a:	d934      	bls.n	800b7d6 <__hexnan+0x10e>
 800b76c:	f1a8 0204 	sub.w	r2, r8, #4
 800b770:	4623      	mov	r3, r4
 800b772:	f853 1b04 	ldr.w	r1, [r3], #4
 800b776:	f842 1f04 	str.w	r1, [r2, #4]!
 800b77a:	429f      	cmp	r7, r3
 800b77c:	d2f9      	bcs.n	800b772 <__hexnan+0xaa>
 800b77e:	1b3b      	subs	r3, r7, r4
 800b780:	f023 0303 	bic.w	r3, r3, #3
 800b784:	3304      	adds	r3, #4
 800b786:	3e03      	subs	r6, #3
 800b788:	3401      	adds	r4, #1
 800b78a:	42a6      	cmp	r6, r4
 800b78c:	bf38      	it	cc
 800b78e:	2304      	movcc	r3, #4
 800b790:	4443      	add	r3, r8
 800b792:	2200      	movs	r2, #0
 800b794:	f843 2b04 	str.w	r2, [r3], #4
 800b798:	429f      	cmp	r7, r3
 800b79a:	d2fb      	bcs.n	800b794 <__hexnan+0xcc>
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	b91b      	cbnz	r3, 800b7a8 <__hexnan+0xe0>
 800b7a0:	4547      	cmp	r7, r8
 800b7a2:	d126      	bne.n	800b7f2 <__hexnan+0x12a>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	603b      	str	r3, [r7, #0]
 800b7a8:	2005      	movs	r0, #5
 800b7aa:	e025      	b.n	800b7f8 <__hexnan+0x130>
 800b7ac:	3501      	adds	r5, #1
 800b7ae:	2d08      	cmp	r5, #8
 800b7b0:	f10b 0b01 	add.w	fp, fp, #1
 800b7b4:	dd06      	ble.n	800b7c4 <__hexnan+0xfc>
 800b7b6:	4544      	cmp	r4, r8
 800b7b8:	d9c3      	bls.n	800b742 <__hexnan+0x7a>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7c0:	2501      	movs	r5, #1
 800b7c2:	3c04      	subs	r4, #4
 800b7c4:	6822      	ldr	r2, [r4, #0]
 800b7c6:	f000 000f 	and.w	r0, r0, #15
 800b7ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b7ce:	6020      	str	r0, [r4, #0]
 800b7d0:	e7b7      	b.n	800b742 <__hexnan+0x7a>
 800b7d2:	2508      	movs	r5, #8
 800b7d4:	e7b5      	b.n	800b742 <__hexnan+0x7a>
 800b7d6:	9b01      	ldr	r3, [sp, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0df      	beq.n	800b79c <__hexnan+0xd4>
 800b7dc:	f1c3 0320 	rsb	r3, r3, #32
 800b7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e4:	40da      	lsrs	r2, r3
 800b7e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	f846 3c04 	str.w	r3, [r6, #-4]
 800b7f0:	e7d4      	b.n	800b79c <__hexnan+0xd4>
 800b7f2:	3f04      	subs	r7, #4
 800b7f4:	e7d2      	b.n	800b79c <__hexnan+0xd4>
 800b7f6:	2004      	movs	r0, #4
 800b7f8:	b007      	add	sp, #28
 800b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7fe <__ascii_mbtowc>:
 800b7fe:	b082      	sub	sp, #8
 800b800:	b901      	cbnz	r1, 800b804 <__ascii_mbtowc+0x6>
 800b802:	a901      	add	r1, sp, #4
 800b804:	b142      	cbz	r2, 800b818 <__ascii_mbtowc+0x1a>
 800b806:	b14b      	cbz	r3, 800b81c <__ascii_mbtowc+0x1e>
 800b808:	7813      	ldrb	r3, [r2, #0]
 800b80a:	600b      	str	r3, [r1, #0]
 800b80c:	7812      	ldrb	r2, [r2, #0]
 800b80e:	1e10      	subs	r0, r2, #0
 800b810:	bf18      	it	ne
 800b812:	2001      	movne	r0, #1
 800b814:	b002      	add	sp, #8
 800b816:	4770      	bx	lr
 800b818:	4610      	mov	r0, r2
 800b81a:	e7fb      	b.n	800b814 <__ascii_mbtowc+0x16>
 800b81c:	f06f 0001 	mvn.w	r0, #1
 800b820:	e7f8      	b.n	800b814 <__ascii_mbtowc+0x16>

0800b822 <_realloc_r>:
 800b822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b826:	4680      	mov	r8, r0
 800b828:	4614      	mov	r4, r2
 800b82a:	460e      	mov	r6, r1
 800b82c:	b921      	cbnz	r1, 800b838 <_realloc_r+0x16>
 800b82e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b832:	4611      	mov	r1, r2
 800b834:	f7fd be2e 	b.w	8009494 <_malloc_r>
 800b838:	b92a      	cbnz	r2, 800b846 <_realloc_r+0x24>
 800b83a:	f7fd fdb7 	bl	80093ac <_free_r>
 800b83e:	4625      	mov	r5, r4
 800b840:	4628      	mov	r0, r5
 800b842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b846:	f000 f842 	bl	800b8ce <_malloc_usable_size_r>
 800b84a:	4284      	cmp	r4, r0
 800b84c:	4607      	mov	r7, r0
 800b84e:	d802      	bhi.n	800b856 <_realloc_r+0x34>
 800b850:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b854:	d812      	bhi.n	800b87c <_realloc_r+0x5a>
 800b856:	4621      	mov	r1, r4
 800b858:	4640      	mov	r0, r8
 800b85a:	f7fd fe1b 	bl	8009494 <_malloc_r>
 800b85e:	4605      	mov	r5, r0
 800b860:	2800      	cmp	r0, #0
 800b862:	d0ed      	beq.n	800b840 <_realloc_r+0x1e>
 800b864:	42bc      	cmp	r4, r7
 800b866:	4622      	mov	r2, r4
 800b868:	4631      	mov	r1, r6
 800b86a:	bf28      	it	cs
 800b86c:	463a      	movcs	r2, r7
 800b86e:	f7ff fc23 	bl	800b0b8 <memcpy>
 800b872:	4631      	mov	r1, r6
 800b874:	4640      	mov	r0, r8
 800b876:	f7fd fd99 	bl	80093ac <_free_r>
 800b87a:	e7e1      	b.n	800b840 <_realloc_r+0x1e>
 800b87c:	4635      	mov	r5, r6
 800b87e:	e7df      	b.n	800b840 <_realloc_r+0x1e>

0800b880 <__ascii_wctomb>:
 800b880:	b149      	cbz	r1, 800b896 <__ascii_wctomb+0x16>
 800b882:	2aff      	cmp	r2, #255	; 0xff
 800b884:	bf85      	ittet	hi
 800b886:	238a      	movhi	r3, #138	; 0x8a
 800b888:	6003      	strhi	r3, [r0, #0]
 800b88a:	700a      	strbls	r2, [r1, #0]
 800b88c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b890:	bf98      	it	ls
 800b892:	2001      	movls	r0, #1
 800b894:	4770      	bx	lr
 800b896:	4608      	mov	r0, r1
 800b898:	4770      	bx	lr
	...

0800b89c <fiprintf>:
 800b89c:	b40e      	push	{r1, r2, r3}
 800b89e:	b503      	push	{r0, r1, lr}
 800b8a0:	4601      	mov	r1, r0
 800b8a2:	ab03      	add	r3, sp, #12
 800b8a4:	4805      	ldr	r0, [pc, #20]	; (800b8bc <fiprintf+0x20>)
 800b8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8aa:	6800      	ldr	r0, [r0, #0]
 800b8ac:	9301      	str	r3, [sp, #4]
 800b8ae:	f000 f83f 	bl	800b930 <_vfiprintf_r>
 800b8b2:	b002      	add	sp, #8
 800b8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8b8:	b003      	add	sp, #12
 800b8ba:	4770      	bx	lr
 800b8bc:	2000006c 	.word	0x2000006c

0800b8c0 <abort>:
 800b8c0:	b508      	push	{r3, lr}
 800b8c2:	2006      	movs	r0, #6
 800b8c4:	f000 fa0c 	bl	800bce0 <raise>
 800b8c8:	2001      	movs	r0, #1
 800b8ca:	f7f6 fde7 	bl	800249c <_exit>

0800b8ce <_malloc_usable_size_r>:
 800b8ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8d2:	1f18      	subs	r0, r3, #4
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	bfbc      	itt	lt
 800b8d8:	580b      	ldrlt	r3, [r1, r0]
 800b8da:	18c0      	addlt	r0, r0, r3
 800b8dc:	4770      	bx	lr

0800b8de <__sfputc_r>:
 800b8de:	6893      	ldr	r3, [r2, #8]
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	b410      	push	{r4}
 800b8e6:	6093      	str	r3, [r2, #8]
 800b8e8:	da08      	bge.n	800b8fc <__sfputc_r+0x1e>
 800b8ea:	6994      	ldr	r4, [r2, #24]
 800b8ec:	42a3      	cmp	r3, r4
 800b8ee:	db01      	blt.n	800b8f4 <__sfputc_r+0x16>
 800b8f0:	290a      	cmp	r1, #10
 800b8f2:	d103      	bne.n	800b8fc <__sfputc_r+0x1e>
 800b8f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8f8:	f000 b934 	b.w	800bb64 <__swbuf_r>
 800b8fc:	6813      	ldr	r3, [r2, #0]
 800b8fe:	1c58      	adds	r0, r3, #1
 800b900:	6010      	str	r0, [r2, #0]
 800b902:	7019      	strb	r1, [r3, #0]
 800b904:	4608      	mov	r0, r1
 800b906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <__sfputs_r>:
 800b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90e:	4606      	mov	r6, r0
 800b910:	460f      	mov	r7, r1
 800b912:	4614      	mov	r4, r2
 800b914:	18d5      	adds	r5, r2, r3
 800b916:	42ac      	cmp	r4, r5
 800b918:	d101      	bne.n	800b91e <__sfputs_r+0x12>
 800b91a:	2000      	movs	r0, #0
 800b91c:	e007      	b.n	800b92e <__sfputs_r+0x22>
 800b91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b922:	463a      	mov	r2, r7
 800b924:	4630      	mov	r0, r6
 800b926:	f7ff ffda 	bl	800b8de <__sfputc_r>
 800b92a:	1c43      	adds	r3, r0, #1
 800b92c:	d1f3      	bne.n	800b916 <__sfputs_r+0xa>
 800b92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b930 <_vfiprintf_r>:
 800b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	460d      	mov	r5, r1
 800b936:	b09d      	sub	sp, #116	; 0x74
 800b938:	4614      	mov	r4, r2
 800b93a:	4698      	mov	r8, r3
 800b93c:	4606      	mov	r6, r0
 800b93e:	b118      	cbz	r0, 800b948 <_vfiprintf_r+0x18>
 800b940:	6a03      	ldr	r3, [r0, #32]
 800b942:	b90b      	cbnz	r3, 800b948 <_vfiprintf_r+0x18>
 800b944:	f7fc fd64 	bl	8008410 <__sinit>
 800b948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b94a:	07d9      	lsls	r1, r3, #31
 800b94c:	d405      	bmi.n	800b95a <_vfiprintf_r+0x2a>
 800b94e:	89ab      	ldrh	r3, [r5, #12]
 800b950:	059a      	lsls	r2, r3, #22
 800b952:	d402      	bmi.n	800b95a <_vfiprintf_r+0x2a>
 800b954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b956:	f7fc fea6 	bl	80086a6 <__retarget_lock_acquire_recursive>
 800b95a:	89ab      	ldrh	r3, [r5, #12]
 800b95c:	071b      	lsls	r3, r3, #28
 800b95e:	d501      	bpl.n	800b964 <_vfiprintf_r+0x34>
 800b960:	692b      	ldr	r3, [r5, #16]
 800b962:	b99b      	cbnz	r3, 800b98c <_vfiprintf_r+0x5c>
 800b964:	4629      	mov	r1, r5
 800b966:	4630      	mov	r0, r6
 800b968:	f000 f93a 	bl	800bbe0 <__swsetup_r>
 800b96c:	b170      	cbz	r0, 800b98c <_vfiprintf_r+0x5c>
 800b96e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b970:	07dc      	lsls	r4, r3, #31
 800b972:	d504      	bpl.n	800b97e <_vfiprintf_r+0x4e>
 800b974:	f04f 30ff 	mov.w	r0, #4294967295
 800b978:	b01d      	add	sp, #116	; 0x74
 800b97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97e:	89ab      	ldrh	r3, [r5, #12]
 800b980:	0598      	lsls	r0, r3, #22
 800b982:	d4f7      	bmi.n	800b974 <_vfiprintf_r+0x44>
 800b984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b986:	f7fc fe8f 	bl	80086a8 <__retarget_lock_release_recursive>
 800b98a:	e7f3      	b.n	800b974 <_vfiprintf_r+0x44>
 800b98c:	2300      	movs	r3, #0
 800b98e:	9309      	str	r3, [sp, #36]	; 0x24
 800b990:	2320      	movs	r3, #32
 800b992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b996:	f8cd 800c 	str.w	r8, [sp, #12]
 800b99a:	2330      	movs	r3, #48	; 0x30
 800b99c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb50 <_vfiprintf_r+0x220>
 800b9a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9a4:	f04f 0901 	mov.w	r9, #1
 800b9a8:	4623      	mov	r3, r4
 800b9aa:	469a      	mov	sl, r3
 800b9ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9b0:	b10a      	cbz	r2, 800b9b6 <_vfiprintf_r+0x86>
 800b9b2:	2a25      	cmp	r2, #37	; 0x25
 800b9b4:	d1f9      	bne.n	800b9aa <_vfiprintf_r+0x7a>
 800b9b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b9ba:	d00b      	beq.n	800b9d4 <_vfiprintf_r+0xa4>
 800b9bc:	465b      	mov	r3, fp
 800b9be:	4622      	mov	r2, r4
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f7ff ffa2 	bl	800b90c <__sfputs_r>
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	f000 80a9 	beq.w	800bb20 <_vfiprintf_r+0x1f0>
 800b9ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d0:	445a      	add	r2, fp
 800b9d2:	9209      	str	r2, [sp, #36]	; 0x24
 800b9d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f000 80a1 	beq.w	800bb20 <_vfiprintf_r+0x1f0>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9e8:	f10a 0a01 	add.w	sl, sl, #1
 800b9ec:	9304      	str	r3, [sp, #16]
 800b9ee:	9307      	str	r3, [sp, #28]
 800b9f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9f4:	931a      	str	r3, [sp, #104]	; 0x68
 800b9f6:	4654      	mov	r4, sl
 800b9f8:	2205      	movs	r2, #5
 800b9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9fe:	4854      	ldr	r0, [pc, #336]	; (800bb50 <_vfiprintf_r+0x220>)
 800ba00:	f7f4 fbe6 	bl	80001d0 <memchr>
 800ba04:	9a04      	ldr	r2, [sp, #16]
 800ba06:	b9d8      	cbnz	r0, 800ba40 <_vfiprintf_r+0x110>
 800ba08:	06d1      	lsls	r1, r2, #27
 800ba0a:	bf44      	itt	mi
 800ba0c:	2320      	movmi	r3, #32
 800ba0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba12:	0713      	lsls	r3, r2, #28
 800ba14:	bf44      	itt	mi
 800ba16:	232b      	movmi	r3, #43	; 0x2b
 800ba18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba20:	2b2a      	cmp	r3, #42	; 0x2a
 800ba22:	d015      	beq.n	800ba50 <_vfiprintf_r+0x120>
 800ba24:	9a07      	ldr	r2, [sp, #28]
 800ba26:	4654      	mov	r4, sl
 800ba28:	2000      	movs	r0, #0
 800ba2a:	f04f 0c0a 	mov.w	ip, #10
 800ba2e:	4621      	mov	r1, r4
 800ba30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba34:	3b30      	subs	r3, #48	; 0x30
 800ba36:	2b09      	cmp	r3, #9
 800ba38:	d94d      	bls.n	800bad6 <_vfiprintf_r+0x1a6>
 800ba3a:	b1b0      	cbz	r0, 800ba6a <_vfiprintf_r+0x13a>
 800ba3c:	9207      	str	r2, [sp, #28]
 800ba3e:	e014      	b.n	800ba6a <_vfiprintf_r+0x13a>
 800ba40:	eba0 0308 	sub.w	r3, r0, r8
 800ba44:	fa09 f303 	lsl.w	r3, r9, r3
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	9304      	str	r3, [sp, #16]
 800ba4c:	46a2      	mov	sl, r4
 800ba4e:	e7d2      	b.n	800b9f6 <_vfiprintf_r+0xc6>
 800ba50:	9b03      	ldr	r3, [sp, #12]
 800ba52:	1d19      	adds	r1, r3, #4
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	9103      	str	r1, [sp, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	bfbb      	ittet	lt
 800ba5c:	425b      	neglt	r3, r3
 800ba5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba62:	9307      	strge	r3, [sp, #28]
 800ba64:	9307      	strlt	r3, [sp, #28]
 800ba66:	bfb8      	it	lt
 800ba68:	9204      	strlt	r2, [sp, #16]
 800ba6a:	7823      	ldrb	r3, [r4, #0]
 800ba6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba6e:	d10c      	bne.n	800ba8a <_vfiprintf_r+0x15a>
 800ba70:	7863      	ldrb	r3, [r4, #1]
 800ba72:	2b2a      	cmp	r3, #42	; 0x2a
 800ba74:	d134      	bne.n	800bae0 <_vfiprintf_r+0x1b0>
 800ba76:	9b03      	ldr	r3, [sp, #12]
 800ba78:	1d1a      	adds	r2, r3, #4
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	9203      	str	r2, [sp, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	bfb8      	it	lt
 800ba82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba86:	3402      	adds	r4, #2
 800ba88:	9305      	str	r3, [sp, #20]
 800ba8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb60 <_vfiprintf_r+0x230>
 800ba8e:	7821      	ldrb	r1, [r4, #0]
 800ba90:	2203      	movs	r2, #3
 800ba92:	4650      	mov	r0, sl
 800ba94:	f7f4 fb9c 	bl	80001d0 <memchr>
 800ba98:	b138      	cbz	r0, 800baaa <_vfiprintf_r+0x17a>
 800ba9a:	9b04      	ldr	r3, [sp, #16]
 800ba9c:	eba0 000a 	sub.w	r0, r0, sl
 800baa0:	2240      	movs	r2, #64	; 0x40
 800baa2:	4082      	lsls	r2, r0
 800baa4:	4313      	orrs	r3, r2
 800baa6:	3401      	adds	r4, #1
 800baa8:	9304      	str	r3, [sp, #16]
 800baaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baae:	4829      	ldr	r0, [pc, #164]	; (800bb54 <_vfiprintf_r+0x224>)
 800bab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bab4:	2206      	movs	r2, #6
 800bab6:	f7f4 fb8b 	bl	80001d0 <memchr>
 800baba:	2800      	cmp	r0, #0
 800babc:	d03f      	beq.n	800bb3e <_vfiprintf_r+0x20e>
 800babe:	4b26      	ldr	r3, [pc, #152]	; (800bb58 <_vfiprintf_r+0x228>)
 800bac0:	bb1b      	cbnz	r3, 800bb0a <_vfiprintf_r+0x1da>
 800bac2:	9b03      	ldr	r3, [sp, #12]
 800bac4:	3307      	adds	r3, #7
 800bac6:	f023 0307 	bic.w	r3, r3, #7
 800baca:	3308      	adds	r3, #8
 800bacc:	9303      	str	r3, [sp, #12]
 800bace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bad0:	443b      	add	r3, r7
 800bad2:	9309      	str	r3, [sp, #36]	; 0x24
 800bad4:	e768      	b.n	800b9a8 <_vfiprintf_r+0x78>
 800bad6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bada:	460c      	mov	r4, r1
 800badc:	2001      	movs	r0, #1
 800bade:	e7a6      	b.n	800ba2e <_vfiprintf_r+0xfe>
 800bae0:	2300      	movs	r3, #0
 800bae2:	3401      	adds	r4, #1
 800bae4:	9305      	str	r3, [sp, #20]
 800bae6:	4619      	mov	r1, r3
 800bae8:	f04f 0c0a 	mov.w	ip, #10
 800baec:	4620      	mov	r0, r4
 800baee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baf2:	3a30      	subs	r2, #48	; 0x30
 800baf4:	2a09      	cmp	r2, #9
 800baf6:	d903      	bls.n	800bb00 <_vfiprintf_r+0x1d0>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d0c6      	beq.n	800ba8a <_vfiprintf_r+0x15a>
 800bafc:	9105      	str	r1, [sp, #20]
 800bafe:	e7c4      	b.n	800ba8a <_vfiprintf_r+0x15a>
 800bb00:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb04:	4604      	mov	r4, r0
 800bb06:	2301      	movs	r3, #1
 800bb08:	e7f0      	b.n	800baec <_vfiprintf_r+0x1bc>
 800bb0a:	ab03      	add	r3, sp, #12
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	462a      	mov	r2, r5
 800bb10:	4b12      	ldr	r3, [pc, #72]	; (800bb5c <_vfiprintf_r+0x22c>)
 800bb12:	a904      	add	r1, sp, #16
 800bb14:	4630      	mov	r0, r6
 800bb16:	f7fb fe19 	bl	800774c <_printf_float>
 800bb1a:	4607      	mov	r7, r0
 800bb1c:	1c78      	adds	r0, r7, #1
 800bb1e:	d1d6      	bne.n	800bace <_vfiprintf_r+0x19e>
 800bb20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb22:	07d9      	lsls	r1, r3, #31
 800bb24:	d405      	bmi.n	800bb32 <_vfiprintf_r+0x202>
 800bb26:	89ab      	ldrh	r3, [r5, #12]
 800bb28:	059a      	lsls	r2, r3, #22
 800bb2a:	d402      	bmi.n	800bb32 <_vfiprintf_r+0x202>
 800bb2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb2e:	f7fc fdbb 	bl	80086a8 <__retarget_lock_release_recursive>
 800bb32:	89ab      	ldrh	r3, [r5, #12]
 800bb34:	065b      	lsls	r3, r3, #25
 800bb36:	f53f af1d 	bmi.w	800b974 <_vfiprintf_r+0x44>
 800bb3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb3c:	e71c      	b.n	800b978 <_vfiprintf_r+0x48>
 800bb3e:	ab03      	add	r3, sp, #12
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	462a      	mov	r2, r5
 800bb44:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <_vfiprintf_r+0x22c>)
 800bb46:	a904      	add	r1, sp, #16
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f7fc f8a3 	bl	8007c94 <_printf_i>
 800bb4e:	e7e4      	b.n	800bb1a <_vfiprintf_r+0x1ea>
 800bb50:	0800f159 	.word	0x0800f159
 800bb54:	0800f163 	.word	0x0800f163
 800bb58:	0800774d 	.word	0x0800774d
 800bb5c:	0800b90d 	.word	0x0800b90d
 800bb60:	0800f15f 	.word	0x0800f15f

0800bb64 <__swbuf_r>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	460e      	mov	r6, r1
 800bb68:	4614      	mov	r4, r2
 800bb6a:	4605      	mov	r5, r0
 800bb6c:	b118      	cbz	r0, 800bb76 <__swbuf_r+0x12>
 800bb6e:	6a03      	ldr	r3, [r0, #32]
 800bb70:	b90b      	cbnz	r3, 800bb76 <__swbuf_r+0x12>
 800bb72:	f7fc fc4d 	bl	8008410 <__sinit>
 800bb76:	69a3      	ldr	r3, [r4, #24]
 800bb78:	60a3      	str	r3, [r4, #8]
 800bb7a:	89a3      	ldrh	r3, [r4, #12]
 800bb7c:	071a      	lsls	r2, r3, #28
 800bb7e:	d525      	bpl.n	800bbcc <__swbuf_r+0x68>
 800bb80:	6923      	ldr	r3, [r4, #16]
 800bb82:	b31b      	cbz	r3, 800bbcc <__swbuf_r+0x68>
 800bb84:	6823      	ldr	r3, [r4, #0]
 800bb86:	6922      	ldr	r2, [r4, #16]
 800bb88:	1a98      	subs	r0, r3, r2
 800bb8a:	6963      	ldr	r3, [r4, #20]
 800bb8c:	b2f6      	uxtb	r6, r6
 800bb8e:	4283      	cmp	r3, r0
 800bb90:	4637      	mov	r7, r6
 800bb92:	dc04      	bgt.n	800bb9e <__swbuf_r+0x3a>
 800bb94:	4621      	mov	r1, r4
 800bb96:	4628      	mov	r0, r5
 800bb98:	f7ff fa2a 	bl	800aff0 <_fflush_r>
 800bb9c:	b9e0      	cbnz	r0, 800bbd8 <__swbuf_r+0x74>
 800bb9e:	68a3      	ldr	r3, [r4, #8]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	60a3      	str	r3, [r4, #8]
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	1c5a      	adds	r2, r3, #1
 800bba8:	6022      	str	r2, [r4, #0]
 800bbaa:	701e      	strb	r6, [r3, #0]
 800bbac:	6962      	ldr	r2, [r4, #20]
 800bbae:	1c43      	adds	r3, r0, #1
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d004      	beq.n	800bbbe <__swbuf_r+0x5a>
 800bbb4:	89a3      	ldrh	r3, [r4, #12]
 800bbb6:	07db      	lsls	r3, r3, #31
 800bbb8:	d506      	bpl.n	800bbc8 <__swbuf_r+0x64>
 800bbba:	2e0a      	cmp	r6, #10
 800bbbc:	d104      	bne.n	800bbc8 <__swbuf_r+0x64>
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	f7ff fa15 	bl	800aff0 <_fflush_r>
 800bbc6:	b938      	cbnz	r0, 800bbd8 <__swbuf_r+0x74>
 800bbc8:	4638      	mov	r0, r7
 800bbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbcc:	4621      	mov	r1, r4
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f000 f806 	bl	800bbe0 <__swsetup_r>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d0d5      	beq.n	800bb84 <__swbuf_r+0x20>
 800bbd8:	f04f 37ff 	mov.w	r7, #4294967295
 800bbdc:	e7f4      	b.n	800bbc8 <__swbuf_r+0x64>
	...

0800bbe0 <__swsetup_r>:
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	4b2a      	ldr	r3, [pc, #168]	; (800bc8c <__swsetup_r+0xac>)
 800bbe4:	4605      	mov	r5, r0
 800bbe6:	6818      	ldr	r0, [r3, #0]
 800bbe8:	460c      	mov	r4, r1
 800bbea:	b118      	cbz	r0, 800bbf4 <__swsetup_r+0x14>
 800bbec:	6a03      	ldr	r3, [r0, #32]
 800bbee:	b90b      	cbnz	r3, 800bbf4 <__swsetup_r+0x14>
 800bbf0:	f7fc fc0e 	bl	8008410 <__sinit>
 800bbf4:	89a3      	ldrh	r3, [r4, #12]
 800bbf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbfa:	0718      	lsls	r0, r3, #28
 800bbfc:	d422      	bmi.n	800bc44 <__swsetup_r+0x64>
 800bbfe:	06d9      	lsls	r1, r3, #27
 800bc00:	d407      	bmi.n	800bc12 <__swsetup_r+0x32>
 800bc02:	2309      	movs	r3, #9
 800bc04:	602b      	str	r3, [r5, #0]
 800bc06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc0a:	81a3      	strh	r3, [r4, #12]
 800bc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc10:	e034      	b.n	800bc7c <__swsetup_r+0x9c>
 800bc12:	0758      	lsls	r0, r3, #29
 800bc14:	d512      	bpl.n	800bc3c <__swsetup_r+0x5c>
 800bc16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc18:	b141      	cbz	r1, 800bc2c <__swsetup_r+0x4c>
 800bc1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc1e:	4299      	cmp	r1, r3
 800bc20:	d002      	beq.n	800bc28 <__swsetup_r+0x48>
 800bc22:	4628      	mov	r0, r5
 800bc24:	f7fd fbc2 	bl	80093ac <_free_r>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	6363      	str	r3, [r4, #52]	; 0x34
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc32:	81a3      	strh	r3, [r4, #12]
 800bc34:	2300      	movs	r3, #0
 800bc36:	6063      	str	r3, [r4, #4]
 800bc38:	6923      	ldr	r3, [r4, #16]
 800bc3a:	6023      	str	r3, [r4, #0]
 800bc3c:	89a3      	ldrh	r3, [r4, #12]
 800bc3e:	f043 0308 	orr.w	r3, r3, #8
 800bc42:	81a3      	strh	r3, [r4, #12]
 800bc44:	6923      	ldr	r3, [r4, #16]
 800bc46:	b94b      	cbnz	r3, 800bc5c <__swsetup_r+0x7c>
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc52:	d003      	beq.n	800bc5c <__swsetup_r+0x7c>
 800bc54:	4621      	mov	r1, r4
 800bc56:	4628      	mov	r0, r5
 800bc58:	f000 f884 	bl	800bd64 <__smakebuf_r>
 800bc5c:	89a0      	ldrh	r0, [r4, #12]
 800bc5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc62:	f010 0301 	ands.w	r3, r0, #1
 800bc66:	d00a      	beq.n	800bc7e <__swsetup_r+0x9e>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	60a3      	str	r3, [r4, #8]
 800bc6c:	6963      	ldr	r3, [r4, #20]
 800bc6e:	425b      	negs	r3, r3
 800bc70:	61a3      	str	r3, [r4, #24]
 800bc72:	6923      	ldr	r3, [r4, #16]
 800bc74:	b943      	cbnz	r3, 800bc88 <__swsetup_r+0xa8>
 800bc76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc7a:	d1c4      	bne.n	800bc06 <__swsetup_r+0x26>
 800bc7c:	bd38      	pop	{r3, r4, r5, pc}
 800bc7e:	0781      	lsls	r1, r0, #30
 800bc80:	bf58      	it	pl
 800bc82:	6963      	ldrpl	r3, [r4, #20]
 800bc84:	60a3      	str	r3, [r4, #8]
 800bc86:	e7f4      	b.n	800bc72 <__swsetup_r+0x92>
 800bc88:	2000      	movs	r0, #0
 800bc8a:	e7f7      	b.n	800bc7c <__swsetup_r+0x9c>
 800bc8c:	2000006c 	.word	0x2000006c

0800bc90 <_raise_r>:
 800bc90:	291f      	cmp	r1, #31
 800bc92:	b538      	push	{r3, r4, r5, lr}
 800bc94:	4604      	mov	r4, r0
 800bc96:	460d      	mov	r5, r1
 800bc98:	d904      	bls.n	800bca4 <_raise_r+0x14>
 800bc9a:	2316      	movs	r3, #22
 800bc9c:	6003      	str	r3, [r0, #0]
 800bc9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
 800bca4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bca6:	b112      	cbz	r2, 800bcae <_raise_r+0x1e>
 800bca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcac:	b94b      	cbnz	r3, 800bcc2 <_raise_r+0x32>
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f000 f830 	bl	800bd14 <_getpid_r>
 800bcb4:	462a      	mov	r2, r5
 800bcb6:	4601      	mov	r1, r0
 800bcb8:	4620      	mov	r0, r4
 800bcba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcbe:	f000 b817 	b.w	800bcf0 <_kill_r>
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d00a      	beq.n	800bcdc <_raise_r+0x4c>
 800bcc6:	1c59      	adds	r1, r3, #1
 800bcc8:	d103      	bne.n	800bcd2 <_raise_r+0x42>
 800bcca:	2316      	movs	r3, #22
 800bccc:	6003      	str	r3, [r0, #0]
 800bcce:	2001      	movs	r0, #1
 800bcd0:	e7e7      	b.n	800bca2 <_raise_r+0x12>
 800bcd2:	2400      	movs	r4, #0
 800bcd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcd8:	4628      	mov	r0, r5
 800bcda:	4798      	blx	r3
 800bcdc:	2000      	movs	r0, #0
 800bcde:	e7e0      	b.n	800bca2 <_raise_r+0x12>

0800bce0 <raise>:
 800bce0:	4b02      	ldr	r3, [pc, #8]	; (800bcec <raise+0xc>)
 800bce2:	4601      	mov	r1, r0
 800bce4:	6818      	ldr	r0, [r3, #0]
 800bce6:	f7ff bfd3 	b.w	800bc90 <_raise_r>
 800bcea:	bf00      	nop
 800bcec:	2000006c 	.word	0x2000006c

0800bcf0 <_kill_r>:
 800bcf0:	b538      	push	{r3, r4, r5, lr}
 800bcf2:	4d07      	ldr	r5, [pc, #28]	; (800bd10 <_kill_r+0x20>)
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	4608      	mov	r0, r1
 800bcfa:	4611      	mov	r1, r2
 800bcfc:	602b      	str	r3, [r5, #0]
 800bcfe:	f7f6 fbbd 	bl	800247c <_kill>
 800bd02:	1c43      	adds	r3, r0, #1
 800bd04:	d102      	bne.n	800bd0c <_kill_r+0x1c>
 800bd06:	682b      	ldr	r3, [r5, #0]
 800bd08:	b103      	cbz	r3, 800bd0c <_kill_r+0x1c>
 800bd0a:	6023      	str	r3, [r4, #0]
 800bd0c:	bd38      	pop	{r3, r4, r5, pc}
 800bd0e:	bf00      	nop
 800bd10:	2000066c 	.word	0x2000066c

0800bd14 <_getpid_r>:
 800bd14:	f7f6 bbaa 	b.w	800246c <_getpid>

0800bd18 <__swhatbuf_r>:
 800bd18:	b570      	push	{r4, r5, r6, lr}
 800bd1a:	460c      	mov	r4, r1
 800bd1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd20:	2900      	cmp	r1, #0
 800bd22:	b096      	sub	sp, #88	; 0x58
 800bd24:	4615      	mov	r5, r2
 800bd26:	461e      	mov	r6, r3
 800bd28:	da0d      	bge.n	800bd46 <__swhatbuf_r+0x2e>
 800bd2a:	89a3      	ldrh	r3, [r4, #12]
 800bd2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bd30:	f04f 0100 	mov.w	r1, #0
 800bd34:	bf0c      	ite	eq
 800bd36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bd3a:	2340      	movne	r3, #64	; 0x40
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	6031      	str	r1, [r6, #0]
 800bd40:	602b      	str	r3, [r5, #0]
 800bd42:	b016      	add	sp, #88	; 0x58
 800bd44:	bd70      	pop	{r4, r5, r6, pc}
 800bd46:	466a      	mov	r2, sp
 800bd48:	f000 f848 	bl	800bddc <_fstat_r>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	dbec      	blt.n	800bd2a <__swhatbuf_r+0x12>
 800bd50:	9901      	ldr	r1, [sp, #4]
 800bd52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bd56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bd5a:	4259      	negs	r1, r3
 800bd5c:	4159      	adcs	r1, r3
 800bd5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd62:	e7eb      	b.n	800bd3c <__swhatbuf_r+0x24>

0800bd64 <__smakebuf_r>:
 800bd64:	898b      	ldrh	r3, [r1, #12]
 800bd66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd68:	079d      	lsls	r5, r3, #30
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	460c      	mov	r4, r1
 800bd6e:	d507      	bpl.n	800bd80 <__smakebuf_r+0x1c>
 800bd70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	6123      	str	r3, [r4, #16]
 800bd78:	2301      	movs	r3, #1
 800bd7a:	6163      	str	r3, [r4, #20]
 800bd7c:	b002      	add	sp, #8
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
 800bd80:	ab01      	add	r3, sp, #4
 800bd82:	466a      	mov	r2, sp
 800bd84:	f7ff ffc8 	bl	800bd18 <__swhatbuf_r>
 800bd88:	9900      	ldr	r1, [sp, #0]
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f7fd fb81 	bl	8009494 <_malloc_r>
 800bd92:	b948      	cbnz	r0, 800bda8 <__smakebuf_r+0x44>
 800bd94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd98:	059a      	lsls	r2, r3, #22
 800bd9a:	d4ef      	bmi.n	800bd7c <__smakebuf_r+0x18>
 800bd9c:	f023 0303 	bic.w	r3, r3, #3
 800bda0:	f043 0302 	orr.w	r3, r3, #2
 800bda4:	81a3      	strh	r3, [r4, #12]
 800bda6:	e7e3      	b.n	800bd70 <__smakebuf_r+0xc>
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	6020      	str	r0, [r4, #0]
 800bdac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb0:	81a3      	strh	r3, [r4, #12]
 800bdb2:	9b00      	ldr	r3, [sp, #0]
 800bdb4:	6163      	str	r3, [r4, #20]
 800bdb6:	9b01      	ldr	r3, [sp, #4]
 800bdb8:	6120      	str	r0, [r4, #16]
 800bdba:	b15b      	cbz	r3, 800bdd4 <__smakebuf_r+0x70>
 800bdbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f000 f81d 	bl	800be00 <_isatty_r>
 800bdc6:	b128      	cbz	r0, 800bdd4 <__smakebuf_r+0x70>
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	f023 0303 	bic.w	r3, r3, #3
 800bdce:	f043 0301 	orr.w	r3, r3, #1
 800bdd2:	81a3      	strh	r3, [r4, #12]
 800bdd4:	89a3      	ldrh	r3, [r4, #12]
 800bdd6:	431d      	orrs	r5, r3
 800bdd8:	81a5      	strh	r5, [r4, #12]
 800bdda:	e7cf      	b.n	800bd7c <__smakebuf_r+0x18>

0800bddc <_fstat_r>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	4d07      	ldr	r5, [pc, #28]	; (800bdfc <_fstat_r+0x20>)
 800bde0:	2300      	movs	r3, #0
 800bde2:	4604      	mov	r4, r0
 800bde4:	4608      	mov	r0, r1
 800bde6:	4611      	mov	r1, r2
 800bde8:	602b      	str	r3, [r5, #0]
 800bdea:	f7f6 fba6 	bl	800253a <_fstat>
 800bdee:	1c43      	adds	r3, r0, #1
 800bdf0:	d102      	bne.n	800bdf8 <_fstat_r+0x1c>
 800bdf2:	682b      	ldr	r3, [r5, #0]
 800bdf4:	b103      	cbz	r3, 800bdf8 <_fstat_r+0x1c>
 800bdf6:	6023      	str	r3, [r4, #0]
 800bdf8:	bd38      	pop	{r3, r4, r5, pc}
 800bdfa:	bf00      	nop
 800bdfc:	2000066c 	.word	0x2000066c

0800be00 <_isatty_r>:
 800be00:	b538      	push	{r3, r4, r5, lr}
 800be02:	4d06      	ldr	r5, [pc, #24]	; (800be1c <_isatty_r+0x1c>)
 800be04:	2300      	movs	r3, #0
 800be06:	4604      	mov	r4, r0
 800be08:	4608      	mov	r0, r1
 800be0a:	602b      	str	r3, [r5, #0]
 800be0c:	f7f6 fba5 	bl	800255a <_isatty>
 800be10:	1c43      	adds	r3, r0, #1
 800be12:	d102      	bne.n	800be1a <_isatty_r+0x1a>
 800be14:	682b      	ldr	r3, [r5, #0]
 800be16:	b103      	cbz	r3, 800be1a <_isatty_r+0x1a>
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	2000066c 	.word	0x2000066c

0800be20 <_init>:
 800be20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be22:	bf00      	nop
 800be24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be26:	bc08      	pop	{r3}
 800be28:	469e      	mov	lr, r3
 800be2a:	4770      	bx	lr

0800be2c <_fini>:
 800be2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2e:	bf00      	nop
 800be30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be32:	bc08      	pop	{r3}
 800be34:	469e      	mov	lr, r3
 800be36:	4770      	bx	lr
