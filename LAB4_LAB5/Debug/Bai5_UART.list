
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030d8  08007ea8  08007ea8  00008ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af80  0800af80  0000c078  2**0
                  CONTENTS
  4 .ARM          00000008  0800af80  0800af80  0000bf80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af88  0800af88  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af88  0800af88  0000bf88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af8c  0800af8c  0000bf8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800af90  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c078  2**0
                  CONTENTS
 10 .bss          000003e4  20000078  20000078  0000c078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000045c  2000045c  0000c078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017786  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d9b  00000000  00000000  0002382e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001598  00000000  00000000  000275d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d1  00000000  00000000  00028b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024400  00000000  00000000  00029c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d30b  00000000  00000000  0004e039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2f20  00000000  00000000  0006b344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e264  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e14  00000000  00000000  0013e2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001440bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e90 	.word	0x08007e90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007e90 	.word	0x08007e90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	2108      	movs	r1, #8
 8000568:	4802      	ldr	r0, [pc, #8]	@ (8000574 <button_init+0x14>)
 800056a:	f002 fe9f 	bl	80032ac <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40020c00 	.word	0x40020c00

08000578 <button_Scan>:

void button_Scan(){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	482f      	ldr	r0, [pc, #188]	@ (8000640 <button_Scan+0xc8>)
 8000584:	f002 fe92 	bl	80032ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2108      	movs	r1, #8
 800058c:	482c      	ldr	r0, [pc, #176]	@ (8000640 <button_Scan+0xc8>)
 800058e:	f002 fe8d 	bl	80032ac <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000592:	230a      	movs	r3, #10
 8000594:	2202      	movs	r2, #2
 8000596:	492b      	ldr	r1, [pc, #172]	@ (8000644 <button_Scan+0xcc>)
 8000598:	482b      	ldr	r0, [pc, #172]	@ (8000648 <button_Scan+0xd0>)
 800059a:	f004 fdec 	bl	8005176 <HAL_SPI_Receive>
	  int button_index = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005a6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	e03f      	b.n	800062e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db06      	blt.n	80005c2 <button_Scan+0x4a>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	dc03      	bgt.n	80005c2 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3304      	adds	r3, #4
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e018      	b.n	80005f4 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	dd07      	ble.n	80005d8 <button_Scan+0x60>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b07      	cmp	r3, #7
 80005cc:	dc04      	bgt.n	80005d8 <button_Scan+0x60>
			  button_index = 7 - i;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f1c3 0307 	rsb	r3, r3, #7
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e00d      	b.n	80005f4 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	dd06      	ble.n	80005ec <button_Scan+0x74>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b0b      	cmp	r3, #11
 80005e2:	dc03      	bgt.n	80005ec <button_Scan+0x74>
			  button_index = i + 4;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3304      	adds	r3, #4
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e003      	b.n	80005f4 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f1c3 0317 	rsb	r3, r3, #23
 80005f2:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80005f4:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <button_Scan+0xcc>)
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	897b      	ldrh	r3, [r7, #10]
 80005fa:	4013      	ands	r3, r2
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d005      	beq.n	800060e <button_Scan+0x96>
 8000602:	4a12      	ldr	r2, [pc, #72]	@ (800064c <button_Scan+0xd4>)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2100      	movs	r1, #0
 8000608:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800060c:	e009      	b.n	8000622 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800060e:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <button_Scan+0xd4>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000616:	3301      	adds	r3, #1
 8000618:	b299      	uxth	r1, r3
 800061a:	4a0c      	ldr	r2, [pc, #48]	@ (800064c <button_Scan+0xd4>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000622:	897b      	ldrh	r3, [r7, #10]
 8000624:	085b      	lsrs	r3, r3, #1
 8000626:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	ddbc      	ble.n	80005ae <button_Scan+0x36>
	  }
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020c00 	.word	0x40020c00
 8000644:	200000b4 	.word	0x200000b4
 8000648:	200001a0 	.word	0x200001a0
 800064c:	20000094 	.word	0x20000094

08000650 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8000654:	201e      	movs	r0, #30
 8000656:	f002 fa05 	bl	8002a64 <DEC2BCD>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <ds3231_init+0x80>)
 8000660:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8000662:	2016      	movs	r0, #22
 8000664:	f002 f9fe 	bl	8002a64 <DEC2BCD>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <ds3231_init+0x80>)
 800066e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000670:	2015      	movs	r0, #21
 8000672:	f002 f9f7 	bl	8002a64 <DEC2BCD>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <ds3231_init+0x80>)
 800067c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800067e:	2006      	movs	r0, #6
 8000680:	f002 f9f0 	bl	8002a64 <DEC2BCD>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <ds3231_init+0x80>)
 800068a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 800068c:	200f      	movs	r0, #15
 800068e:	f002 f9e9 	bl	8002a64 <DEC2BCD>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <ds3231_init+0x80>)
 8000698:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800069a:	2009      	movs	r0, #9
 800069c:	f002 f9e2 	bl	8002a64 <DEC2BCD>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b0a      	ldr	r3, [pc, #40]	@ (80006d0 <ds3231_init+0x80>)
 80006a6:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80006a8:	2017      	movs	r0, #23
 80006aa:	f002 f9db 	bl	8002a64 <DEC2BCD>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <ds3231_init+0x80>)
 80006b4:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 80006b6:	2332      	movs	r3, #50	@ 0x32
 80006b8:	2203      	movs	r2, #3
 80006ba:	21d0      	movs	r1, #208	@ 0xd0
 80006bc:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <ds3231_init+0x84>)
 80006be:	f003 fa73 	bl	8003ba8 <HAL_I2C_IsDeviceReady>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <ds3231_init+0x7c>
		while(1);
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <ds3231_init+0x78>
	};
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000b8 	.word	0x200000b8
 80006d4:	2000011c 	.word	0x2000011c

080006d8 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af04      	add	r7, sp, #16
 80006de:	4603      	mov	r3, r0
 80006e0:	460a      	mov	r2, r1
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	4613      	mov	r3, r2
 80006e6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 f9ba 	bl	8002a64 <DEC2BCD>
 80006f0:	4603      	mov	r3, r0
 80006f2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	230a      	movs	r3, #10
 80006fa:	9302      	str	r3, [sp, #8]
 80006fc:	2301      	movs	r3, #1
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	f107 030f 	add.w	r3, r7, #15
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2301      	movs	r3, #1
 8000708:	21d0      	movs	r1, #208	@ 0xd0
 800070a:	4803      	ldr	r0, [pc, #12]	@ (8000718 <ds3231_Write+0x40>)
 800070c:	f002 ff2c 	bl	8003568 <HAL_I2C_Mem_Write>
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000011c 	.word	0x2000011c

0800071c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000722:	230a      	movs	r3, #10
 8000724:	9302      	str	r3, [sp, #8]
 8000726:	2307      	movs	r3, #7
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2301      	movs	r3, #1
 8000730:	2200      	movs	r2, #0
 8000732:	21d0      	movs	r1, #208	@ 0xd0
 8000734:	4823      	ldr	r0, [pc, #140]	@ (80007c4 <ds3231_ReadTime+0xa8>)
 8000736:	f003 f811 	bl	800375c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f002 f976 	bl	8002a30 <BCD2DEC>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <ds3231_ReadTime+0xac>)
 800074a:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 800074c:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	4618      	mov	r0, r3
 8000752:	f002 f96d 	bl	8002a30 <BCD2DEC>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <ds3231_ReadTime+0xb0>)
 800075c:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800075e:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 8000760:	789b      	ldrb	r3, [r3, #2]
 8000762:	4618      	mov	r0, r3
 8000764:	f002 f964 	bl	8002a30 <BCD2DEC>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <ds3231_ReadTime+0xb4>)
 800076e:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 8000772:	78db      	ldrb	r3, [r3, #3]
 8000774:	4618      	mov	r0, r3
 8000776:	f002 f95b 	bl	8002a30 <BCD2DEC>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <ds3231_ReadTime+0xb8>)
 8000780:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000782:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	4618      	mov	r0, r3
 8000788:	f002 f952 	bl	8002a30 <BCD2DEC>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <ds3231_ReadTime+0xbc>)
 8000792:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 8000796:	795b      	ldrb	r3, [r3, #5]
 8000798:	4618      	mov	r0, r3
 800079a:	f002 f949 	bl	8002a30 <BCD2DEC>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <ds3231_ReadTime+0xc0>)
 80007a4:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 80007a8:	799b      	ldrb	r3, [r3, #6]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 f940 	bl	8002a30 <BCD2DEC>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <ds3231_ReadTime+0xc4>)
 80007b6:	701a      	strb	r2, [r3, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000b8 	.word	0x200000b8
 80007c4:	2000011c 	.word	0x2000011c
 80007c8:	200000c1 	.word	0x200000c1
 80007cc:	200000c0 	.word	0x200000c0
 80007d0:	200000bf 	.word	0x200000bf
 80007d4:	200000c3 	.word	0x200000c3
 80007d8:	200000c2 	.word	0x200000c2
 80007dc:	200000c4 	.word	0x200000c4
 80007e0:	200000c5 	.word	0x200000c5

080007e4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	@ 0x38
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80007fe:	463b      	mov	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
 800080c:	615a      	str	r2, [r3, #20]
 800080e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000810:	4b2f      	ldr	r3, [pc, #188]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000812:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000816:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000818:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <MX_FSMC_Init+0xec>)
 800081a:	4a2e      	ldr	r2, [pc, #184]	@ (80008d4 <MX_FSMC_Init+0xf0>)
 800081c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800081e:	4b2c      	ldr	r3, [pc, #176]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000824:	4b2a      	ldr	r3, [pc, #168]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800082a:	4b29      	ldr	r3, [pc, #164]	@ (80008d0 <MX_FSMC_Init+0xec>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000830:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000832:	2210      	movs	r2, #16
 8000834:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000836:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800083c:	4b24      	ldr	r3, [pc, #144]	@ (80008d0 <MX_FSMC_Init+0xec>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000842:	4b23      	ldr	r3, [pc, #140]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000848:	4b21      	ldr	r3, [pc, #132]	@ (80008d0 <MX_FSMC_Init+0xec>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800084e:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000850:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000854:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000856:	4b1e      	ldr	r3, [pc, #120]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000858:	2200      	movs	r2, #0
 800085a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800085c:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <MX_FSMC_Init+0xec>)
 800085e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000862:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000864:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000866:	2200      	movs	r2, #0
 8000868:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800086a:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_FSMC_Init+0xec>)
 800086c:	2200      	movs	r2, #0
 800086e:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000870:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000872:	2200      	movs	r2, #0
 8000874:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000876:	230f      	movs	r3, #15
 8000878:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800087a:	230f      	movs	r3, #15
 800087c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800087e:	233c      	movs	r3, #60	@ 0x3c
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000886:	2310      	movs	r3, #16
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800088a:	2311      	movs	r3, #17
 800088c:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800088e:	2300      	movs	r3, #0
 8000890:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000892:	2308      	movs	r3, #8
 8000894:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000896:	230f      	movs	r3, #15
 8000898:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800089a:	2309      	movs	r3, #9
 800089c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008a2:	2310      	movs	r3, #16
 80008a4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008a6:	2311      	movs	r3, #17
 80008a8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80008ae:	463a      	mov	r2, r7
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	@ (80008d0 <MX_FSMC_Init+0xec>)
 80008b8:	f005 f840 	bl	800593c <HAL_SRAM_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80008c2:	f001 fd4f 	bl	8002364 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008c6:	bf00      	nop
 80008c8:	3738      	adds	r7, #56	@ 0x38
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000c8 	.word	0x200000c8
 80008d4:	a0000104 	.word	0xa0000104

080008d8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80008ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <HAL_FSMC_MspInit+0x88>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d131      	bne.n	8000958 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <HAL_FSMC_MspInit+0x88>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <HAL_FSMC_MspInit+0x8c>)
 8000900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000902:	4a18      	ldr	r2, [pc, #96]	@ (8000964 <HAL_FSMC_MspInit+0x8c>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6393      	str	r3, [r2, #56]	@ 0x38
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <HAL_FSMC_MspInit+0x8c>)
 800090c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000916:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800091a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000928:	230c      	movs	r3, #12
 800092a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	480d      	ldr	r0, [pc, #52]	@ (8000968 <HAL_FSMC_MspInit+0x90>)
 8000932:	f002 fb1f 	bl	8002f74 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000936:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 800093a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000948:	230c      	movs	r3, #12
 800094a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4619      	mov	r1, r3
 8000950:	4806      	ldr	r0, [pc, #24]	@ (800096c <HAL_FSMC_MspInit+0x94>)
 8000952:	f002 fb0f 	bl	8002f74 <HAL_GPIO_Init>
 8000956:	e000      	b.n	800095a <HAL_FSMC_MspInit+0x82>
    return;
 8000958:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000118 	.word	0x20000118
 8000964:	40023800 	.word	0x40023800
 8000968:	40021000 	.word	0x40021000
 800096c:	40020c00 	.word	0x40020c00

08000970 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000978:	f7ff ffae 	bl	80008d8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	@ 0x30
 8000988:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	4b6f      	ldr	r3, [pc, #444]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a6e      	ldr	r2, [pc, #440]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009a4:	f043 0310 	orr.w	r3, r3, #16
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b6c      	ldr	r3, [pc, #432]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0310 	and.w	r3, r3, #16
 80009b2:	61bb      	str	r3, [r7, #24]
 80009b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	4b68      	ldr	r3, [pc, #416]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a67      	ldr	r2, [pc, #412]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b65      	ldr	r3, [pc, #404]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b61      	ldr	r3, [pc, #388]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a60      	ldr	r2, [pc, #384]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b5e      	ldr	r3, [pc, #376]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b5a      	ldr	r3, [pc, #360]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a59      	ldr	r2, [pc, #356]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b57      	ldr	r3, [pc, #348]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b53      	ldr	r3, [pc, #332]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a52      	ldr	r2, [pc, #328]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b50      	ldr	r3, [pc, #320]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b4c      	ldr	r3, [pc, #304]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a4b      	ldr	r2, [pc, #300]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b49      	ldr	r3, [pc, #292]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b45      	ldr	r3, [pc, #276]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a44      	ldr	r2, [pc, #272]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b42      	ldr	r3, [pc, #264]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2170      	movs	r1, #112	@ 0x70
 8000a62:	483f      	ldr	r0, [pc, #252]	@ (8000b60 <MX_GPIO_Init+0x1dc>)
 8000a64:	f002 fc22 	bl	80032ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6e:	483d      	ldr	r0, [pc, #244]	@ (8000b64 <MX_GPIO_Init+0x1e0>)
 8000a70:	f002 fc1c 	bl	80032ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2140      	movs	r1, #64	@ 0x40
 8000a78:	483b      	ldr	r0, [pc, #236]	@ (8000b68 <MX_GPIO_Init+0x1e4>)
 8000a7a:	f002 fc17 	bl	80032ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a84:	4839      	ldr	r0, [pc, #228]	@ (8000b6c <MX_GPIO_Init+0x1e8>)
 8000a86:	f002 fc11 	bl	80032ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	4838      	ldr	r0, [pc, #224]	@ (8000b70 <MX_GPIO_Init+0x1ec>)
 8000a90:	f002 fc0c 	bl	80032ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a94:	2370      	movs	r3, #112	@ 0x70
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	482d      	ldr	r0, [pc, #180]	@ (8000b60 <MX_GPIO_Init+0x1dc>)
 8000aac:	f002 fa62 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4826      	ldr	r0, [pc, #152]	@ (8000b64 <MX_GPIO_Init+0x1e0>)
 8000aca:	f002 fa53 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000ace:	23c0      	movs	r3, #192	@ 0xc0
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4822      	ldr	r0, [pc, #136]	@ (8000b6c <MX_GPIO_Init+0x1e8>)
 8000ae2:	f002 fa47 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000ae6:	2330      	movs	r3, #48	@ 0x30
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	481a      	ldr	r0, [pc, #104]	@ (8000b64 <MX_GPIO_Init+0x1e0>)
 8000afa:	f002 fa3b 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000afe:	2340      	movs	r3, #64	@ 0x40
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4814      	ldr	r0, [pc, #80]	@ (8000b68 <MX_GPIO_Init+0x1e4>)
 8000b16:	f002 fa2d 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000b1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	480e      	ldr	r0, [pc, #56]	@ (8000b6c <MX_GPIO_Init+0x1e8>)
 8000b34:	f002 fa1e 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4808      	ldr	r0, [pc, #32]	@ (8000b70 <MX_GPIO_Init+0x1ec>)
 8000b50:	f002 fa10 	bl	8002f74 <HAL_GPIO_Init>

}
 8000b54:	bf00      	nop
 8000b56:	3730      	adds	r7, #48	@ 0x30
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40021800 	.word	0x40021800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020c00 	.word	0x40020c00

08000b74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000b7a:	4a13      	ldr	r2, [pc, #76]	@ (8000bc8 <MX_I2C1_Init+0x54>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000b80:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <MX_I2C1_Init+0x58>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000b92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000bb2:	f002 fb95 	bl	80032e0 <HAL_I2C_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bbc:	f001 fbd2 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000011c 	.word	0x2000011c
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	000186a0 	.word	0x000186a0

08000bd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	@ (8000c54 <HAL_I2C_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a17      	ldr	r2, [pc, #92]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c0e:	23c0      	movs	r3, #192	@ 0xc0
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <HAL_I2C_MspInit+0x8c>)
 8000c2a:	f002 f9a3 	bl	8002f74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	@ 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40005400 	.word	0x40005400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400

08000c60 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <LCD_WR_REG+0x1c>)
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	8013      	strh	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	600ffffe 	.word	0x600ffffe

08000c80 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	@ (8000c9c <LCD_WR_DATA+0x1c>)
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	8053      	strh	r3, [r2, #2]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	600ffffe 	.word	0x600ffffe

08000ca0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <LCD_RD_DATA+0x20>)
 8000ca8:	885b      	ldrh	r3, [r3, #2]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	b29b      	uxth	r3, r3
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	600ffffe 	.word	0x600ffffe

08000cc4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4604      	mov	r4, r0
 8000ccc:	4608      	mov	r0, r1
 8000cce:	4611      	mov	r1, r2
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	80fb      	strh	r3, [r7, #6]
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80bb      	strh	r3, [r7, #4]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	807b      	strh	r3, [r7, #2]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000ce2:	202a      	movs	r0, #42	@ 0x2a
 8000ce4:	f7ff ffbc 	bl	8000c60 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ffc6 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ffc0 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000d00:	887b      	ldrh	r3, [r7, #2]
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ffba 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000d0c:	887b      	ldrh	r3, [r7, #2]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ffb4 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000d18:	202b      	movs	r0, #43	@ 0x2b
 8000d1a:	f7ff ffa1 	bl	8000c60 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ffab 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ffa5 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000d36:	883b      	ldrh	r3, [r7, #0]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff9f 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000d42:	883b      	ldrh	r3, [r7, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff99 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000d4e:	202c      	movs	r0, #44	@ 0x2c
 8000d50:	f7ff ff86 	bl	8000c60 <LCD_WR_REG>
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd90      	pop	{r4, r7, pc}

08000d5c <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <lcd_Clear+0x70>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <lcd_Clear+0x70>)
 8000d80:	885b      	ldrh	r3, [r3, #2]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff ff9b 	bl	8000cc4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	81fb      	strh	r3, [r7, #14]
 8000d92:	e011      	b.n	8000db8 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	81bb      	strh	r3, [r7, #12]
 8000d98:	e006      	b.n	8000da8 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff6f 	bl	8000c80 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000da2:	89bb      	ldrh	r3, [r7, #12]
 8000da4:	3301      	adds	r3, #1
 8000da6:	81bb      	strh	r3, [r7, #12]
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <lcd_Clear+0x70>)
 8000daa:	885b      	ldrh	r3, [r3, #2]
 8000dac:	89ba      	ldrh	r2, [r7, #12]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3f3      	bcc.n	8000d9a <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	3301      	adds	r3, #1
 8000db6:	81fb      	strh	r3, [r7, #14]
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <lcd_Clear+0x70>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	89fa      	ldrh	r2, [r7, #14]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d3e8      	bcc.n	8000d94 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000170 	.word	0x20000170

08000dd0 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	4608      	mov	r0, r1
 8000dda:	4611      	mov	r1, r2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4623      	mov	r3, r4
 8000de0:	80fb      	strh	r3, [r7, #6]
 8000de2:	4603      	mov	r3, r0
 8000de4:	80bb      	strh	r3, [r7, #4]
 8000de6:	460b      	mov	r3, r1
 8000de8:	807b      	strh	r3, [r7, #2]
 8000dea:	4613      	mov	r3, r2
 8000dec:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000dee:	887b      	ldrh	r3, [r7, #2]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	883b      	ldrh	r3, [r7, #0]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	88b9      	ldrh	r1, [r7, #4]
 8000dfc:	88f8      	ldrh	r0, [r7, #6]
 8000dfe:	f7ff ff61 	bl	8000cc4 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000e02:	88bb      	ldrh	r3, [r7, #4]
 8000e04:	81fb      	strh	r3, [r7, #14]
 8000e06:	e010      	b.n	8000e2a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	81bb      	strh	r3, [r7, #12]
 8000e0c:	e006      	b.n	8000e1c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000e0e:	8c3b      	ldrh	r3, [r7, #32]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff35 	bl	8000c80 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000e16:	89bb      	ldrh	r3, [r7, #12]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	81bb      	strh	r3, [r7, #12]
 8000e1c:	89ba      	ldrh	r2, [r7, #12]
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3f4      	bcc.n	8000e0e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000e24:	89fb      	ldrh	r3, [r7, #14]
 8000e26:	3301      	adds	r3, #1
 8000e28:	81fb      	strh	r3, [r7, #14]
 8000e2a:	89fa      	ldrh	r2, [r7, #14]
 8000e2c:	883b      	ldrh	r3, [r7, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3ea      	bcc.n	8000e08 <lcd_Fill+0x38>
		}
	}
}
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd90      	pop	{r4, r7, pc}

08000e3c <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
 8000e46:	460b      	mov	r3, r1
 8000e48:	80bb      	strh	r3, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	88fa      	ldrh	r2, [r7, #6]
 8000e52:	88b9      	ldrh	r1, [r7, #4]
 8000e54:	88f8      	ldrh	r0, [r7, #6]
 8000e56:	f7ff ff35 	bl	8000cc4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff0f 	bl	8000c80 <LCD_WR_DATA>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4604      	mov	r4, r0
 8000e74:	4608      	mov	r0, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4623      	mov	r3, r4
 8000e7c:	80fb      	strh	r3, [r7, #6]
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80bb      	strh	r3, [r7, #4]
 8000e82:	460b      	mov	r3, r1
 8000e84:	70fb      	strb	r3, [r7, #3]
 8000e86:	4613      	mov	r3, r2
 8000e88:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e96:	085b      	lsrs	r3, r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	08db      	lsrs	r3, r3, #3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	bf14      	ite	ne
 8000eae:	2301      	movne	r3, #1
 8000eb0:	2300      	moveq	r3, #0
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	fb12 f303 	smulbb	r3, r2, r3
 8000ec2:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	3b20      	subs	r3, #32
 8000ec8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	b29c      	uxth	r4, r3
 8000ed8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	88bb      	ldrh	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	88b9      	ldrh	r1, [r7, #4]
 8000eea:	88f8      	ldrh	r0, [r7, #6]
 8000eec:	4622      	mov	r2, r4
 8000eee:	f7ff fee9 	bl	8000cc4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	827b      	strh	r3, [r7, #18]
 8000ef6:	e07a      	b.n	8000fee <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000ef8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000efc:	2b0c      	cmp	r3, #12
 8000efe:	d028      	beq.n	8000f52 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000f00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f04:	2b10      	cmp	r3, #16
 8000f06:	d108      	bne.n	8000f1a <lcd_ShowChar+0xae>
 8000f08:	78fa      	ldrb	r2, [r7, #3]
 8000f0a:	8a7b      	ldrh	r3, [r7, #18]
 8000f0c:	493c      	ldr	r1, [pc, #240]	@ (8001000 <lcd_ShowChar+0x194>)
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	440a      	add	r2, r1
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	75fb      	strb	r3, [r7, #23]
 8000f18:	e01b      	b.n	8000f52 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f1e:	2b18      	cmp	r3, #24
 8000f20:	d10b      	bne.n	8000f3a <lcd_ShowChar+0xce>
 8000f22:	78fa      	ldrb	r2, [r7, #3]
 8000f24:	8a79      	ldrh	r1, [r7, #18]
 8000f26:	4837      	ldr	r0, [pc, #220]	@ (8001004 <lcd_ShowChar+0x198>)
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	4403      	add	r3, r0
 8000f32:	440b      	add	r3, r1
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	75fb      	strb	r3, [r7, #23]
 8000f38:	e00b      	b.n	8000f52 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000f3a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f3e:	2b20      	cmp	r3, #32
 8000f40:	d15a      	bne.n	8000ff8 <lcd_ShowChar+0x18c>
 8000f42:	78fa      	ldrb	r2, [r7, #3]
 8000f44:	8a7b      	ldrh	r3, [r7, #18]
 8000f46:	4930      	ldr	r1, [pc, #192]	@ (8001008 <lcd_ShowChar+0x19c>)
 8000f48:	0192      	lsls	r2, r2, #6
 8000f4a:	440a      	add	r2, r1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	75bb      	strb	r3, [r7, #22]
 8000f56:	e044      	b.n	8000fe2 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000f58:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d120      	bne.n	8000fa2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000f60:	7dfa      	ldrb	r2, [r7, #23]
 8000f62:	7dbb      	ldrb	r3, [r7, #22]
 8000f64:	fa42 f303 	asr.w	r3, r2, r3
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <lcd_ShowChar+0x10e>
 8000f70:	883b      	ldrh	r3, [r7, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fe84 	bl	8000c80 <LCD_WR_DATA>
 8000f78:	e003      	b.n	8000f82 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000f7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fe7f 	bl	8000c80 <LCD_WR_DATA>
				m++;
 8000f82:	7d7b      	ldrb	r3, [r7, #21]
 8000f84:	3301      	adds	r3, #1
 8000f86:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000f88:	7d7b      	ldrb	r3, [r7, #21]
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f90:	fb01 f202 	mul.w	r2, r1, r2
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d11f      	bne.n	8000fdc <lcd_ShowChar+0x170>
				{
					m=0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	757b      	strb	r3, [r7, #21]
					break;
 8000fa0:	e022      	b.n	8000fe8 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000fa2:	7dfa      	ldrb	r2, [r7, #23]
 8000fa4:	7dbb      	ldrb	r3, [r7, #22]
 8000fa6:	fa42 f303 	asr.w	r3, r2, r3
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <lcd_ShowChar+0x152>
 8000fb2:	883a      	ldrh	r2, [r7, #0]
 8000fb4:	88b9      	ldrh	r1, [r7, #4]
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff3f 	bl	8000e3c <lcd_DrawPoint>
				x++;
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000fc4:	88fa      	ldrh	r2, [r7, #6]
 8000fc6:	8a3b      	ldrh	r3, [r7, #16]
 8000fc8:	1ad2      	subs	r2, r2, r3
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d105      	bne.n	8000fdc <lcd_ShowChar+0x170>
				{
					x=x0;
 8000fd0:	8a3b      	ldrh	r3, [r7, #16]
 8000fd2:	80fb      	strh	r3, [r7, #6]
					y++;
 8000fd4:	88bb      	ldrh	r3, [r7, #4]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	80bb      	strh	r3, [r7, #4]
					break;
 8000fda:	e005      	b.n	8000fe8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000fdc:	7dbb      	ldrb	r3, [r7, #22]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	75bb      	strb	r3, [r7, #22]
 8000fe2:	7dbb      	ldrb	r3, [r7, #22]
 8000fe4:	2b07      	cmp	r3, #7
 8000fe6:	d9b7      	bls.n	8000f58 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000fe8:	8a7b      	ldrh	r3, [r7, #18]
 8000fea:	3301      	adds	r3, #1
 8000fec:	827b      	strh	r3, [r7, #18]
 8000fee:	8a7a      	ldrh	r2, [r7, #18]
 8000ff0:	89bb      	ldrh	r3, [r7, #12]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d380      	bcc.n	8000ef8 <lcd_ShowChar+0x8c>
 8000ff6:	e000      	b.n	8000ffa <lcd_ShowChar+0x18e>
		else return;
 8000ff8:	bf00      	nop
				}
			}
		}
	}
}
 8000ffa:	371c      	adds	r7, #28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	08007fb4 	.word	0x08007fb4
 8001004:	080085a4 	.word	0x080085a4
 8001008:	08009774 	.word	0x08009774

0800100c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 800101c:	2301      	movs	r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001020:	e004      	b.n	800102c <mypow+0x20>
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	71ba      	strb	r2, [r7, #6]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f5      	bne.n	8001022 <mypow+0x16>
	return result;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b089      	sub	sp, #36	@ 0x24
 8001048:	af04      	add	r7, sp, #16
 800104a:	4604      	mov	r4, r0
 800104c:	4608      	mov	r0, r1
 800104e:	4611      	mov	r1, r2
 8001050:	461a      	mov	r2, r3
 8001052:	4623      	mov	r3, r4
 8001054:	80fb      	strh	r3, [r7, #6]
 8001056:	4603      	mov	r3, r0
 8001058:	80bb      	strh	r3, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	807b      	strh	r3, [r7, #2]
 800105e:	4613      	mov	r3, r2
 8001060:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001062:	2300      	movs	r3, #0
 8001064:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001066:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800106a:	085b      	lsrs	r3, r3, #1
 800106c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e059      	b.n	8001128 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001074:	887c      	ldrh	r4, [r7, #2]
 8001076:	787a      	ldrb	r2, [r7, #1]
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	3b01      	subs	r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4619      	mov	r1, r3
 8001084:	200a      	movs	r0, #10
 8001086:	f7ff ffc1 	bl	800100c <mypow>
 800108a:	4603      	mov	r3, r0
 800108c:	fbb4 f1f3 	udiv	r1, r4, r3
 8001090:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <lcd_ShowIntNum+0xf8>)
 8001092:	fba3 2301 	umull	r2, r3, r3, r1
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	1aca      	subs	r2, r1, r3
 80010a2:	4613      	mov	r3, r2
 80010a4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d121      	bne.n	80010f0 <lcd_ShowIntNum+0xac>
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	787b      	ldrb	r3, [r7, #1]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	429a      	cmp	r2, r3
 80010b4:	da1c      	bge.n	80010f0 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80010b6:	7b3b      	ldrb	r3, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d117      	bne.n	80010ec <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	7b7b      	ldrb	r3, [r7, #13]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	fb12 f303 	smulbb	r3, r2, r3
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	4413      	add	r3, r2
 80010ce:	b298      	uxth	r0, r3
 80010d0:	8c3a      	ldrh	r2, [r7, #32]
 80010d2:	88b9      	ldrh	r1, [r7, #4]
 80010d4:	2300      	movs	r3, #0
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	4613      	mov	r3, r2
 80010e4:	2220      	movs	r2, #32
 80010e6:	f7ff fec1 	bl	8000e6c <lcd_ShowChar>
				continue;
 80010ea:	e01a      	b.n	8001122 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	7b7b      	ldrb	r3, [r7, #13]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	fb12 f303 	smulbb	r3, r2, r3
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	4413      	add	r3, r2
 8001102:	b298      	uxth	r0, r3
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	3330      	adds	r3, #48	@ 0x30
 8001108:	b2da      	uxtb	r2, r3
 800110a:	8c3c      	ldrh	r4, [r7, #32]
 800110c:	88b9      	ldrh	r1, [r7, #4]
 800110e:	2300      	movs	r3, #0
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4623      	mov	r3, r4
 800111e:	f7ff fea5 	bl	8000e6c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	3301      	adds	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	787b      	ldrb	r3, [r7, #1]
 800112c:	429a      	cmp	r2, r3
 800112e:	d3a1      	bcc.n	8001074 <lcd_ShowIntNum+0x30>
	}
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
 800113a:	bf00      	nop
 800113c:	cccccccd 	.word	0xcccccccd

08001140 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <lcd_SetDir+0x44>)
 800115c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001160:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <lcd_SetDir+0x44>)
 8001164:	22f0      	movs	r2, #240	@ 0xf0
 8001166:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001168:	e006      	b.n	8001178 <lcd_SetDir+0x38>
		lcddev.width=240;
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <lcd_SetDir+0x44>)
 800116c:	22f0      	movs	r2, #240	@ 0xf0
 800116e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <lcd_SetDir+0x44>)
 8001172:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001176:	805a      	strh	r2, [r3, #2]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	20000170 	.word	0x20000170

08001188 <lcd_init>:


void lcd_init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001192:	48aa      	ldr	r0, [pc, #680]	@ (800143c <lcd_init+0x2b4>)
 8001194:	f002 f88a 	bl	80032ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001198:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800119c:	f001 fd22 	bl	8002be4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a6:	48a5      	ldr	r0, [pc, #660]	@ (800143c <lcd_init+0x2b4>)
 80011a8:	f002 f880 	bl	80032ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011b0:	f001 fd18 	bl	8002be4 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff ffc3 	bl	8001140 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80011ba:	20d3      	movs	r0, #211	@ 0xd3
 80011bc:	f7ff fd50 	bl	8000c60 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80011c0:	f7ff fd6e 	bl	8000ca0 <LCD_RD_DATA>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001440 <lcd_init+0x2b8>)
 80011ca:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80011cc:	f7ff fd68 	bl	8000ca0 <LCD_RD_DATA>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b9a      	ldr	r3, [pc, #616]	@ (8001440 <lcd_init+0x2b8>)
 80011d6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80011d8:	f7ff fd62 	bl	8000ca0 <LCD_RD_DATA>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b97      	ldr	r3, [pc, #604]	@ (8001440 <lcd_init+0x2b8>)
 80011e2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80011e4:	4b96      	ldr	r3, [pc, #600]	@ (8001440 <lcd_init+0x2b8>)
 80011e6:	889b      	ldrh	r3, [r3, #4]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b94      	ldr	r3, [pc, #592]	@ (8001440 <lcd_init+0x2b8>)
 80011ee:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80011f0:	f7ff fd56 	bl	8000ca0 <LCD_RD_DATA>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b91      	ldr	r3, [pc, #580]	@ (8001440 <lcd_init+0x2b8>)
 80011fa:	889b      	ldrh	r3, [r3, #4]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b8f      	ldr	r3, [pc, #572]	@ (8001440 <lcd_init+0x2b8>)
 8001202:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001204:	20cf      	movs	r0, #207	@ 0xcf
 8001206:	f7ff fd2b 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff fd38 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001210:	20c1      	movs	r0, #193	@ 0xc1
 8001212:	f7ff fd35 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001216:	2030      	movs	r0, #48	@ 0x30
 8001218:	f7ff fd32 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800121c:	20ed      	movs	r0, #237	@ 0xed
 800121e:	f7ff fd1f 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001222:	2064      	movs	r0, #100	@ 0x64
 8001224:	f7ff fd2c 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001228:	2003      	movs	r0, #3
 800122a:	f7ff fd29 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800122e:	2012      	movs	r0, #18
 8001230:	f7ff fd26 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001234:	2081      	movs	r0, #129	@ 0x81
 8001236:	f7ff fd23 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800123a:	20e8      	movs	r0, #232	@ 0xe8
 800123c:	f7ff fd10 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001240:	2085      	movs	r0, #133	@ 0x85
 8001242:	f7ff fd1d 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001246:	2010      	movs	r0, #16
 8001248:	f7ff fd1a 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800124c:	207a      	movs	r0, #122	@ 0x7a
 800124e:	f7ff fd17 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001252:	20cb      	movs	r0, #203	@ 0xcb
 8001254:	f7ff fd04 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001258:	2039      	movs	r0, #57	@ 0x39
 800125a:	f7ff fd11 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800125e:	202c      	movs	r0, #44	@ 0x2c
 8001260:	f7ff fd0e 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff fd0b 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800126a:	2034      	movs	r0, #52	@ 0x34
 800126c:	f7ff fd08 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001270:	2002      	movs	r0, #2
 8001272:	f7ff fd05 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001276:	20f7      	movs	r0, #247	@ 0xf7
 8001278:	f7ff fcf2 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800127c:	2020      	movs	r0, #32
 800127e:	f7ff fcff 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001282:	20ea      	movs	r0, #234	@ 0xea
 8001284:	f7ff fcec 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fcf9 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fcf6 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001294:	20c0      	movs	r0, #192	@ 0xc0
 8001296:	f7ff fce3 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800129a:	201b      	movs	r0, #27
 800129c:	f7ff fcf0 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80012a0:	20c1      	movs	r0, #193	@ 0xc1
 80012a2:	f7ff fcdd 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff fcea 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80012ac:	20c5      	movs	r0, #197	@ 0xc5
 80012ae:	f7ff fcd7 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80012b2:	2030      	movs	r0, #48	@ 0x30
 80012b4:	f7ff fce4 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80012b8:	2030      	movs	r0, #48	@ 0x30
 80012ba:	f7ff fce1 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80012be:	20c7      	movs	r0, #199	@ 0xc7
 80012c0:	f7ff fcce 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80012c4:	20b7      	movs	r0, #183	@ 0xb7
 80012c6:	f7ff fcdb 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80012ca:	2036      	movs	r0, #54	@ 0x36
 80012cc:	f7ff fcc8 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80012d0:	2008      	movs	r0, #8
 80012d2:	f7ff fcd5 	bl	8000c80 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80012d6:	203a      	movs	r0, #58	@ 0x3a
 80012d8:	f7ff fcc2 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80012dc:	2055      	movs	r0, #85	@ 0x55
 80012de:	f7ff fccf 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80012e2:	20b1      	movs	r0, #177	@ 0xb1
 80012e4:	f7ff fcbc 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fcc9 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80012ee:	201a      	movs	r0, #26
 80012f0:	f7ff fcc6 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80012f4:	20b6      	movs	r0, #182	@ 0xb6
 80012f6:	f7ff fcb3 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80012fa:	200a      	movs	r0, #10
 80012fc:	f7ff fcc0 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001300:	20a2      	movs	r0, #162	@ 0xa2
 8001302:	f7ff fcbd 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001306:	20f2      	movs	r0, #242	@ 0xf2
 8001308:	f7ff fcaa 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fcb7 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001312:	2026      	movs	r0, #38	@ 0x26
 8001314:	f7ff fca4 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff fcb1 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800131e:	20e0      	movs	r0, #224	@ 0xe0
 8001320:	f7ff fc9e 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001324:	200f      	movs	r0, #15
 8001326:	f7ff fcab 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800132a:	202a      	movs	r0, #42	@ 0x2a
 800132c:	f7ff fca8 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001330:	2028      	movs	r0, #40	@ 0x28
 8001332:	f7ff fca5 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001336:	2008      	movs	r0, #8
 8001338:	f7ff fca2 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800133c:	200e      	movs	r0, #14
 800133e:	f7ff fc9f 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001342:	2008      	movs	r0, #8
 8001344:	f7ff fc9c 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001348:	2054      	movs	r0, #84	@ 0x54
 800134a:	f7ff fc99 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800134e:	20a9      	movs	r0, #169	@ 0xa9
 8001350:	f7ff fc96 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001354:	2043      	movs	r0, #67	@ 0x43
 8001356:	f7ff fc93 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800135a:	200a      	movs	r0, #10
 800135c:	f7ff fc90 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001360:	200f      	movs	r0, #15
 8001362:	f7ff fc8d 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff fc8a 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fc87 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fc84 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff fc81 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800137e:	20e1      	movs	r0, #225	@ 0xe1
 8001380:	f7ff fc6e 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff fc7b 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800138a:	2015      	movs	r0, #21
 800138c:	f7ff fc78 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001390:	2017      	movs	r0, #23
 8001392:	f7ff fc75 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001396:	2007      	movs	r0, #7
 8001398:	f7ff fc72 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800139c:	2011      	movs	r0, #17
 800139e:	f7ff fc6f 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80013a2:	2006      	movs	r0, #6
 80013a4:	f7ff fc6c 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80013a8:	202b      	movs	r0, #43	@ 0x2b
 80013aa:	f7ff fc69 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80013ae:	2056      	movs	r0, #86	@ 0x56
 80013b0:	f7ff fc66 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80013b4:	203c      	movs	r0, #60	@ 0x3c
 80013b6:	f7ff fc63 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80013ba:	2005      	movs	r0, #5
 80013bc:	f7ff fc60 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80013c0:	2010      	movs	r0, #16
 80013c2:	f7ff fc5d 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013c6:	200f      	movs	r0, #15
 80013c8:	f7ff fc5a 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80013cc:	203f      	movs	r0, #63	@ 0x3f
 80013ce:	f7ff fc57 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80013d2:	203f      	movs	r0, #63	@ 0x3f
 80013d4:	f7ff fc54 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013d8:	200f      	movs	r0, #15
 80013da:	f7ff fc51 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80013de:	202b      	movs	r0, #43	@ 0x2b
 80013e0:	f7ff fc3e 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fc4b 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fc48 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff fc45 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80013f6:	203f      	movs	r0, #63	@ 0x3f
 80013f8:	f7ff fc42 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80013fc:	202a      	movs	r0, #42	@ 0x2a
 80013fe:	f7ff fc2f 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff fc3c 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff fc39 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fc36 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001414:	20ef      	movs	r0, #239	@ 0xef
 8001416:	f7ff fc33 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800141a:	2011      	movs	r0, #17
 800141c:	f7ff fc20 	bl	8000c60 <LCD_WR_REG>
	HAL_Delay(120);
 8001420:	2078      	movs	r0, #120	@ 0x78
 8001422:	f001 fbdf 	bl	8002be4 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001426:	2029      	movs	r0, #41	@ 0x29
 8001428:	f7ff fc1a 	bl	8000c60 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001432:	4804      	ldr	r0, [pc, #16]	@ (8001444 <lcd_init+0x2bc>)
 8001434:	f001 ff3a 	bl	80032ac <HAL_GPIO_WritePin>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40020800 	.word	0x40020800
 8001440:	20000170 	.word	0x20000170
 8001444:	40020000 	.word	0x40020000

08001448 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b08b      	sub	sp, #44	@ 0x2c
 800144c:	af04      	add	r7, sp, #16
 800144e:	60ba      	str	r2, [r7, #8]
 8001450:	461a      	mov	r2, r3
 8001452:	4603      	mov	r3, r0
 8001454:	81fb      	strh	r3, [r7, #14]
 8001456:	460b      	mov	r3, r1
 8001458:	81bb      	strh	r3, [r7, #12]
 800145a:	4613      	mov	r3, r2
 800145c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001466:	e048      	b.n	80014fa <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d145      	bne.n	80014fa <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800146e:	89fa      	ldrh	r2, [r7, #14]
 8001470:	4b26      	ldr	r3, [pc, #152]	@ (800150c <lcd_ShowStr+0xc4>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800147a:	085b      	lsrs	r3, r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	1acb      	subs	r3, r1, r3
 8001480:	429a      	cmp	r2, r3
 8001482:	dc3f      	bgt.n	8001504 <lcd_ShowStr+0xbc>
 8001484:	89ba      	ldrh	r2, [r7, #12]
 8001486:	4b21      	ldr	r3, [pc, #132]	@ (800150c <lcd_ShowStr+0xc4>)
 8001488:	885b      	ldrh	r3, [r3, #2]
 800148a:	4619      	mov	r1, r3
 800148c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001490:	1acb      	subs	r3, r1, r3
 8001492:	429a      	cmp	r2, r3
 8001494:	dc36      	bgt.n	8001504 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b80      	cmp	r3, #128	@ 0x80
 800149c:	d902      	bls.n	80014a4 <lcd_ShowStr+0x5c>
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
 80014a2:	e02a      	b.n	80014fa <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b0d      	cmp	r3, #13
 80014aa:	d10b      	bne.n	80014c4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80014ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	89bb      	ldrh	r3, [r7, #12]
 80014b4:	4413      	add	r3, r2
 80014b6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80014b8:	8abb      	ldrh	r3, [r7, #20]
 80014ba:	81fb      	strh	r3, [r7, #14]
					str++;
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	3301      	adds	r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	e017      	b.n	80014f4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	88fc      	ldrh	r4, [r7, #6]
 80014ca:	89b9      	ldrh	r1, [r7, #12]
 80014cc:	89f8      	ldrh	r0, [r7, #14]
 80014ce:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4623      	mov	r3, r4
 80014e0:	f7ff fcc4 	bl	8000e6c <lcd_ShowChar>
					x+=sizey/2;
 80014e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	89fb      	ldrh	r3, [r7, #14]
 80014f0:	4413      	add	r3, r2
 80014f2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1b2      	bne.n	8001468 <lcd_ShowStr+0x20>
 8001502:	e000      	b.n	8001506 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001504:	bf00      	nop
			}
		}
	}
}
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	20000170 	.word	0x20000170

08001510 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001514:	2201      	movs	r2, #1
 8001516:	2140      	movs	r1, #64	@ 0x40
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <led7_init+0x14>)
 800151a:	f001 fec7 	bl	80032ac <HAL_GPIO_WritePin>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40021800 	.word	0x40021800

08001528 <led7_Scan>:

void led7_Scan(){
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800152c:	4b3f      	ldr	r3, [pc, #252]	@ (800162c <led7_Scan+0x104>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b3d      	ldr	r3, [pc, #244]	@ (800162c <led7_Scan+0x104>)
 8001536:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001538:	4b3d      	ldr	r3, [pc, #244]	@ (8001630 <led7_Scan+0x108>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a3d      	ldr	r2, [pc, #244]	@ (8001634 <led7_Scan+0x10c>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	b21a      	sxth	r2, r3
 8001544:	4b39      	ldr	r3, [pc, #228]	@ (800162c <led7_Scan+0x104>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21b      	sxth	r3, r3
 800154e:	b29a      	uxth	r2, r3
 8001550:	4b36      	ldr	r3, [pc, #216]	@ (800162c <led7_Scan+0x104>)
 8001552:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001554:	4b36      	ldr	r3, [pc, #216]	@ (8001630 <led7_Scan+0x108>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d847      	bhi.n	80015ec <led7_Scan+0xc4>
 800155c:	a201      	add	r2, pc, #4	@ (adr r2, 8001564 <led7_Scan+0x3c>)
 800155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001562:	bf00      	nop
 8001564:	08001575 	.word	0x08001575
 8001568:	08001593 	.word	0x08001593
 800156c:	080015b1 	.word	0x080015b1
 8001570:	080015cf 	.word	0x080015cf
	case 0:
		spi_buffer |= 0x00b0;
 8001574:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <led7_Scan+0x104>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <led7_Scan+0x104>)
 8001580:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001582:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <led7_Scan+0x104>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b27      	ldr	r3, [pc, #156]	@ (800162c <led7_Scan+0x104>)
 800158e:	801a      	strh	r2, [r3, #0]
		break;
 8001590:	e02d      	b.n	80015ee <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001592:	4b26      	ldr	r3, [pc, #152]	@ (800162c <led7_Scan+0x104>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b23      	ldr	r3, [pc, #140]	@ (800162c <led7_Scan+0x104>)
 800159e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80015a0:	4b22      	ldr	r3, [pc, #136]	@ (800162c <led7_Scan+0x104>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	f023 0320 	bic.w	r3, r3, #32
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b20      	ldr	r3, [pc, #128]	@ (800162c <led7_Scan+0x104>)
 80015ac:	801a      	strh	r2, [r3, #0]
		break;
 80015ae:	e01e      	b.n	80015ee <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <led7_Scan+0x104>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <led7_Scan+0x104>)
 80015bc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <led7_Scan+0x104>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	f023 0310 	bic.w	r3, r3, #16
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b18      	ldr	r3, [pc, #96]	@ (800162c <led7_Scan+0x104>)
 80015ca:	801a      	strh	r2, [r3, #0]
		break;
 80015cc:	e00f      	b.n	80015ee <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <led7_Scan+0x104>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <led7_Scan+0x104>)
 80015da:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80015dc:	4b13      	ldr	r3, [pc, #76]	@ (800162c <led7_Scan+0x104>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <led7_Scan+0x104>)
 80015e8:	801a      	strh	r2, [r3, #0]
		break;
 80015ea:	e000      	b.n	80015ee <led7_Scan+0xc6>
	default:
		break;
 80015ec:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <led7_Scan+0x108>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	425a      	negs	r2, r3
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	f002 0203 	and.w	r2, r2, #3
 80015fe:	bf58      	it	pl
 8001600:	4253      	negpl	r3, r2
 8001602:	4a0b      	ldr	r2, [pc, #44]	@ (8001630 <led7_Scan+0x108>)
 8001604:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2140      	movs	r1, #64	@ 0x40
 800160a:	480b      	ldr	r0, [pc, #44]	@ (8001638 <led7_Scan+0x110>)
 800160c:	f001 fe4e 	bl	80032ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001610:	2301      	movs	r3, #1
 8001612:	2202      	movs	r2, #2
 8001614:	4905      	ldr	r1, [pc, #20]	@ (800162c <led7_Scan+0x104>)
 8001616:	4809      	ldr	r0, [pc, #36]	@ (800163c <led7_Scan+0x114>)
 8001618:	f003 fc71 	bl	8004efe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800161c:	2201      	movs	r2, #1
 800161e:	2140      	movs	r1, #64	@ 0x40
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <led7_Scan+0x110>)
 8001622:	f001 fe43 	bl	80032ac <HAL_GPIO_WritePin>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000004 	.word	0x20000004
 8001630:	20000178 	.word	0x20000178
 8001634:	20000000 	.word	0x20000000
 8001638:	40021800 	.word	0x40021800
 800163c:	200001a0 	.word	0x200001a0

08001640 <switchMode>:
uint8_t uart_hour_flag = 0;
uint8_t uart_minute_flag = 0;
uint8_t uart_hour = 0;
uint8_t count_request_uart = 0;
// Mode switching function
void switchMode() {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af04      	add	r7, sp, #16
    currentMode = (currentMode + 1) % 4; // Cycle between DISPLAY_MODE, SETTING_MODE, ALARM_MODE
 8001646:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <switchMode+0xa4>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	425a      	negs	r2, r3
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	f002 0203 	and.w	r2, r2, #3
 8001656:	bf58      	it	pl
 8001658:	4253      	negpl	r3, r2
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <switchMode+0xa4>)
 800165e:	701a      	strb	r2, [r3, #0]
    lcd_Clear(BLACK);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fb7b 	bl	8000d5c <lcd_Clear>
    displayModeHeader();
 8001666:	f000 f879 	bl	800175c <displayModeHeader>
    switch(currentMode){
 800166a:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <switchMode+0xa4>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d002      	beq.n	8001678 <switchMode+0x38>
 8001672:	2b03      	cmp	r3, #3
 8001674:	d01f      	beq.n	80016b6 <switchMode+0x76>
    	lcd_ShowStr(10, 30, (uint8_t*)"Updating hour...", GREEN, BLACK, 24, 1);
    	uart_hour_flag = 1;
    	count_request_uart = 0;
    	break;
    default:
    	break;
 8001676:	e032      	b.n	80016de <switchMode+0x9e>
        ds3231_ReadTime();
 8001678:	f7ff f850 	bl	800071c <ds3231_ReadTime>
        pending_hours = ds3231_hours;
 800167c:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <switchMode+0xa8>)
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <switchMode+0xac>)
 8001682:	701a      	strb	r2, [r3, #0]
        pending_min = ds3231_min;
 8001684:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <switchMode+0xb0>)
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <switchMode+0xb4>)
 800168a:	701a      	strb	r2, [r3, #0]
        pending_sec = ds3231_sec;
 800168c:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <switchMode+0xb8>)
 800168e:	781a      	ldrb	r2, [r3, #0]
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <switchMode+0xbc>)
 8001692:	701a      	strb	r2, [r3, #0]
        pending_date = ds3231_date;
 8001694:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <switchMode+0xc0>)
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	4b1a      	ldr	r3, [pc, #104]	@ (8001704 <switchMode+0xc4>)
 800169a:	701a      	strb	r2, [r3, #0]
        pending_day = ds3231_day;
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <switchMode+0xc8>)
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <switchMode+0xcc>)
 80016a2:	701a      	strb	r2, [r3, #0]
        pending_month = ds3231_month;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <switchMode+0xd0>)
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <switchMode+0xd4>)
 80016aa:	701a      	strb	r2, [r3, #0]
        pending_year = ds3231_year;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <switchMode+0xd8>)
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <switchMode+0xdc>)
 80016b2:	701a      	strb	r2, [r3, #0]
        break;
 80016b4:	e013      	b.n	80016de <switchMode+0x9e>
    	lcd_ShowStr(10, 30, (uint8_t*)"Updating hour...", GREEN, BLACK, 24, 1);
 80016b6:	2301      	movs	r3, #1
 80016b8:	9302      	str	r3, [sp, #8]
 80016ba:	2318      	movs	r3, #24
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	2300      	movs	r3, #0
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80016c6:	4a16      	ldr	r2, [pc, #88]	@ (8001720 <switchMode+0xe0>)
 80016c8:	211e      	movs	r1, #30
 80016ca:	200a      	movs	r0, #10
 80016cc:	f7ff febc 	bl	8001448 <lcd_ShowStr>
    	uart_hour_flag = 1;
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <switchMode+0xe4>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
    	count_request_uart = 0;
 80016d6:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <switchMode+0xe8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
    	break;
 80016dc:	bf00      	nop
    }
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000017c 	.word	0x2000017c
 80016e8:	200000bf 	.word	0x200000bf
 80016ec:	2000017f 	.word	0x2000017f
 80016f0:	200000c0 	.word	0x200000c0
 80016f4:	20000180 	.word	0x20000180
 80016f8:	200000c1 	.word	0x200000c1
 80016fc:	20000181 	.word	0x20000181
 8001700:	200000c2 	.word	0x200000c2
 8001704:	20000183 	.word	0x20000183
 8001708:	200000c3 	.word	0x200000c3
 800170c:	20000182 	.word	0x20000182
 8001710:	200000c4 	.word	0x200000c4
 8001714:	20000184 	.word	0x20000184
 8001718:	200000c5 	.word	0x200000c5
 800171c:	20000185 	.word	0x20000185
 8001720:	08007ea8 	.word	0x08007ea8
 8001724:	20000189 	.word	0x20000189
 8001728:	2000018b 	.word	0x2000018b

0800172c <get_mode>:

unsigned char* get_mode(ClockMode mode) {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
        (unsigned char*)"SET ALARM MODE",
        (unsigned char*)"UART MODE",
        (unsigned char*)"ERROR" // Default
    };

    if (mode >= 0 && mode < sizeof(modeStrings) / sizeof(modeStrings[0])) {
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b04      	cmp	r3, #4
 800173a:	d804      	bhi.n	8001746 <get_mode+0x1a>
        return modeStrings[mode];
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4a06      	ldr	r2, [pc, #24]	@ (8001758 <get_mode+0x2c>)
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	e001      	b.n	800174a <get_mode+0x1e>
    } else {
        return modeStrings[sizeof(modeStrings) / sizeof(modeStrings[0]) - 1]; // Return "UNKNOWN" if out of range
 8001746:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <get_mode+0x2c>)
 8001748:	691b      	ldr	r3, [r3, #16]
    }
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000008 	.word	0x20000008

0800175c <displayModeHeader>:

// Display mode and header
void displayModeHeader() {
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af04      	add	r7, sp, #16
    lcd_ShowStr(10, 10, get_mode(currentMode), GREEN, BLACK, 24, 1);
 8001762:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <displayModeHeader+0x30>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffe0 	bl	800172c <get_mode>
 800176c:	4602      	mov	r2, r0
 800176e:	2301      	movs	r3, #1
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	2318      	movs	r3, #24
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	2300      	movs	r3, #0
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800177e:	210a      	movs	r1, #10
 8001780:	200a      	movs	r0, #10
 8001782:	f7ff fe61 	bl	8001448 <lcd_ShowStr>
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	2000017c 	.word	0x2000017c

08001790 <isNextParameterButtonPressed>:

// Increment parameter selector button
uint8_t isNextParameterButtonPressed() {
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
    return (button_count[15] == 1) ? 1 : 0;
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <isNextParameterButtonPressed+0x1c>)
 8001796:	8bdb      	ldrh	r3, [r3, #30]
 8001798:	2b01      	cmp	r3, #1
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	20000094 	.word	0x20000094

080017b0 <isResetToSecondsButtonPressed>:

// Reset to seconds parameter button
uint8_t isResetToSecondsButtonPressed() {
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
    return (button_count[11] == 1) ? 1 : 0;
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <isResetToSecondsButtonPressed+0x1c>)
 80017b6:	8adb      	ldrh	r3, [r3, #22]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	20000094 	.word	0x20000094

080017d0 <isButtonUpPressed>:

// Increment value of the current parameter button
uint8_t isButtonUpPressed() {
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
    return (button_count[3] == 1 || button_count[3] >= 40) ? 1 : 0;
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <isButtonUpPressed+0x28>)
 80017d6:	88db      	ldrh	r3, [r3, #6]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d003      	beq.n	80017e4 <isButtonUpPressed+0x14>
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <isButtonUpPressed+0x28>)
 80017de:	88db      	ldrh	r3, [r3, #6]
 80017e0:	2b27      	cmp	r3, #39	@ 0x27
 80017e2:	d901      	bls.n	80017e8 <isButtonUpPressed+0x18>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <isButtonUpPressed+0x1a>
 80017e8:	2300      	movs	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000094 	.word	0x20000094

080017fc <isButtonEnterPressed>:

// Save parameter change button
uint8_t isButtonEnterPressed() {
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
    return (button_count[12] == 1) ? 1 : 0;
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <isButtonEnterPressed+0x1c>)
 8001802:	8b1b      	ldrh	r3, [r3, #24]
 8001804:	2b01      	cmp	r3, #1
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	b2db      	uxtb	r3, r3
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	20000094 	.word	0x20000094

0800181c <handleSettingMode>:

void handleSettingMode() {
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
    static uint32_t lastBlinkTime = 0;
//    static uint32_t holdTime = 0;
//    uint8_t holdInProgress = 0;

    // Blink the currently selected parameter at 2Hz
    if (HAL_GetTick() - lastBlinkTime >= 500) {
 8001820:	f001 f9d4 	bl	8002bcc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	4b34      	ldr	r3, [pc, #208]	@ (80018f8 <handleSettingMode+0xdc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001830:	d30e      	bcc.n	8001850 <handleSettingMode+0x34>
        isSetting = !isSetting;
 8001832:	4b32      	ldr	r3, [pc, #200]	@ (80018fc <handleSettingMode+0xe0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf0c      	ite	eq
 800183a:	2301      	moveq	r3, #1
 800183c:	2300      	movne	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	4b2e      	ldr	r3, [pc, #184]	@ (80018fc <handleSettingMode+0xe0>)
 8001844:	701a      	strb	r2, [r3, #0]
        lastBlinkTime = HAL_GetTick();
 8001846:	f001 f9c1 	bl	8002bcc <HAL_GetTick>
 800184a:	4603      	mov	r3, r0
 800184c:	4a2a      	ldr	r2, [pc, #168]	@ (80018f8 <handleSettingMode+0xdc>)
 800184e:	6013      	str	r3, [r2, #0]
    }

    // Display only the selected parameter to be adjusted
    displayOnlySelectedParameter(isSetting);
 8001850:	4b2a      	ldr	r3, [pc, #168]	@ (80018fc <handleSettingMode+0xe0>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f000 f989 	bl	8001b6c <displayOnlySelectedParameter>

    // Cycle to the next parameter when next parameter button is pressed
    if (isNextParameterButtonPressed()) {
 800185a:	f7ff ff99 	bl	8001790 <isNextParameterButtonPressed>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00c      	beq.n	800187e <handleSettingMode+0x62>
        currentSetting = (currentSetting + 1) % 8; // Cycles through 0 (seconds), 1 (minutes), 2 (hours)
 8001864:	4b26      	ldr	r3, [pc, #152]	@ (8001900 <handleSettingMode+0xe4>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	425a      	negs	r2, r3
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	f002 0207 	and.w	r2, r2, #7
 8001874:	bf58      	it	pl
 8001876:	4253      	negpl	r3, r2
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <handleSettingMode+0xe4>)
 800187c:	701a      	strb	r2, [r3, #0]
    }

    // Reset current setting to seconds when reset button is pressed
    if (isResetToSecondsButtonPressed()) {
 800187e:	f7ff ff97 	bl	80017b0 <isResetToSecondsButtonPressed>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <handleSettingMode+0x72>
        currentSetting = 0; // Reset to seconds
 8001888:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <handleSettingMode+0xe4>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
    }

    // Increment behavior based on button press duration
    if(isButtonUpPressed()&&button_count[3] >= 40){
 800188e:	f7ff ff9f 	bl	80017d0 <isButtonUpPressed>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00d      	beq.n	80018b4 <handleSettingMode+0x98>
 8001898:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <handleSettingMode+0xe8>)
 800189a:	88db      	ldrh	r3, [r3, #6]
 800189c:	2b27      	cmp	r3, #39	@ 0x27
 800189e:	d909      	bls.n	80018b4 <handleSettingMode+0x98>
        if ((button_count[3] - 40) % 4 == 0)
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <handleSettingMode+0xe8>)
 80018a2:	88db      	ldrh	r3, [r3, #6]
 80018a4:	3b28      	subs	r3, #40	@ 0x28
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10d      	bne.n	80018ca <handleSettingMode+0xae>
		incrementCurrentSetting();
 80018ae:	f000 f82b 	bl	8001908 <incrementCurrentSetting>
        if ((button_count[3] - 40) % 4 == 0)
 80018b2:	e00a      	b.n	80018ca <handleSettingMode+0xae>
	} else if(isButtonUpPressed()&&button_count[3] < 40){
 80018b4:	f7ff ff8c 	bl	80017d0 <isButtonUpPressed>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d005      	beq.n	80018ca <handleSettingMode+0xae>
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <handleSettingMode+0xe8>)
 80018c0:	88db      	ldrh	r3, [r3, #6]
 80018c2:	2b27      	cmp	r3, #39	@ 0x27
 80018c4:	d801      	bhi.n	80018ca <handleSettingMode+0xae>
		incrementCurrentSetting();
 80018c6:	f000 f81f 	bl	8001908 <incrementCurrentSetting>
	}

    // Save the modified value only when pressing the Enter button
    if (isButtonEnterPressed()) {
 80018ca:	f7ff ff97 	bl	80017fc <isButtonEnterPressed>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00e      	beq.n	80018f2 <handleSettingMode+0xd6>
        savePendingValues();
 80018d4:	f000 f8f2 	bl	8001abc <savePendingValues>
        currentSetting = (currentSetting + 1) % 8;
 80018d8:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <handleSettingMode+0xe4>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	425a      	negs	r2, r3
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	f002 0207 	and.w	r2, r2, #7
 80018e8:	bf58      	it	pl
 80018ea:	4253      	negpl	r3, r2
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <handleSettingMode+0xe4>)
 80018f0:	701a      	strb	r2, [r3, #0]
    }
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000190 	.word	0x20000190
 80018fc:	2000017e 	.word	0x2000017e
 8001900:	2000017d 	.word	0x2000017d
 8001904:	20000094 	.word	0x20000094

08001908 <incrementCurrentSetting>:

// Increment the currently selected setting
void incrementCurrentSetting() {
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
    switch (currentSetting) {
 800190c:	4b5e      	ldr	r3, [pc, #376]	@ (8001a88 <incrementCurrentSetting+0x180>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b06      	cmp	r3, #6
 8001912:	f200 80b3 	bhi.w	8001a7c <incrementCurrentSetting+0x174>
 8001916:	a201      	add	r2, pc, #4	@ (adr r2, 800191c <incrementCurrentSetting+0x14>)
 8001918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191c:	08001939 	.word	0x08001939
 8001920:	0800195f 	.word	0x0800195f
 8001924:	08001985 	.word	0x08001985
 8001928:	080019a9 	.word	0x080019a9
 800192c:	080019d3 	.word	0x080019d3
 8001930:	08001a05 	.word	0x08001a05
 8001934:	08001a39 	.word	0x08001a39
        case 0: pending_sec = (pending_sec + 1) % 60; break;
 8001938:	4b54      	ldr	r3, [pc, #336]	@ (8001a8c <incrementCurrentSetting+0x184>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	4b54      	ldr	r3, [pc, #336]	@ (8001a90 <incrementCurrentSetting+0x188>)
 8001940:	fb83 1302 	smull	r1, r3, r3, r2
 8001944:	4413      	add	r3, r2
 8001946:	1159      	asrs	r1, r3, #5
 8001948:	17d3      	asrs	r3, r2, #31
 800194a:	1ac9      	subs	r1, r1, r3
 800194c:	460b      	mov	r3, r1
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	1a5b      	subs	r3, r3, r1
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	1ad1      	subs	r1, r2, r3
 8001956:	b2ca      	uxtb	r2, r1
 8001958:	4b4c      	ldr	r3, [pc, #304]	@ (8001a8c <incrementCurrentSetting+0x184>)
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	e08e      	b.n	8001a7c <incrementCurrentSetting+0x174>
        case 1: pending_min = (pending_min + 1) % 60; break;
 800195e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a94 <incrementCurrentSetting+0x18c>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	4b4a      	ldr	r3, [pc, #296]	@ (8001a90 <incrementCurrentSetting+0x188>)
 8001966:	fb83 1302 	smull	r1, r3, r3, r2
 800196a:	4413      	add	r3, r2
 800196c:	1159      	asrs	r1, r3, #5
 800196e:	17d3      	asrs	r3, r2, #31
 8001970:	1ac9      	subs	r1, r1, r3
 8001972:	460b      	mov	r3, r1
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	1a5b      	subs	r3, r3, r1
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	1ad1      	subs	r1, r2, r3
 800197c:	b2ca      	uxtb	r2, r1
 800197e:	4b45      	ldr	r3, [pc, #276]	@ (8001a94 <incrementCurrentSetting+0x18c>)
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	e07b      	b.n	8001a7c <incrementCurrentSetting+0x174>
        case 2: pending_hours = (pending_hours + 1) % 24; break;
 8001984:	4b44      	ldr	r3, [pc, #272]	@ (8001a98 <incrementCurrentSetting+0x190>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	4b44      	ldr	r3, [pc, #272]	@ (8001a9c <incrementCurrentSetting+0x194>)
 800198c:	fb83 1302 	smull	r1, r3, r3, r2
 8001990:	1099      	asrs	r1, r3, #2
 8001992:	17d3      	asrs	r3, r2, #31
 8001994:	1ac9      	subs	r1, r1, r3
 8001996:	460b      	mov	r3, r1
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	440b      	add	r3, r1
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	1ad1      	subs	r1, r2, r3
 80019a0:	b2ca      	uxtb	r2, r1
 80019a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001a98 <incrementCurrentSetting+0x190>)
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	e069      	b.n	8001a7c <incrementCurrentSetting+0x174>

        case 3: pending_day = (pending_day + 1) % 8; if (pending_day == 0)  pending_day = 1;  break;
 80019a8:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa0 <incrementCurrentSetting+0x198>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	425a      	negs	r2, r3
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	f002 0207 	and.w	r2, r2, #7
 80019b8:	bf58      	it	pl
 80019ba:	4253      	negpl	r3, r2
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b38      	ldr	r3, [pc, #224]	@ (8001aa0 <incrementCurrentSetting+0x198>)
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	4b37      	ldr	r3, [pc, #220]	@ (8001aa0 <incrementCurrentSetting+0x198>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d151      	bne.n	8001a6e <incrementCurrentSetting+0x166>
 80019ca:	4b35      	ldr	r3, [pc, #212]	@ (8001aa0 <incrementCurrentSetting+0x198>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e04d      	b.n	8001a6e <incrementCurrentSetting+0x166>
        case 4: pending_date = (pending_date + 1) % 31; if (pending_date == 0)  pending_date = 1; break;
 80019d2:	4b34      	ldr	r3, [pc, #208]	@ (8001aa4 <incrementCurrentSetting+0x19c>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	4b33      	ldr	r3, [pc, #204]	@ (8001aa8 <incrementCurrentSetting+0x1a0>)
 80019da:	fb83 1302 	smull	r1, r3, r3, r2
 80019de:	4413      	add	r3, r2
 80019e0:	1119      	asrs	r1, r3, #4
 80019e2:	17d3      	asrs	r3, r2, #31
 80019e4:	1ac9      	subs	r1, r1, r3
 80019e6:	460b      	mov	r3, r1
 80019e8:	015b      	lsls	r3, r3, #5
 80019ea:	1a5b      	subs	r3, r3, r1
 80019ec:	1ad1      	subs	r1, r2, r3
 80019ee:	b2ca      	uxtb	r2, r1
 80019f0:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa4 <incrementCurrentSetting+0x19c>)
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <incrementCurrentSetting+0x19c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d13a      	bne.n	8001a72 <incrementCurrentSetting+0x16a>
 80019fc:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <incrementCurrentSetting+0x19c>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	e036      	b.n	8001a72 <incrementCurrentSetting+0x16a>
        case 5: pending_month = (pending_month + 1) % 13; if (pending_month == 0)  pending_month = 1; break;
 8001a04:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <incrementCurrentSetting+0x1a4>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	1c59      	adds	r1, r3, #1
 8001a0a:	4b29      	ldr	r3, [pc, #164]	@ (8001ab0 <incrementCurrentSetting+0x1a8>)
 8001a0c:	fb83 2301 	smull	r2, r3, r3, r1
 8001a10:	109a      	asrs	r2, r3, #2
 8001a12:	17cb      	asrs	r3, r1, #31
 8001a14:	1ad2      	subs	r2, r2, r3
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	1aca      	subs	r2, r1, r3
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <incrementCurrentSetting+0x1a4>)
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <incrementCurrentSetting+0x1a4>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d122      	bne.n	8001a76 <incrementCurrentSetting+0x16e>
 8001a30:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <incrementCurrentSetting+0x1a4>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	e01e      	b.n	8001a76 <incrementCurrentSetting+0x16e>
        case 6: pending_year = (pending_year + 1) % 99; if (pending_year == 0)  pending_year = 1; break;
 8001a38:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <incrementCurrentSetting+0x1ac>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <incrementCurrentSetting+0x1b0>)
 8001a40:	fb83 1302 	smull	r1, r3, r3, r2
 8001a44:	4413      	add	r3, r2
 8001a46:	1199      	asrs	r1, r3, #6
 8001a48:	17d3      	asrs	r3, r2, #31
 8001a4a:	1ac9      	subs	r1, r1, r3
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	440b      	add	r3, r1
 8001a52:	0159      	lsls	r1, r3, #5
 8001a54:	440b      	add	r3, r1
 8001a56:	1ad1      	subs	r1, r2, r3
 8001a58:	b2ca      	uxtb	r2, r1
 8001a5a:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <incrementCurrentSetting+0x1ac>)
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <incrementCurrentSetting+0x1ac>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <incrementCurrentSetting+0x172>
 8001a66:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <incrementCurrentSetting+0x1ac>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	e005      	b.n	8001a7a <incrementCurrentSetting+0x172>
        case 3: pending_day = (pending_day + 1) % 8; if (pending_day == 0)  pending_day = 1;  break;
 8001a6e:	bf00      	nop
 8001a70:	e004      	b.n	8001a7c <incrementCurrentSetting+0x174>
        case 4: pending_date = (pending_date + 1) % 31; if (pending_date == 0)  pending_date = 1; break;
 8001a72:	bf00      	nop
 8001a74:	e002      	b.n	8001a7c <incrementCurrentSetting+0x174>
        case 5: pending_month = (pending_month + 1) % 13; if (pending_month == 0)  pending_month = 1; break;
 8001a76:	bf00      	nop
 8001a78:	e000      	b.n	8001a7c <incrementCurrentSetting+0x174>
        case 6: pending_year = (pending_year + 1) % 99; if (pending_year == 0)  pending_year = 1; break;
 8001a7a:	bf00      	nop
    }
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	2000017d 	.word	0x2000017d
 8001a8c:	20000181 	.word	0x20000181
 8001a90:	88888889 	.word	0x88888889
 8001a94:	20000180 	.word	0x20000180
 8001a98:	2000017f 	.word	0x2000017f
 8001a9c:	2aaaaaab 	.word	0x2aaaaaab
 8001aa0:	20000182 	.word	0x20000182
 8001aa4:	20000183 	.word	0x20000183
 8001aa8:	84210843 	.word	0x84210843
 8001aac:	20000184 	.word	0x20000184
 8001ab0:	4ec4ec4f 	.word	0x4ec4ec4f
 8001ab4:	20000185 	.word	0x20000185
 8001ab8:	a57eb503 	.word	0xa57eb503

08001abc <savePendingValues>:

// Save modified values to RTC
void savePendingValues() {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	switch(currentMode){
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <savePendingValues+0x84>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d002      	beq.n	8001ace <savePendingValues+0x12>
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d02b      	beq.n	8001b24 <savePendingValues+0x68>
        alarm_set_hours = pending_hours;
        alarm_set_minutes = pending_min;
        alarm_active = 1; // Re-enable the alarm after setting
		break;
	default:
		break;
 8001acc:	e036      	b.n	8001b3c <savePendingValues+0x80>
        ds3231_Write(ADDRESS_HOUR, pending_hours);
 8001ace:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <savePendingValues+0x88>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f7fe fdff 	bl	80006d8 <ds3231_Write>
        ds3231_Write(ADDRESS_MIN, pending_min);
 8001ada:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <savePendingValues+0x8c>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7fe fdf9 	bl	80006d8 <ds3231_Write>
        ds3231_Write(ADDRESS_SEC, pending_sec);
 8001ae6:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <savePendingValues+0x90>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	4619      	mov	r1, r3
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7fe fdf3 	bl	80006d8 <ds3231_Write>
        ds3231_Write(ADDRESS_YEAR, pending_year);
 8001af2:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <savePendingValues+0x94>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4619      	mov	r1, r3
 8001af8:	2006      	movs	r0, #6
 8001afa:	f7fe fded 	bl	80006d8 <ds3231_Write>
	    ds3231_Write(ADDRESS_MONTH, pending_month);
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <savePendingValues+0x98>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	2005      	movs	r0, #5
 8001b06:	f7fe fde7 	bl	80006d8 <ds3231_Write>
	    ds3231_Write(ADDRESS_DATE, pending_date);
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <savePendingValues+0x9c>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	2004      	movs	r0, #4
 8001b12:	f7fe fde1 	bl	80006d8 <ds3231_Write>
	    ds3231_Write(ADDRESS_DAY, pending_day);
 8001b16:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <savePendingValues+0xa0>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f7fe fddb 	bl	80006d8 <ds3231_Write>
		break;
 8001b22:	e00b      	b.n	8001b3c <savePendingValues+0x80>
        alarm_set_hours = pending_hours;
 8001b24:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <savePendingValues+0x88>)
 8001b26:	781a      	ldrb	r2, [r3, #0]
 8001b28:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <savePendingValues+0xa4>)
 8001b2a:	701a      	strb	r2, [r3, #0]
        alarm_set_minutes = pending_min;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <savePendingValues+0x8c>)
 8001b2e:	781a      	ldrb	r2, [r3, #0]
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <savePendingValues+0xa8>)
 8001b32:	701a      	strb	r2, [r3, #0]
        alarm_active = 1; // Re-enable the alarm after setting
 8001b34:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <savePendingValues+0xac>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
		break;
 8001b3a:	bf00      	nop
	}
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000017c 	.word	0x2000017c
 8001b44:	2000017f 	.word	0x2000017f
 8001b48:	20000180 	.word	0x20000180
 8001b4c:	20000181 	.word	0x20000181
 8001b50:	20000185 	.word	0x20000185
 8001b54:	20000184 	.word	0x20000184
 8001b58:	20000183 	.word	0x20000183
 8001b5c:	20000182 	.word	0x20000182
 8001b60:	20000186 	.word	0x20000186
 8001b64:	20000187 	.word	0x20000187
 8001b68:	20000006 	.word	0x20000006

08001b6c <displayOnlySelectedParameter>:

// Display only the selected parameter, hide others
void displayOnlySelectedParameter(uint8_t show) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af04      	add	r7, sp, #16
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
    // uint16_t dayColor = (currentSetting == 3 && show) ? YELLOW : BLACK;
    // uint16_t dateColor = (currentSetting == 4 && show) ? YELLOW : BLACK;
    // uint16_t monthColor = (currentSetting == 5 && show) ? YELLOW : BLACK;
    // uint16_t yearColor = (currentSetting == 6 && show) ? YELLOW : BLACK;
    
    uint16_t secColor = GREEN, minColor = GREEN, hourColor = GREEN;
 8001b76:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b7a:	82fb      	strh	r3, [r7, #22]
 8001b7c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b80:	82bb      	strh	r3, [r7, #20]
 8001b82:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b86:	827b      	strh	r3, [r7, #18]
    uint16_t dayColor = YELLOW, dateColor = YELLOW, monthColor = YELLOW, yearColor = YELLOW;
 8001b88:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b8c:	823b      	strh	r3, [r7, #16]
 8001b8e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b92:	81fb      	strh	r3, [r7, #14]
 8001b94:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b98:	81bb      	strh	r3, [r7, #12]
 8001b9a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b9e:	817b      	strh	r3, [r7, #10]

    switch (currentSetting) {
 8001ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8001d18 <displayOnlySelectedParameter+0x1ac>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b06      	cmp	r3, #6
 8001ba6:	d850      	bhi.n	8001c4a <displayOnlySelectedParameter+0xde>
 8001ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb0 <displayOnlySelectedParameter+0x44>)
 8001baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bae:	bf00      	nop
 8001bb0:	08001bcd 	.word	0x08001bcd
 8001bb4:	08001bdf 	.word	0x08001bdf
 8001bb8:	08001bf1 	.word	0x08001bf1
 8001bbc:	08001c03 	.word	0x08001c03
 8001bc0:	08001c15 	.word	0x08001c15
 8001bc4:	08001c27 	.word	0x08001c27
 8001bc8:	08001c39 	.word	0x08001c39
        case 0:
            secColor = show ? GREEN : BLACK;
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <displayOnlySelectedParameter+0x6c>
 8001bd2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001bd6:	e000      	b.n	8001bda <displayOnlySelectedParameter+0x6e>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	82fb      	strh	r3, [r7, #22]
            break;
 8001bdc:	e035      	b.n	8001c4a <displayOnlySelectedParameter+0xde>
        case 1:
            minColor = show ? GREEN : BLACK;
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <displayOnlySelectedParameter+0x7e>
 8001be4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001be8:	e000      	b.n	8001bec <displayOnlySelectedParameter+0x80>
 8001bea:	2300      	movs	r3, #0
 8001bec:	82bb      	strh	r3, [r7, #20]
            break;
 8001bee:	e02c      	b.n	8001c4a <displayOnlySelectedParameter+0xde>
        case 2:
            hourColor = show ? GREEN : BLACK;
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <displayOnlySelectedParameter+0x90>
 8001bf6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001bfa:	e000      	b.n	8001bfe <displayOnlySelectedParameter+0x92>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	827b      	strh	r3, [r7, #18]
            break;
 8001c00:	e023      	b.n	8001c4a <displayOnlySelectedParameter+0xde>
        case 3:
            dayColor = show ? YELLOW : BLACK;
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <displayOnlySelectedParameter+0xa2>
 8001c08:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001c0c:	e000      	b.n	8001c10 <displayOnlySelectedParameter+0xa4>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	823b      	strh	r3, [r7, #16]
            break;
 8001c12:	e01a      	b.n	8001c4a <displayOnlySelectedParameter+0xde>
        case 4:
            dateColor = show ? YELLOW : BLACK;
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <displayOnlySelectedParameter+0xb4>
 8001c1a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001c1e:	e000      	b.n	8001c22 <displayOnlySelectedParameter+0xb6>
 8001c20:	2300      	movs	r3, #0
 8001c22:	81fb      	strh	r3, [r7, #14]
            break;
 8001c24:	e011      	b.n	8001c4a <displayOnlySelectedParameter+0xde>
        case 5:
            monthColor = show ? YELLOW : BLACK;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <displayOnlySelectedParameter+0xc6>
 8001c2c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001c30:	e000      	b.n	8001c34 <displayOnlySelectedParameter+0xc8>
 8001c32:	2300      	movs	r3, #0
 8001c34:	81bb      	strh	r3, [r7, #12]
            break;
 8001c36:	e008      	b.n	8001c4a <displayOnlySelectedParameter+0xde>
        case 6:
            yearColor = show ? YELLOW : BLACK;
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <displayOnlySelectedParameter+0xd8>
 8001c3e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001c42:	e000      	b.n	8001c46 <displayOnlySelectedParameter+0xda>
 8001c44:	2300      	movs	r3, #0
 8001c46:	817b      	strh	r3, [r7, #10]
            break;
 8001c48:	bf00      	nop
    }

    lcd_ShowIntNum(70, 100, pending_hours, 2, hourColor, BLACK, 24);
 8001c4a:	4b34      	ldr	r3, [pc, #208]	@ (8001d1c <displayOnlySelectedParameter+0x1b0>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2318      	movs	r3, #24
 8001c52:	9302      	str	r3, [sp, #8]
 8001c54:	2300      	movs	r3, #0
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	8a7b      	ldrh	r3, [r7, #18]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	2164      	movs	r1, #100	@ 0x64
 8001c60:	2046      	movs	r0, #70	@ 0x46
 8001c62:	f7ff f9ef 	bl	8001044 <lcd_ShowIntNum>
    lcd_ShowIntNum(110, 100, pending_min, 2, minColor, BLACK, 24);
 8001c66:	4b2e      	ldr	r3, [pc, #184]	@ (8001d20 <displayOnlySelectedParameter+0x1b4>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2318      	movs	r3, #24
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	8abb      	ldrh	r3, [r7, #20]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2302      	movs	r3, #2
 8001c7a:	2164      	movs	r1, #100	@ 0x64
 8001c7c:	206e      	movs	r0, #110	@ 0x6e
 8001c7e:	f7ff f9e1 	bl	8001044 <lcd_ShowIntNum>
    lcd_ShowIntNum(150, 100, pending_sec, 2, secColor, BLACK, 24);
 8001c82:	4b28      	ldr	r3, [pc, #160]	@ (8001d24 <displayOnlySelectedParameter+0x1b8>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	2318      	movs	r3, #24
 8001c8a:	9302      	str	r3, [sp, #8]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	8afb      	ldrh	r3, [r7, #22]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2302      	movs	r3, #2
 8001c96:	2164      	movs	r1, #100	@ 0x64
 8001c98:	2096      	movs	r0, #150	@ 0x96
 8001c9a:	f7ff f9d3 	bl	8001044 <lcd_ShowIntNum>

	lcd_ShowIntNum(20, 130, pending_day, 2, dayColor, BLACK, 24);
 8001c9e:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <displayOnlySelectedParameter+0x1bc>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2318      	movs	r3, #24
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	8a3b      	ldrh	r3, [r7, #16]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	2182      	movs	r1, #130	@ 0x82
 8001cb4:	2014      	movs	r0, #20
 8001cb6:	f7ff f9c5 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, pending_date, 2, dateColor, BLACK, 24);
 8001cba:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <displayOnlySelectedParameter+0x1c0>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2318      	movs	r3, #24
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	89fb      	ldrh	r3, [r7, #14]
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2302      	movs	r3, #2
 8001cce:	2182      	movs	r1, #130	@ 0x82
 8001cd0:	2046      	movs	r0, #70	@ 0x46
 8001cd2:	f7ff f9b7 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, pending_month, 2, monthColor, BLACK, 24);
 8001cd6:	4b16      	ldr	r3, [pc, #88]	@ (8001d30 <displayOnlySelectedParameter+0x1c4>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2318      	movs	r3, #24
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	89bb      	ldrh	r3, [r7, #12]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2302      	movs	r3, #2
 8001cea:	2182      	movs	r1, #130	@ 0x82
 8001cec:	206e      	movs	r0, #110	@ 0x6e
 8001cee:	f7ff f9a9 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, pending_year, 2, yearColor, BLACK, 24);
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <displayOnlySelectedParameter+0x1c8>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2318      	movs	r3, #24
 8001cfa:	9302      	str	r3, [sp, #8]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	897b      	ldrh	r3, [r7, #10]
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2302      	movs	r3, #2
 8001d06:	2182      	movs	r1, #130	@ 0x82
 8001d08:	2096      	movs	r0, #150	@ 0x96
 8001d0a:	f7ff f99b 	bl	8001044 <lcd_ShowIntNum>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000017d 	.word	0x2000017d
 8001d1c:	2000017f 	.word	0x2000017f
 8001d20:	20000180 	.word	0x20000180
 8001d24:	20000181 	.word	0x20000181
 8001d28:	20000182 	.word	0x20000182
 8001d2c:	20000183 	.word	0x20000183
 8001d30:	20000184 	.word	0x20000184
 8001d34:	20000185 	.word	0x20000185

08001d38 <isModeButtonPressed>:

// Detect if mode button is pressed
uint8_t isModeButtonPressed() {
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
    return (button_count[0] == 1) ? 1 : 0;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <isModeButtonPressed+0x1c>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	20000094 	.word	0x20000094

08001d58 <checkAlarmTrigger>:

/* USER CODE END 4 */
void checkAlarmTrigger() {
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
    if (alarm_active && !flag_alarm && (ds3231_hours == alarm_set_hours) && (ds3231_min == alarm_set_minutes)) {
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <checkAlarmTrigger+0x3c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d012      	beq.n	8001d8a <checkAlarmTrigger+0x32>
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <checkAlarmTrigger+0x40>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10e      	bne.n	8001d8a <checkAlarmTrigger+0x32>
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <checkAlarmTrigger+0x44>)
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <checkAlarmTrigger+0x48>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d108      	bne.n	8001d8a <checkAlarmTrigger+0x32>
 8001d78:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <checkAlarmTrigger+0x4c>)
 8001d7a:	781a      	ldrb	r2, [r3, #0]
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <checkAlarmTrigger+0x50>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d102      	bne.n	8001d8a <checkAlarmTrigger+0x32>
        flag_alarm = 1; // Set the alarm trigger flag
 8001d84:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <checkAlarmTrigger+0x40>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
    }
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	20000006 	.word	0x20000006
 8001d98:	20000188 	.word	0x20000188
 8001d9c:	200000bf 	.word	0x200000bf
 8001da0:	20000186 	.word	0x20000186
 8001da4:	200000c0 	.word	0x200000c0
 8001da8:	20000187 	.word	0x20000187

08001dac <turnOffAlarm>:
void turnOffAlarm() {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af02      	add	r7, sp, #8
    if (button_count[4] == 1) { // Button to turn off alarm
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <turnOffAlarm+0x30>)
 8001db4:	891b      	ldrh	r3, [r3, #8]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d10d      	bne.n	8001dd6 <turnOffAlarm+0x2a>
        flag_alarm = 0;
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <turnOffAlarm+0x34>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
        alarm_active = 0;
 8001dc0:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <turnOffAlarm+0x38>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]

        lcd_Fill(20, 160, 240, 184, BLACK);// Disable alarm until reset
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	23b8      	movs	r3, #184	@ 0xb8
 8001dcc:	22f0      	movs	r2, #240	@ 0xf0
 8001dce:	21a0      	movs	r1, #160	@ 0xa0
 8001dd0:	2014      	movs	r0, #20
 8001dd2:	f7fe fffd 	bl	8000dd0 <lcd_Fill>
    }
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000094 	.word	0x20000094
 8001de0:	20000188 	.word	0x20000188
 8001de4:	20000006 	.word	0x20000006

08001de8 <main>:
int main(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
    HAL_Init();
 8001dec:	f000 fe88 	bl	8002b00 <HAL_Init>
    SystemClock_Config();
 8001df0:	f000 f84c 	bl	8001e8c <SystemClock_Config>
    MX_GPIO_Init();
 8001df4:	f7fe fdc6 	bl	8000984 <MX_GPIO_Init>
    MX_TIM2_Init();
 8001df8:	f000 fc74 	bl	80026e4 <MX_TIM2_Init>
    MX_SPI1_Init();
 8001dfc:	f000 fb40 	bl	8002480 <MX_SPI1_Init>
    MX_FSMC_Init();
 8001e00:	f7fe fcf0 	bl	80007e4 <MX_FSMC_Init>
    MX_I2C1_Init();
 8001e04:	f7fe feb6 	bl	8000b74 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8001e08:	f000 fd98 	bl	800293c <MX_USART1_UART_Init>

    /* Initialize peripherals and set initial time */
    system_init();
 8001e0c:	f000 f8a8 	bl	8001f60 <system_init>

    /* Main loop */
    lcd_Clear(BLACK);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7fe ffa3 	bl	8000d5c <lcd_Clear>
    updateTime();
 8001e16:	f000 f8c7 	bl	8001fa8 <updateTime>
    while (1)
    {
        while(!flag_timer2);
 8001e1a:	bf00      	nop
 8001e1c:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <main+0x9c>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0fb      	beq.n	8001e1c <main+0x34>
        flag_timer2 = 0;
 8001e24:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <main+0x9c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	801a      	strh	r2, [r3, #0]
        button_Scan();
 8001e2a:	f7fe fba5 	bl	8000578 <button_Scan>

        // Check if mode button is pressed and switch modes
        if (isModeButtonPressed()) {
 8001e2e:	f7ff ff83 	bl	8001d38 <isModeButtonPressed>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <main+0x54>
            switchMode();
 8001e38:	f7ff fc02 	bl	8001640 <switchMode>
        }

        // Main functionality for each mode
        switch (currentMode) {
 8001e3c:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <main+0xa0>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d81d      	bhi.n	8001e80 <main+0x98>
 8001e44:	a201      	add	r2, pc, #4	@ (adr r2, 8001e4c <main+0x64>)
 8001e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4a:	bf00      	nop
 8001e4c:	08001e5d 	.word	0x08001e5d
 8001e50:	08001e6f 	.word	0x08001e6f
 8001e54:	08001e75 	.word	0x08001e75
 8001e58:	08001e7b 	.word	0x08001e7b
            case DISPLAY_MODE:
                ds3231_ReadTime();
 8001e5c:	f7fe fc5e 	bl	800071c <ds3231_ReadTime>
                displayTime();
 8001e60:	f000 f8c2 	bl	8001fe8 <displayTime>
                checkAlarmTrigger();  // Check if alarm should trigger
 8001e64:	f7ff ff78 	bl	8001d58 <checkAlarmTrigger>
                turnOffAlarm();       // Check if alarm should be turned off
 8001e68:	f7ff ffa0 	bl	8001dac <turnOffAlarm>
                break;
 8001e6c:	e009      	b.n	8001e82 <main+0x9a>

            case SETTING_MODE:
                handleSettingMode();
 8001e6e:	f7ff fcd5 	bl	800181c <handleSettingMode>
                break;
 8001e72:	e006      	b.n	8001e82 <main+0x9a>

            case ALARM_MODE:
            	handleSettingMode();
 8001e74:	f7ff fcd2 	bl	800181c <handleSettingMode>
                break;
 8001e78:	e003      	b.n	8001e82 <main+0x9a>
            case UART_MODE:
            	uart_handle();
 8001e7a:	f000 f949 	bl	8002110 <uart_handle>
            	break;
 8001e7e:	e000      	b.n	8001e82 <main+0x9a>
            default:
            	break;
 8001e80:	bf00      	nop
        while(!flag_timer2);
 8001e82:	e7ca      	b.n	8001e1a <main+0x32>
 8001e84:	20000194 	.word	0x20000194
 8001e88:	2000017c 	.word	0x2000017c

08001e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b094      	sub	sp, #80	@ 0x50
 8001e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e92:	f107 0320 	add.w	r3, r7, #32
 8001e96:	2230      	movs	r2, #48	@ 0x30
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f005 fb78 	bl	8007590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	4b28      	ldr	r3, [pc, #160]	@ (8001f58 <SystemClock_Config+0xcc>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	4a27      	ldr	r2, [pc, #156]	@ (8001f58 <SystemClock_Config+0xcc>)
 8001eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec0:	4b25      	ldr	r3, [pc, #148]	@ (8001f58 <SystemClock_Config+0xcc>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	4b22      	ldr	r3, [pc, #136]	@ (8001f5c <SystemClock_Config+0xd0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a21      	ldr	r2, [pc, #132]	@ (8001f5c <SystemClock_Config+0xd0>)
 8001ed6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f5c <SystemClock_Config+0xd0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eec:	2301      	movs	r3, #1
 8001eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001efc:	2308      	movs	r3, #8
 8001efe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f00:	23a8      	movs	r3, #168	@ 0xa8
 8001f02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f04:	2302      	movs	r3, #2
 8001f06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f0c:	f107 0320 	add.w	r3, r7, #32
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 fad3 	bl	80044bc <HAL_RCC_OscConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f1c:	f000 fa22 	bl	8002364 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f20:	230f      	movs	r3, #15
 8001f22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f24:	2302      	movs	r3, #2
 8001f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001f32:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 fd34 	bl	80049ac <HAL_RCC_ClockConfig>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f4a:	f000 fa0b 	bl	8002364 <Error_Handler>
  }
}
 8001f4e:	bf00      	nop
 8001f50:	3750      	adds	r7, #80	@ 0x50
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40007000 	.word	0x40007000

08001f60 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2120      	movs	r1, #32
 8001f68:	480e      	ldr	r0, [pc, #56]	@ (8001fa4 <system_init+0x44>)
 8001f6a:	f001 f99f 	bl	80032ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2140      	movs	r1, #64	@ 0x40
 8001f72:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <system_init+0x44>)
 8001f74:	f001 f99a 	bl	80032ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2110      	movs	r1, #16
 8001f7c:	4809      	ldr	r0, [pc, #36]	@ (8001fa4 <system_init+0x44>)
 8001f7e:	f001 f995 	bl	80032ac <HAL_GPIO_WritePin>
	  timer_init();
 8001f82:	f000 f9f5 	bl	8002370 <timer_init>
	  led7_init();
 8001f86:	f7ff fac3 	bl	8001510 <led7_init>
	  button_init();
 8001f8a:	f7fe fae9 	bl	8000560 <button_init>
	  lcd_init();
 8001f8e:	f7ff f8fb 	bl	8001188 <lcd_init>
	  ds3231_init();
 8001f92:	f7fe fb5d 	bl	8000650 <ds3231_init>
	  uart_init_rs232();
 8001f96:	f000 fc17 	bl	80027c8 <uart_init_rs232>
	  setTimer2(50);
 8001f9a:	2032      	movs	r0, #50	@ 0x32
 8001f9c:	f000 f9f2 	bl	8002384 <setTimer2>

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 8001fac:	2118      	movs	r1, #24
 8001fae:	2006      	movs	r0, #6
 8001fb0:	f7fe fb92 	bl	80006d8 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 8001fb4:	210b      	movs	r1, #11
 8001fb6:	2005      	movs	r0, #5
 8001fb8:	f7fe fb8e 	bl	80006d8 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 13);
 8001fbc:	210d      	movs	r1, #13
 8001fbe:	2004      	movs	r0, #4
 8001fc0:	f7fe fb8a 	bl	80006d8 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8001fc4:	2106      	movs	r1, #6
 8001fc6:	2003      	movs	r0, #3
 8001fc8:	f7fe fb86 	bl	80006d8 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 13);
 8001fcc:	210d      	movs	r1, #13
 8001fce:	2002      	movs	r0, #2
 8001fd0:	f7fe fb82 	bl	80006d8 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 16);
 8001fd4:	2110      	movs	r1, #16
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f7fe fb7e 	bl	80006d8 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 24);
 8001fdc:	2118      	movs	r1, #24
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7fe fb7a 	bl	80006d8 <ds3231_Write>
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <displayTime>:
    if (button_count[7] == 1)
        return 1;
    else
        return 0;
}
void displayTime(){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af04      	add	r7, sp, #16
	displayModeHeader();
 8001fee:	f7ff fbb5 	bl	800175c <displayModeHeader>
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80020ec <displayTime+0x104>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	2318      	movs	r3, #24
 8001ffa:	9302      	str	r3, [sp, #8]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2302      	movs	r3, #2
 8002008:	2164      	movs	r1, #100	@ 0x64
 800200a:	2046      	movs	r0, #70	@ 0x46
 800200c:	f7ff f81a 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8002010:	4b37      	ldr	r3, [pc, #220]	@ (80020f0 <displayTime+0x108>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	2318      	movs	r3, #24
 8002018:	9302      	str	r3, [sp, #8]
 800201a:	2300      	movs	r3, #0
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2302      	movs	r3, #2
 8002026:	2164      	movs	r1, #100	@ 0x64
 8002028:	206e      	movs	r0, #110	@ 0x6e
 800202a:	f7ff f80b 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 800202e:	4b31      	ldr	r3, [pc, #196]	@ (80020f4 <displayTime+0x10c>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	2318      	movs	r3, #24
 8002036:	9302      	str	r3, [sp, #8]
 8002038:	2300      	movs	r3, #0
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2302      	movs	r3, #2
 8002044:	2164      	movs	r1, #100	@ 0x64
 8002046:	2096      	movs	r0, #150	@ 0x96
 8002048:	f7fe fffc 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 800204c:	4b2a      	ldr	r3, [pc, #168]	@ (80020f8 <displayTime+0x110>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	2318      	movs	r3, #24
 8002054:	9302      	str	r3, [sp, #8]
 8002056:	2300      	movs	r3, #0
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2302      	movs	r3, #2
 8002062:	2182      	movs	r1, #130	@ 0x82
 8002064:	2014      	movs	r0, #20
 8002066:	f7fe ffed 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 800206a:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <displayTime+0x114>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	2318      	movs	r3, #24
 8002072:	9302      	str	r3, [sp, #8]
 8002074:	2300      	movs	r3, #0
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2302      	movs	r3, #2
 8002080:	2182      	movs	r1, #130	@ 0x82
 8002082:	2046      	movs	r0, #70	@ 0x46
 8002084:	f7fe ffde 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002088:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <displayTime+0x118>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	2318      	movs	r3, #24
 8002090:	9302      	str	r3, [sp, #8]
 8002092:	2300      	movs	r3, #0
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2302      	movs	r3, #2
 800209e:	2182      	movs	r1, #130	@ 0x82
 80020a0:	206e      	movs	r0, #110	@ 0x6e
 80020a2:	f7fe ffcf 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80020a6:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <displayTime+0x11c>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	2318      	movs	r3, #24
 80020ae:	9302      	str	r3, [sp, #8]
 80020b0:	2300      	movs	r3, #0
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2302      	movs	r3, #2
 80020bc:	2182      	movs	r1, #130	@ 0x82
 80020be:	2096      	movs	r0, #150	@ 0x96
 80020c0:	f7fe ffc0 	bl	8001044 <lcd_ShowIntNum>


	  if (flag_alarm) {
 80020c4:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <displayTime+0x120>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00c      	beq.n	80020e6 <displayTime+0xfe>
		  lcd_ShowStr(20, 160, (uint8_t*)"Alarm Ring Ring", RED, BLACK, 24, 1); // Display in red below other data
 80020cc:	2301      	movs	r3, #1
 80020ce:	9302      	str	r3, [sp, #8]
 80020d0:	2318      	movs	r3, #24
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	2300      	movs	r3, #0
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020dc:	4a0b      	ldr	r2, [pc, #44]	@ (800210c <displayTime+0x124>)
 80020de:	21a0      	movs	r1, #160	@ 0xa0
 80020e0:	2014      	movs	r0, #20
 80020e2:	f7ff f9b1 	bl	8001448 <lcd_ShowStr>
	  }
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200000bf 	.word	0x200000bf
 80020f0:	200000c0 	.word	0x200000c0
 80020f4:	200000c1 	.word	0x200000c1
 80020f8:	200000c3 	.word	0x200000c3
 80020fc:	200000c2 	.word	0x200000c2
 8002100:	200000c4 	.word	0x200000c4
 8002104:	200000c5 	.word	0x200000c5
 8002108:	20000188 	.word	0x20000188
 800210c:	08007ebc 	.word	0x08007ebc

08002110 <uart_handle>:
int count = 0;

void uart_handle() {
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af04      	add	r7, sp, #16
	if(uart_hour_flag == 1) {
 8002116:	4b7e      	ldr	r3, [pc, #504]	@ (8002310 <uart_handle+0x200>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d111      	bne.n	8002142 <uart_handle+0x32>
		uart_hour_flag = 0;
 800211e:	4b7c      	ldr	r3, [pc, #496]	@ (8002310 <uart_handle+0x200>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
        
        if (count == 0)
 8002124:	4b7b      	ldr	r3, [pc, #492]	@ (8002314 <uart_handle+0x204>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d103      	bne.n	8002134 <uart_handle+0x24>
		uart_Rs232SendString((uint8_t*)"\nHour\n");
 800212c:	487a      	ldr	r0, [pc, #488]	@ (8002318 <uart_handle+0x208>)
 800212e:	f000 fb59 	bl	80027e4 <uart_Rs232SendString>
 8002132:	e002      	b.n	800213a <uart_handle+0x2a>
        else 
		uart_Rs232SendString((uint8_t*)"\nMinute\n");
 8002134:	4879      	ldr	r0, [pc, #484]	@ (800231c <uart_handle+0x20c>)
 8002136:	f000 fb55 	bl	80027e4 <uart_Rs232SendString>

		setTimer3(10000);
 800213a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800213e:	f000 f93d 	bl	80023bc <setTimer3>
	}
	if(flag_timer3) {
 8002142:	4b77      	ldr	r3, [pc, #476]	@ (8002320 <uart_handle+0x210>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d012      	beq.n	8002170 <uart_handle+0x60>
		uart_hour_flag = 1;
 800214a:	4b71      	ldr	r3, [pc, #452]	@ (8002310 <uart_handle+0x200>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
		count_request_uart += 1;
 8002150:	4b74      	ldr	r3, [pc, #464]	@ (8002324 <uart_handle+0x214>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b72      	ldr	r3, [pc, #456]	@ (8002324 <uart_handle+0x214>)
 800215a:	701a      	strb	r2, [r3, #0]
		count_char = 0;
 800215c:	4b72      	ldr	r3, [pc, #456]	@ (8002328 <uart_handle+0x218>)
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
		curr_index = index_buffer;
 8002162:	4b72      	ldr	r3, [pc, #456]	@ (800232c <uart_handle+0x21c>)
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	4b72      	ldr	r3, [pc, #456]	@ (8002330 <uart_handle+0x220>)
 8002168:	701a      	strb	r2, [r3, #0]
		flag_timer3 = 0;
 800216a:	4b6d      	ldr	r3, [pc, #436]	@ (8002320 <uart_handle+0x210>)
 800216c:	2200      	movs	r2, #0
 800216e:	801a      	strh	r2, [r3, #0]
	}
	if(count_request_uart > 2) {
 8002170:	4b6c      	ldr	r3, [pc, #432]	@ (8002324 <uart_handle+0x214>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d92b      	bls.n	80021d0 <uart_handle+0xc0>
        setTimer2(100);
 8002178:	2064      	movs	r0, #100	@ 0x64
 800217a:	f000 f903 	bl	8002384 <setTimer2>
		count_request_uart = 0;
 800217e:	4b69      	ldr	r3, [pc, #420]	@ (8002324 <uart_handle+0x214>)
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
		uart_Rs232SendString((uint8_t*)"No response\n");
 8002184:	486b      	ldr	r0, [pc, #428]	@ (8002334 <uart_handle+0x224>)
 8002186:	f000 fb2d 	bl	80027e4 <uart_Rs232SendString>
        lcd_ShowStr(20, 160, (uint8_t*)"No response", RED, BLACK, 24, 1);
 800218a:	2301      	movs	r3, #1
 800218c:	9302      	str	r3, [sp, #8]
 800218e:	2318      	movs	r3, #24
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	2300      	movs	r3, #0
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800219a:	4a67      	ldr	r2, [pc, #412]	@ (8002338 <uart_handle+0x228>)
 800219c:	21a0      	movs	r1, #160	@ 0xa0
 800219e:	2014      	movs	r0, #20
 80021a0:	f7ff f952 	bl	8001448 <lcd_ShowStr>

        while(!flag_timer2);
 80021a4:	bf00      	nop
 80021a6:	4b65      	ldr	r3, [pc, #404]	@ (800233c <uart_handle+0x22c>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0fb      	beq.n	80021a6 <uart_handle+0x96>
        flag_timer2 = 0;
 80021ae:	4b63      	ldr	r3, [pc, #396]	@ (800233c <uart_handle+0x22c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	801a      	strh	r2, [r3, #0]

		currentMode = DISPLAY_MODE;
 80021b4:	4b62      	ldr	r3, [pc, #392]	@ (8002340 <uart_handle+0x230>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]
		count_char = 0;
 80021ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002328 <uart_handle+0x218>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
		curr_index = index_buffer;
 80021c0:	4b5a      	ldr	r3, [pc, #360]	@ (800232c <uart_handle+0x21c>)
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	4b5a      	ldr	r3, [pc, #360]	@ (8002330 <uart_handle+0x220>)
 80021c6:	701a      	strb	r2, [r3, #0]
		lcd_Clear(BLACK);
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7fe fdc7 	bl	8000d5c <lcd_Clear>
		return;
 80021ce:	e09c      	b.n	800230a <uart_handle+0x1fa>
	}
	if(buffer_flag == 1 && count_char == 4) {
 80021d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002344 <uart_handle+0x234>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	f040 8098 	bne.w	800230a <uart_handle+0x1fa>
 80021da:	4b53      	ldr	r3, [pc, #332]	@ (8002328 <uart_handle+0x218>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b04      	cmp	r3, #4
 80021e0:	f040 8093 	bne.w	800230a <uart_handle+0x1fa>
		if(buffer[curr_index] == '#' && buffer[curr_index+3] == '!') {
 80021e4:	4b52      	ldr	r3, [pc, #328]	@ (8002330 <uart_handle+0x220>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b57      	ldr	r3, [pc, #348]	@ (8002348 <uart_handle+0x238>)
 80021ec:	5c9b      	ldrb	r3, [r3, r2]
 80021ee:	2b23      	cmp	r3, #35	@ 0x23
 80021f0:	d17b      	bne.n	80022ea <uart_handle+0x1da>
 80021f2:	4b4f      	ldr	r3, [pc, #316]	@ (8002330 <uart_handle+0x220>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	3303      	adds	r3, #3
 80021f8:	4a53      	ldr	r2, [pc, #332]	@ (8002348 <uart_handle+0x238>)
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
 80021fc:	2b21      	cmp	r3, #33	@ 0x21
 80021fe:	d174      	bne.n	80022ea <uart_handle+0x1da>
			if(buffer[curr_index+1] >= '0' && buffer[curr_index+1] <= '9' && buffer[curr_index+2] >= '0' && buffer[curr_index+2] <= '9') {
 8002200:	4b4b      	ldr	r3, [pc, #300]	@ (8002330 <uart_handle+0x220>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	4a50      	ldr	r2, [pc, #320]	@ (8002348 <uart_handle+0x238>)
 8002208:	5cd3      	ldrb	r3, [r2, r3]
 800220a:	2b2f      	cmp	r3, #47	@ 0x2f
 800220c:	d965      	bls.n	80022da <uart_handle+0x1ca>
 800220e:	4b48      	ldr	r3, [pc, #288]	@ (8002330 <uart_handle+0x220>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	3301      	adds	r3, #1
 8002214:	4a4c      	ldr	r2, [pc, #304]	@ (8002348 <uart_handle+0x238>)
 8002216:	5cd3      	ldrb	r3, [r2, r3]
 8002218:	2b39      	cmp	r3, #57	@ 0x39
 800221a:	d85e      	bhi.n	80022da <uart_handle+0x1ca>
 800221c:	4b44      	ldr	r3, [pc, #272]	@ (8002330 <uart_handle+0x220>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	3302      	adds	r3, #2
 8002222:	4a49      	ldr	r2, [pc, #292]	@ (8002348 <uart_handle+0x238>)
 8002224:	5cd3      	ldrb	r3, [r2, r3]
 8002226:	2b2f      	cmp	r3, #47	@ 0x2f
 8002228:	d957      	bls.n	80022da <uart_handle+0x1ca>
 800222a:	4b41      	ldr	r3, [pc, #260]	@ (8002330 <uart_handle+0x220>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	3302      	adds	r3, #2
 8002230:	4a45      	ldr	r2, [pc, #276]	@ (8002348 <uart_handle+0x238>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	2b39      	cmp	r3, #57	@ 0x39
 8002236:	d850      	bhi.n	80022da <uart_handle+0x1ca>
				uart_hour = (buffer[curr_index+1]-'0')*10 + (buffer[curr_index+2]-'0');
 8002238:	4b3d      	ldr	r3, [pc, #244]	@ (8002330 <uart_handle+0x220>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	4a42      	ldr	r2, [pc, #264]	@ (8002348 <uart_handle+0x238>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	461a      	mov	r2, r3
 8002244:	0092      	lsls	r2, r2, #2
 8002246:	4413      	add	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b38      	ldr	r3, [pc, #224]	@ (8002330 <uart_handle+0x220>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	3302      	adds	r3, #2
 8002252:	493d      	ldr	r1, [pc, #244]	@ (8002348 <uart_handle+0x238>)
 8002254:	5ccb      	ldrb	r3, [r1, r3]
 8002256:	4413      	add	r3, r2
 8002258:	b2db      	uxtb	r3, r3
 800225a:	3b10      	subs	r3, #16
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b3b      	ldr	r3, [pc, #236]	@ (800234c <uart_handle+0x23c>)
 8002260:	701a      	strb	r2, [r3, #0]
				if(uart_hour >= 0 && uart_hour < 24) {
 8002262:	4b3a      	ldr	r3, [pc, #232]	@ (800234c <uart_handle+0x23c>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b17      	cmp	r3, #23
 8002268:	d830      	bhi.n	80022cc <uart_handle+0x1bc>
                    if (count == 0){
 800226a:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <uart_handle+0x204>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d111      	bne.n	8002296 <uart_handle+0x186>
					ds3231_Write(ADDRESS_HOUR, uart_hour);
 8002272:	4b36      	ldr	r3, [pc, #216]	@ (800234c <uart_handle+0x23c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4619      	mov	r1, r3
 8002278:	2002      	movs	r0, #2
 800227a:	f7fe fa2d 	bl	80006d8 <ds3231_Write>
					uart_Rs232SendString((uint8_t*)"Hour update successfully\n");
 800227e:	4834      	ldr	r0, [pc, #208]	@ (8002350 <uart_handle+0x240>)
 8002280:	f000 fab0 	bl	80027e4 <uart_Rs232SendString>
					uart_Rs232SendNum(uart_hour);
 8002284:	4b31      	ldr	r3, [pc, #196]	@ (800234c <uart_handle+0x23c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fac5 	bl	8002818 <uart_Rs232SendNum>
                    uart_Rs232SendString((uint8_t*)"\nMinute\n");
 800228e:	4823      	ldr	r0, [pc, #140]	@ (800231c <uart_handle+0x20c>)
 8002290:	f000 faa8 	bl	80027e4 <uart_Rs232SendString>
 8002294:	e013      	b.n	80022be <uart_handle+0x1ae>
                    }
                    else {
					ds3231_Write(ADDRESS_MIN, uart_hour);
 8002296:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <uart_handle+0x23c>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4619      	mov	r1, r3
 800229c:	2001      	movs	r0, #1
 800229e:	f7fe fa1b 	bl	80006d8 <ds3231_Write>
					uart_Rs232SendString((uint8_t*)"Minute update successfully\n");
 80022a2:	482c      	ldr	r0, [pc, #176]	@ (8002354 <uart_handle+0x244>)
 80022a4:	f000 fa9e 	bl	80027e4 <uart_Rs232SendString>
					uart_Rs232SendNum(uart_hour);
 80022a8:	4b28      	ldr	r3, [pc, #160]	@ (800234c <uart_handle+0x23c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fab3 	bl	8002818 <uart_Rs232SendNum>
					currentMode = DISPLAY_MODE;
 80022b2:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <uart_handle+0x230>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
					lcd_Clear(BLACK);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7fe fd4f 	bl	8000d5c <lcd_Clear>
                    }
                    count = 1 - count;
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <uart_handle+0x204>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f1c3 0301 	rsb	r3, r3, #1
 80022c6:	4a13      	ldr	r2, [pc, #76]	@ (8002314 <uart_handle+0x204>)
 80022c8:	6013      	str	r3, [r2, #0]
				if(uart_hour >= 0 && uart_hour < 24) {
 80022ca:	e00d      	b.n	80022e8 <uart_handle+0x1d8>
				}
				else {
					// Print data out of range
					uart_Rs232SendString((uint8_t*)"Data out of range\n");
 80022cc:	4822      	ldr	r0, [pc, #136]	@ (8002358 <uart_handle+0x248>)
 80022ce:	f000 fa89 	bl	80027e4 <uart_Rs232SendString>
					count_request_uart = 0;
 80022d2:	4b14      	ldr	r3, [pc, #80]	@ (8002324 <uart_handle+0x214>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
				if(uart_hour >= 0 && uart_hour < 24) {
 80022d8:	e006      	b.n	80022e8 <uart_handle+0x1d8>
				}
			}
			else {
				// Print Error
				uart_Rs232SendString((uint8_t*)"Error\n");
 80022da:	4820      	ldr	r0, [pc, #128]	@ (800235c <uart_handle+0x24c>)
 80022dc:	f000 fa82 	bl	80027e4 <uart_Rs232SendString>
				count_request_uart = 0;
 80022e0:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <uart_handle+0x214>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
			if(buffer[curr_index+1] >= '0' && buffer[curr_index+1] <= '9' && buffer[curr_index+2] >= '0' && buffer[curr_index+2] <= '9') {
 80022e6:	e006      	b.n	80022f6 <uart_handle+0x1e6>
 80022e8:	e005      	b.n	80022f6 <uart_handle+0x1e6>
			}
		}
		else {
			// Print Wrong format
			uart_Rs232SendString((uint8_t*)"Wrong format\n");
 80022ea:	481d      	ldr	r0, [pc, #116]	@ (8002360 <uart_handle+0x250>)
 80022ec:	f000 fa7a 	bl	80027e4 <uart_Rs232SendString>
			count_request_uart = 0;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002324 <uart_handle+0x214>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
		}

		buffer_flag = 0;
 80022f6:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <uart_handle+0x234>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
		curr_index = index_buffer;
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <uart_handle+0x21c>)
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <uart_handle+0x220>)
 8002302:	701a      	strb	r2, [r3, #0]
		count_char = 0;
 8002304:	4b08      	ldr	r3, [pc, #32]	@ (8002328 <uart_handle+0x218>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
	}
}
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000189 	.word	0x20000189
 8002314:	2000018c 	.word	0x2000018c
 8002318:	08007ecc 	.word	0x08007ecc
 800231c:	08007ed4 	.word	0x08007ed4
 8002320:	2000019a 	.word	0x2000019a
 8002324:	2000018b 	.word	0x2000018b
 8002328:	200002ca 	.word	0x200002ca
 800232c:	200002c6 	.word	0x200002c6
 8002330:	200002c7 	.word	0x200002c7
 8002334:	08007ee0 	.word	0x08007ee0
 8002338:	08007ef0 	.word	0x08007ef0
 800233c:	20000194 	.word	0x20000194
 8002340:	2000017c 	.word	0x2000017c
 8002344:	200002c8 	.word	0x200002c8
 8002348:	200002a8 	.word	0x200002a8
 800234c:	2000018a 	.word	0x2000018a
 8002350:	08007efc 	.word	0x08007efc
 8002354:	08007f18 	.word	0x08007f18
 8002358:	08007f34 	.word	0x08007f34
 800235c:	08007f48 	.word	0x08007f48
 8002360:	08007f50 	.word	0x08007f50

08002364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002368:	b672      	cpsid	i
}
 800236a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <Error_Handler+0x8>

08002370 <timer_init>:

uint16_t flag_timer3 = 0;
uint16_t timer3_counter = 0;
uint16_t timer3_MUL = 0;

void timer_init(){
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002374:	4802      	ldr	r0, [pc, #8]	@ (8002380 <timer_init+0x10>)
 8002376:	f003 fb75 	bl	8005a64 <HAL_TIM_Base_Start_IT>
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200001fc 	.word	0x200001fc

08002384 <setTimer2>:

void setTimer2(uint16_t duration){
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800238e:	4a08      	ldr	r2, [pc, #32]	@ (80023b0 <setTimer2+0x2c>)
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002394:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <setTimer2+0x2c>)
 8002396:	881a      	ldrh	r2, [r3, #0]
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <setTimer2+0x30>)
 800239a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <setTimer2+0x34>)
 800239e:	2200      	movs	r2, #0
 80023a0:	801a      	strh	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000198 	.word	0x20000198
 80023b4:	20000196 	.word	0x20000196
 80023b8:	20000194 	.word	0x20000194

080023bc <setTimer3>:

void setTimer3(uint16_t duration){
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_3;
 80023c6:	4a08      	ldr	r2, [pc, #32]	@ (80023e8 <setTimer3+0x2c>)
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <setTimer3+0x2c>)
 80023ce:	881a      	ldrh	r2, [r3, #0]
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <setTimer3+0x30>)
 80023d2:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 80023d4:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <setTimer3+0x34>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	801a      	strh	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	2000019e 	.word	0x2000019e
 80023ec:	2000019c 	.word	0x2000019c
 80023f0:	2000019a 	.word	0x2000019a

080023f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002404:	d12b      	bne.n	800245e <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer2_counter > 0){
 8002406:	4b18      	ldr	r3, [pc, #96]	@ (8002468 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d010      	beq.n	8002430 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800240e:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002418:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800241a:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002422:	4b12      	ldr	r3, [pc, #72]	@ (800246c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002424:	2201      	movs	r2, #1
 8002426:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002428:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800242a:	881a      	ldrh	r2, [r3, #0]
 800242c:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800242e:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer3_counter > 0){
 8002430:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d010      	beq.n	800245a <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8002438:	4b0e      	ldr	r3, [pc, #56]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002442:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d106      	bne.n	800245a <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 800244c:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800244e:	2201      	movs	r2, #1
 8002450:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8002452:	4b0a      	ldr	r3, [pc, #40]	@ (800247c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002454:	881a      	ldrh	r2, [r3, #0]
 8002456:	4b07      	ldr	r3, [pc, #28]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002458:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 800245a:	f7ff f865 	bl	8001528 <led7_Scan>
	}
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000196 	.word	0x20000196
 800246c:	20000194 	.word	0x20000194
 8002470:	20000198 	.word	0x20000198
 8002474:	2000019c 	.word	0x2000019c
 8002478:	2000019a 	.word	0x2000019a
 800247c:	2000019e 	.word	0x2000019e

08002480 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002484:	4b17      	ldr	r3, [pc, #92]	@ (80024e4 <MX_SPI1_Init+0x64>)
 8002486:	4a18      	ldr	r2, [pc, #96]	@ (80024e8 <MX_SPI1_Init+0x68>)
 8002488:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800248a:	4b16      	ldr	r3, [pc, #88]	@ (80024e4 <MX_SPI1_Init+0x64>)
 800248c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002490:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002492:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <MX_SPI1_Init+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002498:	4b12      	ldr	r3, [pc, #72]	@ (80024e4 <MX_SPI1_Init+0x64>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800249e:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <MX_SPI1_Init+0x64>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024a4:	4b0f      	ldr	r3, [pc, #60]	@ (80024e4 <MX_SPI1_Init+0x64>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024aa:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <MX_SPI1_Init+0x64>)
 80024ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024b2:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <MX_SPI1_Init+0x64>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024b8:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <MX_SPI1_Init+0x64>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024be:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <MX_SPI1_Init+0x64>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c4:	4b07      	ldr	r3, [pc, #28]	@ (80024e4 <MX_SPI1_Init+0x64>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024ca:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <MX_SPI1_Init+0x64>)
 80024cc:	220a      	movs	r2, #10
 80024ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024d0:	4804      	ldr	r0, [pc, #16]	@ (80024e4 <MX_SPI1_Init+0x64>)
 80024d2:	f002 fc8b 	bl	8004dec <HAL_SPI_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024dc:	f7ff ff42 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200001a0 	.word	0x200001a0
 80024e8:	40013000 	.word	0x40013000

080024ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	@ 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a19      	ldr	r2, [pc, #100]	@ (8002570 <HAL_SPI_MspInit+0x84>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d12b      	bne.n	8002566 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	4b18      	ldr	r3, [pc, #96]	@ (8002574 <HAL_SPI_MspInit+0x88>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	4a17      	ldr	r2, [pc, #92]	@ (8002574 <HAL_SPI_MspInit+0x88>)
 8002518:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800251c:	6453      	str	r3, [r2, #68]	@ 0x44
 800251e:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <HAL_SPI_MspInit+0x88>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <HAL_SPI_MspInit+0x88>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	4a10      	ldr	r2, [pc, #64]	@ (8002574 <HAL_SPI_MspInit+0x88>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	6313      	str	r3, [r2, #48]	@ 0x30
 800253a:	4b0e      	ldr	r3, [pc, #56]	@ (8002574 <HAL_SPI_MspInit+0x88>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002546:	2338      	movs	r3, #56	@ 0x38
 8002548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002552:	2303      	movs	r3, #3
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002556:	2305      	movs	r3, #5
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	4619      	mov	r1, r3
 8002560:	4805      	ldr	r0, [pc, #20]	@ (8002578 <HAL_SPI_MspInit+0x8c>)
 8002562:	f000 fd07 	bl	8002f74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002566:	bf00      	nop
 8002568:	3728      	adds	r7, #40	@ 0x28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40013000 	.word	0x40013000
 8002574:	40023800 	.word	0x40023800
 8002578:	40020400 	.word	0x40020400

0800257c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <HAL_MspInit+0x4c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258a:	4a0f      	ldr	r2, [pc, #60]	@ (80025c8 <HAL_MspInit+0x4c>)
 800258c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002590:	6453      	str	r3, [r2, #68]	@ 0x44
 8002592:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <HAL_MspInit+0x4c>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_MspInit+0x4c>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	4a08      	ldr	r2, [pc, #32]	@ (80025c8 <HAL_MspInit+0x4c>)
 80025a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_MspInit+0x4c>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800

080025cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <NMI_Handler+0x4>

080025d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <HardFault_Handler+0x4>

080025dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e0:	bf00      	nop
 80025e2:	e7fd      	b.n	80025e0 <MemManage_Handler+0x4>

080025e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <BusFault_Handler+0x4>

080025ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <UsageFault_Handler+0x4>

080025f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002622:	f000 fabf 	bl	8002ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <TIM2_IRQHandler+0x10>)
 8002632:	f003 fa87 	bl	8005b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200001fc 	.word	0x200001fc

08002640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002644:	4802      	ldr	r0, [pc, #8]	@ (8002650 <USART1_IRQHandler+0x10>)
 8002646:	f003 ff4f 	bl	80064e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200002cc 	.word	0x200002cc

08002654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800265c:	4a14      	ldr	r2, [pc, #80]	@ (80026b0 <_sbrk+0x5c>)
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <_sbrk+0x60>)
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002668:	4b13      	ldr	r3, [pc, #76]	@ (80026b8 <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <_sbrk+0x64>)
 8002672:	4a12      	ldr	r2, [pc, #72]	@ (80026bc <_sbrk+0x68>)
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002676:	4b10      	ldr	r3, [pc, #64]	@ (80026b8 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	d207      	bcs.n	8002694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002684:	f004 ff8c 	bl	80075a0 <__errno>
 8002688:	4603      	mov	r3, r0
 800268a:	220c      	movs	r2, #12
 800268c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	e009      	b.n	80026a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002694:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <_sbrk+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800269a:	4b07      	ldr	r3, [pc, #28]	@ (80026b8 <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	4a05      	ldr	r2, [pc, #20]	@ (80026b8 <_sbrk+0x64>)
 80026a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20020000 	.word	0x20020000
 80026b4:	00000400 	.word	0x00000400
 80026b8:	200001f8 	.word	0x200001f8
 80026bc:	20000460 	.word	0x20000460

080026c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c4:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <SystemInit+0x20>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ca:	4a05      	ldr	r2, [pc, #20]	@ (80026e0 <SystemInit+0x20>)
 80026cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ea:	f107 0308 	add.w	r3, r7, #8
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f8:	463b      	mov	r3, r7
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002700:	4b1d      	ldr	r3, [pc, #116]	@ (8002778 <MX_TIM2_Init+0x94>)
 8002702:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002706:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002708:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <MX_TIM2_Init+0x94>)
 800270a:	f240 3247 	movw	r2, #839	@ 0x347
 800270e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002710:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <MX_TIM2_Init+0x94>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002716:	4b18      	ldr	r3, [pc, #96]	@ (8002778 <MX_TIM2_Init+0x94>)
 8002718:	2263      	movs	r2, #99	@ 0x63
 800271a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271c:	4b16      	ldr	r3, [pc, #88]	@ (8002778 <MX_TIM2_Init+0x94>)
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002722:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <MX_TIM2_Init+0x94>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002728:	4813      	ldr	r0, [pc, #76]	@ (8002778 <MX_TIM2_Init+0x94>)
 800272a:	f003 f94b 	bl	80059c4 <HAL_TIM_Base_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002734:	f7ff fe16 	bl	8002364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800273c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	4619      	mov	r1, r3
 8002744:	480c      	ldr	r0, [pc, #48]	@ (8002778 <MX_TIM2_Init+0x94>)
 8002746:	f003 fb05 	bl	8005d54 <HAL_TIM_ConfigClockSource>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002750:	f7ff fe08 	bl	8002364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002754:	2300      	movs	r3, #0
 8002756:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800275c:	463b      	mov	r3, r7
 800275e:	4619      	mov	r1, r3
 8002760:	4805      	ldr	r0, [pc, #20]	@ (8002778 <MX_TIM2_Init+0x94>)
 8002762:	f003 fd21 	bl	80061a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800276c:	f7ff fdfa 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	200001fc 	.word	0x200001fc

0800277c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800278c:	d115      	bne.n	80027ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <HAL_TIM_Base_MspInit+0x48>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	4a0b      	ldr	r2, [pc, #44]	@ (80027c4 <HAL_TIM_Base_MspInit+0x48>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6413      	str	r3, [r2, #64]	@ 0x40
 800279e:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <HAL_TIM_Base_MspInit+0x48>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2100      	movs	r1, #0
 80027ae:	201c      	movs	r0, #28
 80027b0:	f000 fb17 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027b4:	201c      	movs	r0, #28
 80027b6:	f000 fb30 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800

080027c8 <uart_init_rs232>:
uint8_t curr_index=0;
uint8_t buffer_flag=0;
uint8_t receive_msg=0;
uint8_t count_char=0;

void uart_init_rs232(){
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_msg, 1);
 80027cc:	2201      	movs	r2, #1
 80027ce:	4903      	ldr	r1, [pc, #12]	@ (80027dc <uart_init_rs232+0x14>)
 80027d0:	4803      	ldr	r0, [pc, #12]	@ (80027e0 <uart_init_rs232+0x18>)
 80027d2:	f003 fe58 	bl	8006486 <HAL_UART_Receive_IT>
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200002c9 	.word	0x200002c9
 80027e0:	200002cc 	.word	0x200002cc

080027e4 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	4907      	ldr	r1, [pc, #28]	@ (800280c <uart_Rs232SendString+0x28>)
 80027f0:	4807      	ldr	r0, [pc, #28]	@ (8002810 <uart_Rs232SendString+0x2c>)
 80027f2:	f004 fead 	bl	8007550 <siprintf>
 80027f6:	4603      	mov	r3, r0
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	230a      	movs	r3, #10
 80027fc:	4904      	ldr	r1, [pc, #16]	@ (8002810 <uart_Rs232SendString+0x2c>)
 80027fe:	4805      	ldr	r0, [pc, #20]	@ (8002814 <uart_Rs232SendString+0x30>)
 8002800:	f003 fdaf 	bl	8006362 <HAL_UART_Transmit>
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	08007fa0 	.word	0x08007fa0
 8002810:	20000244 	.word	0x20000244
 8002814:	200002cc 	.word	0x200002cc

08002818 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 8002826:	4824      	ldr	r0, [pc, #144]	@ (80028b8 <uart_Rs232SendNum+0xa0>)
 8002828:	f7ff ffdc 	bl	80027e4 <uart_Rs232SendString>
		return;
 800282c:	e040      	b.n	80028b0 <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 8002832:	230a      	movs	r3, #10
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	e038      	b.n	80028aa <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	3b01      	subs	r3, #1
 800283c:	4619      	mov	r1, r3
 800283e:	200a      	movs	r0, #10
 8002840:	f7fe fbe4 	bl	800100c <mypow>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4293      	cmp	r3, r2
 800284c:	d315      	bcc.n	800287a <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3b01      	subs	r3, #1
 8002856:	4619      	mov	r1, r3
 8002858:	200a      	movs	r0, #10
 800285a:	f7fe fbd7 	bl	800100c <mypow>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	fbb3 f3f2 	udiv	r3, r3, r2
 8002868:	461a      	mov	r2, r3
 800286a:	4914      	ldr	r1, [pc, #80]	@ (80028bc <uart_Rs232SendNum+0xa4>)
 800286c:	4814      	ldr	r0, [pc, #80]	@ (80028c0 <uart_Rs232SendNum+0xa8>)
 800286e:	f004 fe6f 	bl	8007550 <siprintf>
            uart_Rs232SendString(msg);
 8002872:	4813      	ldr	r0, [pc, #76]	@ (80028c0 <uart_Rs232SendNum+0xa8>)
 8002874:	f7ff ffb6 	bl	80027e4 <uart_Rs232SendString>
 8002878:	e005      	b.n	8002886 <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 8002880:	480d      	ldr	r0, [pc, #52]	@ (80028b8 <uart_Rs232SendNum+0xa0>)
 8002882:	f7ff ffaf 	bl	80027e4 <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3b01      	subs	r3, #1
 800288a:	4619      	mov	r1, r3
 800288c:	200a      	movs	r0, #10
 800288e:	f7fe fbbd 	bl	800100c <mypow>
 8002892:	4603      	mov	r3, r0
 8002894:	461a      	mov	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	fbb3 f1f2 	udiv	r1, r3, r2
 800289c:	fb01 f202 	mul.w	r2, r1, r2
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	dcc3      	bgt.n	8002838 <uart_Rs232SendNum+0x20>
    }
}
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	08007fa4 	.word	0x08007fa4
 80028bc:	08007fa8 	.word	0x08007fa8
 80028c0:	20000244 	.word	0x20000244

080028c4 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a13      	ldr	r2, [pc, #76]	@ (8002920 <HAL_UART_RxCpltCallback+0x5c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d11f      	bne.n	8002916 <HAL_UART_RxCpltCallback+0x52>
		// rs232 isr
		// can be modified
//		HAL_UART_Transmit(&huart1, &receive_msg, 1, 10);
		buffer[index_buffer++] = receive_msg;
 80028d6:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <HAL_UART_RxCpltCallback+0x60>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	b2d1      	uxtb	r1, r2
 80028de:	4a11      	ldr	r2, [pc, #68]	@ (8002924 <HAL_UART_RxCpltCallback+0x60>)
 80028e0:	7011      	strb	r1, [r2, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <HAL_UART_RxCpltCallback+0x64>)
 80028e6:	7819      	ldrb	r1, [r3, #0]
 80028e8:	4b10      	ldr	r3, [pc, #64]	@ (800292c <HAL_UART_RxCpltCallback+0x68>)
 80028ea:	5499      	strb	r1, [r3, r2]
		count_char += 1;
 80028ec:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <HAL_UART_RxCpltCallback+0x6c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <HAL_UART_RxCpltCallback+0x6c>)
 80028f6:	701a      	strb	r2, [r3, #0]
		if(index_buffer == 30) index_buffer = 0;
 80028f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <HAL_UART_RxCpltCallback+0x60>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b1e      	cmp	r3, #30
 80028fe:	d102      	bne.n	8002906 <HAL_UART_RxCpltCallback+0x42>
 8002900:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <HAL_UART_RxCpltCallback+0x60>)
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]

		buffer_flag = 1;
 8002906:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <HAL_UART_RxCpltCallback+0x70>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
//		HAL_UART_Transmit(&huart1, &receive_msg, 1, 1000);
		HAL_UART_Receive_IT (&huart1 , &receive_msg , 1);
 800290c:	2201      	movs	r2, #1
 800290e:	4906      	ldr	r1, [pc, #24]	@ (8002928 <HAL_UART_RxCpltCallback+0x64>)
 8002910:	4809      	ldr	r0, [pc, #36]	@ (8002938 <HAL_UART_RxCpltCallback+0x74>)
 8002912:	f003 fdb8 	bl	8006486 <HAL_UART_Receive_IT>
	}
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40011000 	.word	0x40011000
 8002924:	200002c6 	.word	0x200002c6
 8002928:	200002c9 	.word	0x200002c9
 800292c:	200002a8 	.word	0x200002a8
 8002930:	200002ca 	.word	0x200002ca
 8002934:	200002c8 	.word	0x200002c8
 8002938:	200002cc 	.word	0x200002cc

0800293c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002940:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <MX_USART1_UART_Init+0x4c>)
 8002942:	4a12      	ldr	r2, [pc, #72]	@ (800298c <MX_USART1_UART_Init+0x50>)
 8002944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002946:	4b10      	ldr	r3, [pc, #64]	@ (8002988 <MX_USART1_UART_Init+0x4c>)
 8002948:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800294c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800294e:	4b0e      	ldr	r3, [pc, #56]	@ (8002988 <MX_USART1_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002954:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <MX_USART1_UART_Init+0x4c>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800295a:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <MX_USART1_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002960:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <MX_USART1_UART_Init+0x4c>)
 8002962:	220c      	movs	r2, #12
 8002964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002966:	4b08      	ldr	r3, [pc, #32]	@ (8002988 <MX_USART1_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800296c:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <MX_USART1_UART_Init+0x4c>)
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002972:	4805      	ldr	r0, [pc, #20]	@ (8002988 <MX_USART1_UART_Init+0x4c>)
 8002974:	f003 fca8 	bl	80062c8 <HAL_UART_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800297e:	f7ff fcf1 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200002cc 	.word	0x200002cc
 800298c:	40011000 	.word	0x40011000

08002990 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	@ 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002a24 <HAL_UART_MspInit+0x94>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d134      	bne.n	8002a1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a28 <HAL_UART_MspInit+0x98>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002a28 <HAL_UART_MspInit+0x98>)
 80029bc:	f043 0310 	orr.w	r3, r3, #16
 80029c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029c2:	4b19      	ldr	r3, [pc, #100]	@ (8002a28 <HAL_UART_MspInit+0x98>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <HAL_UART_MspInit+0x98>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	4a14      	ldr	r2, [pc, #80]	@ (8002a28 <HAL_UART_MspInit+0x98>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029de:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <HAL_UART_MspInit+0x98>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80029ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029fc:	2307      	movs	r3, #7
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4619      	mov	r1, r3
 8002a06:	4809      	ldr	r0, [pc, #36]	@ (8002a2c <HAL_UART_MspInit+0x9c>)
 8002a08:	f000 fab4 	bl	8002f74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2025      	movs	r0, #37	@ 0x25
 8002a12:	f000 f9e6 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a16:	2025      	movs	r0, #37	@ 0x25
 8002a18:	f000 f9ff 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3728      	adds	r7, #40	@ 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40011000 	.word	0x40011000
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40020000 	.word	0x40020000

08002a30 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	0092      	lsls	r2, r2, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	b2db      	uxtb	r3, r3
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa8 <DEC2BCD+0x44>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	08db      	lsrs	r3, r3, #3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	b258      	sxtb	r0, r3
 8002a7e:	79fa      	ldrb	r2, [r7, #7]
 8002a80:	4b09      	ldr	r3, [pc, #36]	@ (8002aa8 <DEC2BCD+0x44>)
 8002a82:	fba3 1302 	umull	r1, r3, r3, r2
 8002a86:	08d9      	lsrs	r1, r3, #3
 8002a88:	460b      	mov	r3, r1
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	4303      	orrs	r3, r0
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	cccccccd 	.word	0xcccccccd

08002aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ab0:	480d      	ldr	r0, [pc, #52]	@ (8002ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ab2:	490e      	ldr	r1, [pc, #56]	@ (8002aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ab4:	4a0e      	ldr	r2, [pc, #56]	@ (8002af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab8:	e002      	b.n	8002ac0 <LoopCopyDataInit>

08002aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002abe:	3304      	adds	r3, #4

08002ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac4:	d3f9      	bcc.n	8002aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8002af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ac8:	4c0b      	ldr	r4, [pc, #44]	@ (8002af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002acc:	e001      	b.n	8002ad2 <LoopFillZerobss>

08002ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad0:	3204      	adds	r2, #4

08002ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad4:	d3fb      	bcc.n	8002ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ad6:	f7ff fdf3 	bl	80026c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ada:	f004 fd67 	bl	80075ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ade:	f7ff f983 	bl	8001de8 <main>
  bx  lr    
 8002ae2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002af0:	0800af90 	.word	0x0800af90
  ldr r2, =_sbss
 8002af4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002af8:	2000045c 	.word	0x2000045c

08002afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002afc:	e7fe      	b.n	8002afc <ADC_IRQHandler>
	...

08002b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b04:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <HAL_Init+0x40>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0d      	ldr	r2, [pc, #52]	@ (8002b40 <HAL_Init+0x40>)
 8002b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <HAL_Init+0x40>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	@ (8002b40 <HAL_Init+0x40>)
 8002b16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b1c:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <HAL_Init+0x40>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a07      	ldr	r2, [pc, #28]	@ (8002b40 <HAL_Init+0x40>)
 8002b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b28:	2003      	movs	r0, #3
 8002b2a:	f000 f94f 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b2e:	200f      	movs	r0, #15
 8002b30:	f000 f808 	bl	8002b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b34:	f7ff fd22 	bl	800257c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023c00 	.word	0x40023c00

08002b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b4c:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <HAL_InitTick+0x54>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_InitTick+0x58>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f967 	bl	8002e36 <HAL_SYSTICK_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00e      	b.n	8002b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b0f      	cmp	r3, #15
 8002b76:	d80a      	bhi.n	8002b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b80:	f000 f92f 	bl	8002de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b84:	4a06      	ldr	r2, [pc, #24]	@ (8002ba0 <HAL_InitTick+0x5c>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	2000001c 	.word	0x2000001c
 8002b9c:	20000024 	.word	0x20000024
 8002ba0:	20000020 	.word	0x20000020

08002ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <HAL_IncTick+0x20>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_IncTick+0x24>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	4a04      	ldr	r2, [pc, #16]	@ (8002bc8 <HAL_IncTick+0x24>)
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000024 	.word	0x20000024
 8002bc8:	20000310 	.word	0x20000310

08002bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd0:	4b03      	ldr	r3, [pc, #12]	@ (8002be0 <HAL_GetTick+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000310 	.word	0x20000310

08002be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bec:	f7ff ffee 	bl	8002bcc <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d005      	beq.n	8002c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <HAL_Delay+0x44>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c0a:	bf00      	nop
 8002c0c:	f7ff ffde 	bl	8002bcc <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d8f7      	bhi.n	8002c0c <HAL_Delay+0x28>
  {
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000024 	.word	0x20000024

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5e:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	60d3      	str	r3, [r2, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	@ (8002cc8 <__NVIC_EnableIRQ+0x38>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	@ (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	@ (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	@ 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
         );
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	@ 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f7ff ff8e 	bl	8002ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	@ (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff29 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df4:	f7ff ff3e 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff8e 	bl	8002d20 <NVIC_EncodePriority>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff5d 	bl	8002ccc <__NVIC_SetPriority>
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff31 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ffa2 	bl	8002d88 <SysTick_Config>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff feb6 	bl	8002bcc <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d008      	beq.n	8002e80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2280      	movs	r2, #128	@ 0x80
 8002e72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e052      	b.n	8002f26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0216 	bic.w	r2, r2, #22
 8002e8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <HAL_DMA_Abort+0x62>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0208 	bic.w	r2, r2, #8
 8002ebe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed0:	e013      	b.n	8002efa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ed2:	f7ff fe7b 	bl	8002bcc <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d90c      	bls.n	8002efa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2203      	movs	r2, #3
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e015      	b.n	8002f26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e4      	bne.n	8002ed2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0c:	223f      	movs	r2, #63	@ 0x3f
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d004      	beq.n	8002f4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2280      	movs	r2, #128	@ 0x80
 8002f46:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e00c      	b.n	8002f66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2205      	movs	r2, #5
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	@ 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e16b      	b.n	8003268 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f90:	2201      	movs	r2, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	f040 815a 	bne.w	8003262 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d005      	beq.n	8002fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d130      	bne.n	8003028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 0201 	and.w	r2, r3, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b03      	cmp	r3, #3
 8003032:	d017      	beq.n	8003064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d123      	bne.n	80030b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	08da      	lsrs	r2, r3, #3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3208      	adds	r2, #8
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	220f      	movs	r2, #15
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0203 	and.w	r2, r3, #3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80b4 	beq.w	8003262 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b60      	ldr	r3, [pc, #384]	@ (8003280 <HAL_GPIO_Init+0x30c>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	4a5f      	ldr	r2, [pc, #380]	@ (8003280 <HAL_GPIO_Init+0x30c>)
 8003104:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003108:	6453      	str	r3, [r2, #68]	@ 0x44
 800310a:	4b5d      	ldr	r3, [pc, #372]	@ (8003280 <HAL_GPIO_Init+0x30c>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003116:	4a5b      	ldr	r2, [pc, #364]	@ (8003284 <HAL_GPIO_Init+0x310>)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	3302      	adds	r3, #2
 800311e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a52      	ldr	r2, [pc, #328]	@ (8003288 <HAL_GPIO_Init+0x314>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d02b      	beq.n	800319a <HAL_GPIO_Init+0x226>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a51      	ldr	r2, [pc, #324]	@ (800328c <HAL_GPIO_Init+0x318>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d025      	beq.n	8003196 <HAL_GPIO_Init+0x222>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a50      	ldr	r2, [pc, #320]	@ (8003290 <HAL_GPIO_Init+0x31c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01f      	beq.n	8003192 <HAL_GPIO_Init+0x21e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4f      	ldr	r2, [pc, #316]	@ (8003294 <HAL_GPIO_Init+0x320>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d019      	beq.n	800318e <HAL_GPIO_Init+0x21a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4e      	ldr	r2, [pc, #312]	@ (8003298 <HAL_GPIO_Init+0x324>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_GPIO_Init+0x216>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4d      	ldr	r2, [pc, #308]	@ (800329c <HAL_GPIO_Init+0x328>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00d      	beq.n	8003186 <HAL_GPIO_Init+0x212>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a4c      	ldr	r2, [pc, #304]	@ (80032a0 <HAL_GPIO_Init+0x32c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <HAL_GPIO_Init+0x20e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a4b      	ldr	r2, [pc, #300]	@ (80032a4 <HAL_GPIO_Init+0x330>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d101      	bne.n	800317e <HAL_GPIO_Init+0x20a>
 800317a:	2307      	movs	r3, #7
 800317c:	e00e      	b.n	800319c <HAL_GPIO_Init+0x228>
 800317e:	2308      	movs	r3, #8
 8003180:	e00c      	b.n	800319c <HAL_GPIO_Init+0x228>
 8003182:	2306      	movs	r3, #6
 8003184:	e00a      	b.n	800319c <HAL_GPIO_Init+0x228>
 8003186:	2305      	movs	r3, #5
 8003188:	e008      	b.n	800319c <HAL_GPIO_Init+0x228>
 800318a:	2304      	movs	r3, #4
 800318c:	e006      	b.n	800319c <HAL_GPIO_Init+0x228>
 800318e:	2303      	movs	r3, #3
 8003190:	e004      	b.n	800319c <HAL_GPIO_Init+0x228>
 8003192:	2302      	movs	r3, #2
 8003194:	e002      	b.n	800319c <HAL_GPIO_Init+0x228>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_GPIO_Init+0x228>
 800319a:	2300      	movs	r3, #0
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	f002 0203 	and.w	r2, r2, #3
 80031a2:	0092      	lsls	r2, r2, #2
 80031a4:	4093      	lsls	r3, r2
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ac:	4935      	ldr	r1, [pc, #212]	@ (8003284 <HAL_GPIO_Init+0x310>)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	3302      	adds	r3, #2
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ba:	4b3b      	ldr	r3, [pc, #236]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031de:	4a32      	ldr	r2, [pc, #200]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031e4:	4b30      	ldr	r3, [pc, #192]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003208:	4a27      	ldr	r2, [pc, #156]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800320e:	4b26      	ldr	r3, [pc, #152]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003232:	4a1d      	ldr	r2, [pc, #116]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003238:	4b1b      	ldr	r3, [pc, #108]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800325c:	4a12      	ldr	r2, [pc, #72]	@ (80032a8 <HAL_GPIO_Init+0x334>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3301      	adds	r3, #1
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b0f      	cmp	r3, #15
 800326c:	f67f ae90 	bls.w	8002f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3724      	adds	r7, #36	@ 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	40013800 	.word	0x40013800
 8003288:	40020000 	.word	0x40020000
 800328c:	40020400 	.word	0x40020400
 8003290:	40020800 	.word	0x40020800
 8003294:	40020c00 	.word	0x40020c00
 8003298:	40021000 	.word	0x40021000
 800329c:	40021400 	.word	0x40021400
 80032a0:	40021800 	.word	0x40021800
 80032a4:	40021c00 	.word	0x40021c00
 80032a8:	40013c00 	.word	0x40013c00

080032ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
 80032b8:	4613      	mov	r3, r2
 80032ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032bc:	787b      	ldrb	r3, [r7, #1]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032c2:	887a      	ldrh	r2, [r7, #2]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032c8:	e003      	b.n	80032d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ca:	887b      	ldrh	r3, [r7, #2]
 80032cc:	041a      	lsls	r2, r3, #16
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	619a      	str	r2, [r3, #24]
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e12b      	b.n	800354a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd fc62 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2224      	movs	r2, #36	@ 0x24
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003332:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003342:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003344:	f001 fd2a 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8003348:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4a81      	ldr	r2, [pc, #516]	@ (8003554 <HAL_I2C_Init+0x274>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d807      	bhi.n	8003364 <HAL_I2C_Init+0x84>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4a80      	ldr	r2, [pc, #512]	@ (8003558 <HAL_I2C_Init+0x278>)
 8003358:	4293      	cmp	r3, r2
 800335a:	bf94      	ite	ls
 800335c:	2301      	movls	r3, #1
 800335e:	2300      	movhi	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e006      	b.n	8003372 <HAL_I2C_Init+0x92>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4a7d      	ldr	r2, [pc, #500]	@ (800355c <HAL_I2C_Init+0x27c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	bf94      	ite	ls
 800336c:	2301      	movls	r3, #1
 800336e:	2300      	movhi	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0e7      	b.n	800354a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4a78      	ldr	r2, [pc, #480]	@ (8003560 <HAL_I2C_Init+0x280>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	0c9b      	lsrs	r3, r3, #18
 8003384:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003554 <HAL_I2C_Init+0x274>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d802      	bhi.n	80033b4 <HAL_I2C_Init+0xd4>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	3301      	adds	r3, #1
 80033b2:	e009      	b.n	80033c8 <HAL_I2C_Init+0xe8>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	4a69      	ldr	r2, [pc, #420]	@ (8003564 <HAL_I2C_Init+0x284>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	3301      	adds	r3, #1
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	495c      	ldr	r1, [pc, #368]	@ (8003554 <HAL_I2C_Init+0x274>)
 80033e4:	428b      	cmp	r3, r1
 80033e6:	d819      	bhi.n	800341c <HAL_I2C_Init+0x13c>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1e59      	subs	r1, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f6:	1c59      	adds	r1, r3, #1
 80033f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033fc:	400b      	ands	r3, r1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_I2C_Init+0x138>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1e59      	subs	r1, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003410:	3301      	adds	r3, #1
 8003412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003416:	e051      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 8003418:	2304      	movs	r3, #4
 800341a:	e04f      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d111      	bne.n	8003448 <HAL_I2C_Init+0x168>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1e58      	subs	r0, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	440b      	add	r3, r1
 8003432:	fbb0 f3f3 	udiv	r3, r0, r3
 8003436:	3301      	adds	r3, #1
 8003438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e012      	b.n	800346e <HAL_I2C_Init+0x18e>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	0099      	lsls	r1, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_I2C_Init+0x196>
 8003472:	2301      	movs	r3, #1
 8003474:	e022      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10e      	bne.n	800349c <HAL_I2C_Init+0x1bc>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1e58      	subs	r0, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	440b      	add	r3, r1
 800348c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003490:	3301      	adds	r3, #1
 8003492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800349a:	e00f      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e58      	subs	r0, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	0099      	lsls	r1, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b2:	3301      	adds	r3, #1
 80034b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	6809      	ldr	r1, [r1, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6911      	ldr	r1, [r2, #16]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	4311      	orrs	r1, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	000186a0 	.word	0x000186a0
 8003558:	001e847f 	.word	0x001e847f
 800355c:	003d08ff 	.word	0x003d08ff
 8003560:	431bde83 	.word	0x431bde83
 8003564:	10624dd3 	.word	0x10624dd3

08003568 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	461a      	mov	r2, r3
 8003576:	4603      	mov	r3, r0
 8003578:	817b      	strh	r3, [r7, #10]
 800357a:	460b      	mov	r3, r1
 800357c:	813b      	strh	r3, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003582:	f7ff fb23 	bl	8002bcc <HAL_GetTick>
 8003586:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b20      	cmp	r3, #32
 8003592:	f040 80d9 	bne.w	8003748 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2319      	movs	r3, #25
 800359c:	2201      	movs	r2, #1
 800359e:	496d      	ldr	r1, [pc, #436]	@ (8003754 <HAL_I2C_Mem_Write+0x1ec>)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fdad 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
 80035ae:	e0cc      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_I2C_Mem_Write+0x56>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e0c5      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d007      	beq.n	80035e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2221      	movs	r2, #33	@ 0x21
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2240      	movs	r2, #64	@ 0x40
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a3a      	ldr	r2, [r7, #32]
 800360e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003614:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a4d      	ldr	r2, [pc, #308]	@ (8003758 <HAL_I2C_Mem_Write+0x1f0>)
 8003624:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003626:	88f8      	ldrh	r0, [r7, #6]
 8003628:	893a      	ldrh	r2, [r7, #8]
 800362a:	8979      	ldrh	r1, [r7, #10]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	4603      	mov	r3, r0
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fbe4 	bl	8003e04 <I2C_RequestMemoryWrite>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d052      	beq.n	80036e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e081      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fe2e 	bl	80042ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00d      	beq.n	8003672 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	2b04      	cmp	r3, #4
 800365c:	d107      	bne.n	800366e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800366c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06b      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d11b      	bne.n	80036e8 <HAL_I2C_Mem_Write+0x180>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d017      	beq.n	80036e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1aa      	bne.n	8003646 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fe1a 	bl	800432e <I2C_WaitOnBTFFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00d      	beq.n	800371c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	2b04      	cmp	r3, #4
 8003706:	d107      	bne.n	8003718 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003716:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e016      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800372a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	00100002 	.word	0x00100002
 8003758:	ffff0000 	.word	0xffff0000

0800375c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08c      	sub	sp, #48	@ 0x30
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	4608      	mov	r0, r1
 8003766:	4611      	mov	r1, r2
 8003768:	461a      	mov	r2, r3
 800376a:	4603      	mov	r3, r0
 800376c:	817b      	strh	r3, [r7, #10]
 800376e:	460b      	mov	r3, r1
 8003770:	813b      	strh	r3, [r7, #8]
 8003772:	4613      	mov	r3, r2
 8003774:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003776:	f7ff fa29 	bl	8002bcc <HAL_GetTick>
 800377a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b20      	cmp	r3, #32
 8003786:	f040 8208 	bne.w	8003b9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	2319      	movs	r3, #25
 8003790:	2201      	movs	r2, #1
 8003792:	497b      	ldr	r1, [pc, #492]	@ (8003980 <HAL_I2C_Mem_Read+0x224>)
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fcb3 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
 80037a2:	e1fb      	b.n	8003b9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_I2C_Mem_Read+0x56>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e1f4      	b.n	8003b9c <HAL_I2C_Mem_Read+0x440>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d007      	beq.n	80037d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2222      	movs	r2, #34	@ 0x22
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2240      	movs	r2, #64	@ 0x40
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003808:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4a5b      	ldr	r2, [pc, #364]	@ (8003984 <HAL_I2C_Mem_Read+0x228>)
 8003818:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800381a:	88f8      	ldrh	r0, [r7, #6]
 800381c:	893a      	ldrh	r2, [r7, #8]
 800381e:	8979      	ldrh	r1, [r7, #10]
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	4603      	mov	r3, r0
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fb80 	bl	8003f30 <I2C_RequestMemoryRead>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e1b0      	b.n	8003b9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383e:	2b00      	cmp	r3, #0
 8003840:	d113      	bne.n	800386a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003842:	2300      	movs	r3, #0
 8003844:	623b      	str	r3, [r7, #32]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	623b      	str	r3, [r7, #32]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	623b      	str	r3, [r7, #32]
 8003856:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e184      	b.n	8003b74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386e:	2b01      	cmp	r3, #1
 8003870:	d11b      	bne.n	80038aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e164      	b.n	8003b74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d11b      	bne.n	80038ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	e144      	b.n	8003b74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003900:	e138      	b.n	8003b74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003906:	2b03      	cmp	r3, #3
 8003908:	f200 80f1 	bhi.w	8003aee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003910:	2b01      	cmp	r3, #1
 8003912:	d123      	bne.n	800395c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003916:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fd49 	bl	80043b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e139      	b.n	8003b9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800395a:	e10b      	b.n	8003b74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003960:	2b02      	cmp	r3, #2
 8003962:	d14e      	bne.n	8003a02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396a:	2200      	movs	r2, #0
 800396c:	4906      	ldr	r1, [pc, #24]	@ (8003988 <HAL_I2C_Mem_Read+0x22c>)
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fbc6 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e10e      	b.n	8003b9c <HAL_I2C_Mem_Read+0x440>
 800397e:	bf00      	nop
 8003980:	00100002 	.word	0x00100002
 8003984:	ffff0000 	.word	0xffff0000
 8003988:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a00:	e0b8      	b.n	8003b74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a08:	2200      	movs	r2, #0
 8003a0a:	4966      	ldr	r1, [pc, #408]	@ (8003ba4 <HAL_I2C_Mem_Read+0x448>)
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fb77 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0bf      	b.n	8003b9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a64:	2200      	movs	r2, #0
 8003a66:	494f      	ldr	r1, [pc, #316]	@ (8003ba4 <HAL_I2C_Mem_Read+0x448>)
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fb49 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e091      	b.n	8003b9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aec:	e042      	b.n	8003b74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fc5c 	bl	80043b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e04c      	b.n	8003b9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d118      	bne.n	8003b74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f47f aec2 	bne.w	8003902 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e000      	b.n	8003b9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
  }
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3728      	adds	r7, #40	@ 0x28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	00010004 	.word	0x00010004

08003ba8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	@ 0x28
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	607a      	str	r2, [r7, #4]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bb8:	f7ff f808 	bl	8002bcc <HAL_GetTick>
 8003bbc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	f040 8111 	bne.w	8003df2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2319      	movs	r3, #25
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	4988      	ldr	r1, [pc, #544]	@ (8003dfc <HAL_I2C_IsDeviceReady+0x254>)
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fa90 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
 8003be8:	e104      	b.n	8003df4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_I2C_IsDeviceReady+0x50>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e0fd      	b.n	8003df4 <HAL_I2C_IsDeviceReady+0x24c>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d007      	beq.n	8003c1e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2224      	movs	r2, #36	@ 0x24
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a70      	ldr	r2, [pc, #448]	@ (8003e00 <HAL_I2C_IsDeviceReady+0x258>)
 8003c40:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c50:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fa4e 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c78:	d103      	bne.n	8003c82 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c80:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0b6      	b.n	8003df4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c86:	897b      	ldrh	r3, [r7, #10]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c94:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c96:	f7fe ff99 	bl	8002bcc <HAL_GetTick>
 8003c9a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	bf0c      	ite	eq
 8003caa:	2301      	moveq	r3, #1
 8003cac:	2300      	movne	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc0:	bf0c      	ite	eq
 8003cc2:	2301      	moveq	r3, #1
 8003cc4:	2300      	movne	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003cca:	e025      	b.n	8003d18 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ccc:	f7fe ff7e 	bl	8002bcc <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d302      	bcc.n	8003ce2 <HAL_I2C_IsDeviceReady+0x13a>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	22a0      	movs	r2, #160	@ 0xa0
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d22:	d005      	beq.n	8003d30 <HAL_I2C_IsDeviceReady+0x188>
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d102      	bne.n	8003d30 <HAL_I2C_IsDeviceReady+0x188>
 8003d2a:	7dbb      	ldrb	r3, [r7, #22]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0cd      	beq.n	8003ccc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d129      	bne.n	8003d9a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d54:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	2319      	movs	r3, #25
 8003d72:	2201      	movs	r2, #1
 8003d74:	4921      	ldr	r1, [pc, #132]	@ (8003dfc <HAL_I2C_IsDeviceReady+0x254>)
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f9c2 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e036      	b.n	8003df4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	e02c      	b.n	8003df4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003db2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	2319      	movs	r3, #25
 8003dba:	2201      	movs	r2, #1
 8003dbc:	490f      	ldr	r1, [pc, #60]	@ (8003dfc <HAL_I2C_IsDeviceReady+0x254>)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f99e 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e012      	b.n	8003df4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	f4ff af32 	bcc.w	8003c42 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	00100002 	.word	0x00100002
 8003e00:	ffff0000 	.word	0xffff0000

08003e04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	4611      	mov	r1, r2
 8003e10:	461a      	mov	r2, r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	817b      	strh	r3, [r7, #10]
 8003e16:	460b      	mov	r3, r1
 8003e18:	813b      	strh	r3, [r7, #8]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f960 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00d      	beq.n	8003e62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e54:	d103      	bne.n	8003e5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e05f      	b.n	8003f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	6a3a      	ldr	r2, [r7, #32]
 8003e76:	492d      	ldr	r1, [pc, #180]	@ (8003f2c <I2C_RequestMemoryWrite+0x128>)
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f998 	bl	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e04c      	b.n	8003f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea0:	6a39      	ldr	r1, [r7, #32]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fa02 	bl	80042ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00d      	beq.n	8003eca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d107      	bne.n	8003ec6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e02b      	b.n	8003f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d105      	bne.n	8003edc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed0:	893b      	ldrh	r3, [r7, #8]
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	611a      	str	r2, [r3, #16]
 8003eda:	e021      	b.n	8003f20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003edc:	893b      	ldrh	r3, [r7, #8]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eec:	6a39      	ldr	r1, [r7, #32]
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f9dc 	bl	80042ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00d      	beq.n	8003f16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d107      	bne.n	8003f12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e005      	b.n	8003f22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f16:	893b      	ldrh	r3, [r7, #8]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	00010002 	.word	0x00010002

08003f30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	4608      	mov	r0, r1
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	817b      	strh	r3, [r7, #10]
 8003f42:	460b      	mov	r3, r1
 8003f44:	813b      	strh	r3, [r7, #8]
 8003f46:	4613      	mov	r3, r2
 8003f48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f8c2 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00d      	beq.n	8003f9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f90:	d103      	bne.n	8003f9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e0aa      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f9e:	897b      	ldrh	r3, [r7, #10]
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	6a3a      	ldr	r2, [r7, #32]
 8003fb2:	4952      	ldr	r1, [pc, #328]	@ (80040fc <I2C_RequestMemoryRead+0x1cc>)
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f8fa 	bl	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e097      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fdc:	6a39      	ldr	r1, [r7, #32]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f964 	bl	80042ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d107      	bne.n	8004002 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004000:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e076      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d105      	bne.n	8004018 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800400c:	893b      	ldrh	r3, [r7, #8]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	611a      	str	r2, [r3, #16]
 8004016:	e021      	b.n	800405c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004018:	893b      	ldrh	r3, [r7, #8]
 800401a:	0a1b      	lsrs	r3, r3, #8
 800401c:	b29b      	uxth	r3, r3
 800401e:	b2da      	uxtb	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004028:	6a39      	ldr	r1, [r7, #32]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f93e 	bl	80042ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00d      	beq.n	8004052 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	2b04      	cmp	r3, #4
 800403c:	d107      	bne.n	800404e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800404c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e050      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004052:	893b      	ldrh	r3, [r7, #8]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800405c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405e:	6a39      	ldr	r1, [r7, #32]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f923 	bl	80042ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00d      	beq.n	8004088 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004070:	2b04      	cmp	r3, #4
 8004072:	d107      	bne.n	8004084 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004082:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e035      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004096:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	2200      	movs	r2, #0
 80040a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f82b 	bl	8004100 <I2C_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00d      	beq.n	80040cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040be:	d103      	bne.n	80040c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e013      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040cc:	897b      	ldrh	r3, [r7, #10]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	6a3a      	ldr	r2, [r7, #32]
 80040e0:	4906      	ldr	r1, [pc, #24]	@ (80040fc <I2C_RequestMemoryRead+0x1cc>)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f863 	bl	80041ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	00010002 	.word	0x00010002

08004100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004110:	e025      	b.n	800415e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d021      	beq.n	800415e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411a:	f7fe fd57 	bl	8002bcc <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d116      	bne.n	800415e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e023      	b.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d10d      	bne.n	8004184 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf0c      	ite	eq
 800417a:	2301      	moveq	r3, #1
 800417c:	2300      	movne	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	e00c      	b.n	800419e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	43da      	mvns	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4013      	ands	r3, r2
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	bf0c      	ite	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	2300      	movne	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d0b6      	beq.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041bc:	e051      	b.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041cc:	d123      	bne.n	8004216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	f043 0204 	orr.w	r2, r3, #4
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e046      	b.n	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d021      	beq.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421e:	f7fe fcd5 	bl	8002bcc <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d116      	bne.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	f043 0220 	orr.w	r2, r3, #32
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e020      	b.n	80042a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	d10c      	bne.n	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	43da      	mvns	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4013      	ands	r3, r2
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf14      	ite	ne
 800427e:	2301      	movne	r3, #1
 8004280:	2300      	moveq	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	e00b      	b.n	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	43da      	mvns	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4013      	ands	r3, r2
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d18d      	bne.n	80041be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042b8:	e02d      	b.n	8004316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f8ce 	bl	800445c <I2C_IsAcknowledgeFailed>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e02d      	b.n	8004326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d021      	beq.n	8004316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d2:	f7fe fc7b 	bl	8002bcc <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d116      	bne.n	8004316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e007      	b.n	8004326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004320:	2b80      	cmp	r3, #128	@ 0x80
 8004322:	d1ca      	bne.n	80042ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800433a:	e02d      	b.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f88d 	bl	800445c <I2C_IsAcknowledgeFailed>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e02d      	b.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004352:	d021      	beq.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004354:	f7fe fc3a 	bl	8002bcc <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	429a      	cmp	r2, r3
 8004362:	d302      	bcc.n	800436a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d116      	bne.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004384:	f043 0220 	orr.w	r2, r3, #32
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e007      	b.n	80043a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d1ca      	bne.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043bc:	e042      	b.n	8004444 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d119      	bne.n	8004400 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0210 	mvn.w	r2, #16
 80043d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e029      	b.n	8004454 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004400:	f7fe fbe4 	bl	8002bcc <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	429a      	cmp	r2, r3
 800440e:	d302      	bcc.n	8004416 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d116      	bne.n	8004444 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e007      	b.n	8004454 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444e:	2b40      	cmp	r3, #64	@ 0x40
 8004450:	d1b5      	bne.n	80043be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800446e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004472:	d11b      	bne.n	80044ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800447c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	f043 0204 	orr.w	r2, r3, #4
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e267      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d075      	beq.n	80045c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044da:	4b88      	ldr	r3, [pc, #544]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d00c      	beq.n	8004500 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e6:	4b85      	ldr	r3, [pc, #532]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d112      	bne.n	8004518 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f2:	4b82      	ldr	r3, [pc, #520]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044fe:	d10b      	bne.n	8004518 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004500:	4b7e      	ldr	r3, [pc, #504]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d05b      	beq.n	80045c4 <HAL_RCC_OscConfig+0x108>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d157      	bne.n	80045c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e242      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004520:	d106      	bne.n	8004530 <HAL_RCC_OscConfig+0x74>
 8004522:	4b76      	ldr	r3, [pc, #472]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a75      	ldr	r2, [pc, #468]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e01d      	b.n	800456c <HAL_RCC_OscConfig+0xb0>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0x98>
 800453a:	4b70      	ldr	r3, [pc, #448]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a6f      	ldr	r2, [pc, #444]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 8004540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	4b6d      	ldr	r3, [pc, #436]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a6c      	ldr	r2, [pc, #432]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e00b      	b.n	800456c <HAL_RCC_OscConfig+0xb0>
 8004554:	4b69      	ldr	r3, [pc, #420]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a68      	ldr	r2, [pc, #416]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 800455a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	4b66      	ldr	r3, [pc, #408]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a65      	ldr	r2, [pc, #404]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 8004566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800456a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d013      	beq.n	800459c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004574:	f7fe fb2a 	bl	8002bcc <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800457c:	f7fe fb26 	bl	8002bcc <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	@ 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e207      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	4b5b      	ldr	r3, [pc, #364]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0xc0>
 800459a:	e014      	b.n	80045c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fe fb16 	bl	8002bcc <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fe fb12 	bl	8002bcc <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	@ 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e1f3      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b6:	4b51      	ldr	r3, [pc, #324]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0xe8>
 80045c2:	e000      	b.n	80045c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d063      	beq.n	800469a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045d2:	4b4a      	ldr	r3, [pc, #296]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045de:	4b47      	ldr	r3, [pc, #284]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d11c      	bne.n	8004624 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ea:	4b44      	ldr	r3, [pc, #272]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d116      	bne.n	8004624 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f6:	4b41      	ldr	r3, [pc, #260]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d005      	beq.n	800460e <HAL_RCC_OscConfig+0x152>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d001      	beq.n	800460e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e1c7      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460e:	4b3b      	ldr	r3, [pc, #236]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4937      	ldr	r1, [pc, #220]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 800461e:	4313      	orrs	r3, r2
 8004620:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004622:	e03a      	b.n	800469a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d020      	beq.n	800466e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800462c:	4b34      	ldr	r3, [pc, #208]	@ (8004700 <HAL_RCC_OscConfig+0x244>)
 800462e:	2201      	movs	r2, #1
 8004630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004632:	f7fe facb 	bl	8002bcc <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800463a:	f7fe fac7 	bl	8002bcc <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e1a8      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464c:	4b2b      	ldr	r3, [pc, #172]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004658:	4b28      	ldr	r3, [pc, #160]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4925      	ldr	r1, [pc, #148]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 8004668:	4313      	orrs	r3, r2
 800466a:	600b      	str	r3, [r1, #0]
 800466c:	e015      	b.n	800469a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800466e:	4b24      	ldr	r3, [pc, #144]	@ (8004700 <HAL_RCC_OscConfig+0x244>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fe faaa 	bl	8002bcc <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800467c:	f7fe faa6 	bl	8002bcc <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e187      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468e:	4b1b      	ldr	r3, [pc, #108]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d036      	beq.n	8004714 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d016      	beq.n	80046dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ae:	4b15      	ldr	r3, [pc, #84]	@ (8004704 <HAL_RCC_OscConfig+0x248>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b4:	f7fe fa8a 	bl	8002bcc <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046bc:	f7fe fa86 	bl	8002bcc <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e167      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ce:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <HAL_RCC_OscConfig+0x240>)
 80046d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCC_OscConfig+0x200>
 80046da:	e01b      	b.n	8004714 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046dc:	4b09      	ldr	r3, [pc, #36]	@ (8004704 <HAL_RCC_OscConfig+0x248>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e2:	f7fe fa73 	bl	8002bcc <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e8:	e00e      	b.n	8004708 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ea:	f7fe fa6f 	bl	8002bcc <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d907      	bls.n	8004708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e150      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
 80046fc:	40023800 	.word	0x40023800
 8004700:	42470000 	.word	0x42470000
 8004704:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004708:	4b88      	ldr	r3, [pc, #544]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 800470a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1ea      	bne.n	80046ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8097 	beq.w	8004850 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004722:	2300      	movs	r3, #0
 8004724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004726:	4b81      	ldr	r3, [pc, #516]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10f      	bne.n	8004752 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	4b7d      	ldr	r3, [pc, #500]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	4a7c      	ldr	r2, [pc, #496]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 800473c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004740:	6413      	str	r3, [r2, #64]	@ 0x40
 8004742:	4b7a      	ldr	r3, [pc, #488]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800474e:	2301      	movs	r3, #1
 8004750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004752:	4b77      	ldr	r3, [pc, #476]	@ (8004930 <HAL_RCC_OscConfig+0x474>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475a:	2b00      	cmp	r3, #0
 800475c:	d118      	bne.n	8004790 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800475e:	4b74      	ldr	r3, [pc, #464]	@ (8004930 <HAL_RCC_OscConfig+0x474>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a73      	ldr	r2, [pc, #460]	@ (8004930 <HAL_RCC_OscConfig+0x474>)
 8004764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800476a:	f7fe fa2f 	bl	8002bcc <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004772:	f7fe fa2b 	bl	8002bcc <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e10c      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004784:	4b6a      	ldr	r3, [pc, #424]	@ (8004930 <HAL_RCC_OscConfig+0x474>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d106      	bne.n	80047a6 <HAL_RCC_OscConfig+0x2ea>
 8004798:	4b64      	ldr	r3, [pc, #400]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479c:	4a63      	ldr	r2, [pc, #396]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a4:	e01c      	b.n	80047e0 <HAL_RCC_OscConfig+0x324>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b05      	cmp	r3, #5
 80047ac:	d10c      	bne.n	80047c8 <HAL_RCC_OscConfig+0x30c>
 80047ae:	4b5f      	ldr	r3, [pc, #380]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b2:	4a5e      	ldr	r2, [pc, #376]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 80047b4:	f043 0304 	orr.w	r3, r3, #4
 80047b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ba:	4b5c      	ldr	r3, [pc, #368]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047be:	4a5b      	ldr	r2, [pc, #364]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c6:	e00b      	b.n	80047e0 <HAL_RCC_OscConfig+0x324>
 80047c8:	4b58      	ldr	r3, [pc, #352]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047cc:	4a57      	ldr	r2, [pc, #348]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 80047ce:	f023 0301 	bic.w	r3, r3, #1
 80047d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d4:	4b55      	ldr	r3, [pc, #340]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d8:	4a54      	ldr	r2, [pc, #336]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 80047da:	f023 0304 	bic.w	r3, r3, #4
 80047de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d015      	beq.n	8004814 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e8:	f7fe f9f0 	bl	8002bcc <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047f0:	f7fe f9ec 	bl	8002bcc <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e0cb      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004806:	4b49      	ldr	r3, [pc, #292]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0ee      	beq.n	80047f0 <HAL_RCC_OscConfig+0x334>
 8004812:	e014      	b.n	800483e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004814:	f7fe f9da 	bl	8002bcc <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481a:	e00a      	b.n	8004832 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800481c:	f7fe f9d6 	bl	8002bcc <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e0b5      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004832:	4b3e      	ldr	r3, [pc, #248]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1ee      	bne.n	800481c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800483e:	7dfb      	ldrb	r3, [r7, #23]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d105      	bne.n	8004850 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004844:	4b39      	ldr	r3, [pc, #228]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 8004846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004848:	4a38      	ldr	r2, [pc, #224]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 800484a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800484e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80a1 	beq.w	800499c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800485a:	4b34      	ldr	r3, [pc, #208]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	2b08      	cmp	r3, #8
 8004864:	d05c      	beq.n	8004920 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d141      	bne.n	80048f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486e:	4b31      	ldr	r3, [pc, #196]	@ (8004934 <HAL_RCC_OscConfig+0x478>)
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004874:	f7fe f9aa 	bl	8002bcc <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800487c:	f7fe f9a6 	bl	8002bcc <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e087      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488e:	4b27      	ldr	r3, [pc, #156]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69da      	ldr	r2, [r3, #28]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	019b      	lsls	r3, r3, #6
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	3b01      	subs	r3, #1
 80048b4:	041b      	lsls	r3, r3, #16
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048bc:	061b      	lsls	r3, r3, #24
 80048be:	491b      	ldr	r1, [pc, #108]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004934 <HAL_RCC_OscConfig+0x478>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ca:	f7fe f97f 	bl	8002bcc <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d2:	f7fe f97b 	bl	8002bcc <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e05c      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e4:	4b11      	ldr	r3, [pc, #68]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x416>
 80048f0:	e054      	b.n	800499c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f2:	4b10      	ldr	r3, [pc, #64]	@ (8004934 <HAL_RCC_OscConfig+0x478>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f8:	f7fe f968 	bl	8002bcc <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004900:	f7fe f964 	bl	8002bcc <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e045      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004912:	4b06      	ldr	r3, [pc, #24]	@ (800492c <HAL_RCC_OscConfig+0x470>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f0      	bne.n	8004900 <HAL_RCC_OscConfig+0x444>
 800491e:	e03d      	b.n	800499c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d107      	bne.n	8004938 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e038      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
 800492c:	40023800 	.word	0x40023800
 8004930:	40007000 	.word	0x40007000
 8004934:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004938:	4b1b      	ldr	r3, [pc, #108]	@ (80049a8 <HAL_RCC_OscConfig+0x4ec>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d028      	beq.n	8004998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004950:	429a      	cmp	r2, r3
 8004952:	d121      	bne.n	8004998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d11a      	bne.n	8004998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004968:	4013      	ands	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800496e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004970:	4293      	cmp	r3, r2
 8004972:	d111      	bne.n	8004998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497e:	085b      	lsrs	r3, r3, #1
 8004980:	3b01      	subs	r3, #1
 8004982:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004984:	429a      	cmp	r2, r3
 8004986:	d107      	bne.n	8004998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004992:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d001      	beq.n	800499c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800

080049ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0cc      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049c0:	4b68      	ldr	r3, [pc, #416]	@ (8004b64 <HAL_RCC_ClockConfig+0x1b8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d90c      	bls.n	80049e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b65      	ldr	r3, [pc, #404]	@ (8004b64 <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d6:	4b63      	ldr	r3, [pc, #396]	@ (8004b64 <HAL_RCC_ClockConfig+0x1b8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0b8      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d020      	beq.n	8004a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a00:	4b59      	ldr	r3, [pc, #356]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4a58      	ldr	r2, [pc, #352]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a18:	4b53      	ldr	r3, [pc, #332]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a52      	ldr	r2, [pc, #328]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a24:	4b50      	ldr	r3, [pc, #320]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	494d      	ldr	r1, [pc, #308]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d044      	beq.n	8004acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d107      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4a:	4b47      	ldr	r3, [pc, #284]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d119      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e07f      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d003      	beq.n	8004a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d107      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e06f      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e067      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a8a:	4b37      	ldr	r3, [pc, #220]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f023 0203 	bic.w	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4934      	ldr	r1, [pc, #208]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a9c:	f7fe f896 	bl	8002bcc <HAL_GetTick>
 8004aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa2:	e00a      	b.n	8004aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa4:	f7fe f892 	bl	8002bcc <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e04f      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	4b2b      	ldr	r3, [pc, #172]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 020c 	and.w	r2, r3, #12
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d1eb      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004acc:	4b25      	ldr	r3, [pc, #148]	@ (8004b64 <HAL_RCC_ClockConfig+0x1b8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d20c      	bcs.n	8004af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b22      	ldr	r3, [pc, #136]	@ (8004b64 <HAL_RCC_ClockConfig+0x1b8>)
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae2:	4b20      	ldr	r3, [pc, #128]	@ (8004b64 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e032      	b.n	8004b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b00:	4b19      	ldr	r3, [pc, #100]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4916      	ldr	r1, [pc, #88]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b1e:	4b12      	ldr	r3, [pc, #72]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	490e      	ldr	r1, [pc, #56]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b32:	f000 f821 	bl	8004b78 <HAL_RCC_GetSysClockFreq>
 8004b36:	4602      	mov	r2, r0
 8004b38:	4b0b      	ldr	r3, [pc, #44]	@ (8004b68 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	490a      	ldr	r1, [pc, #40]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c0>)
 8004b44:	5ccb      	ldrb	r3, [r1, r3]
 8004b46:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4a:	4a09      	ldr	r2, [pc, #36]	@ (8004b70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b4e:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <HAL_RCC_ClockConfig+0x1c8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fff6 	bl	8002b44 <HAL_InitTick>

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40023c00 	.word	0x40023c00
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	0800af34 	.word	0x0800af34
 8004b70:	2000001c 	.word	0x2000001c
 8004b74:	20000020 	.word	0x20000020

08004b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b7c:	b094      	sub	sp, #80	@ 0x50
 8004b7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b84:	2300      	movs	r3, #0
 8004b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b88:	2300      	movs	r3, #0
 8004b8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b90:	4b79      	ldr	r3, [pc, #484]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 030c 	and.w	r3, r3, #12
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d00d      	beq.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x40>
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	f200 80e1 	bhi.w	8004d64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x34>
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d003      	beq.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004baa:	e0db      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bac:	4b73      	ldr	r3, [pc, #460]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x204>)
 8004bae:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004bb0:	e0db      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bb2:	4b73      	ldr	r3, [pc, #460]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bb6:	e0d8      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb8:	4b6f      	ldr	r3, [pc, #444]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d063      	beq.n	8004c96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bce:	4b6a      	ldr	r3, [pc, #424]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	099b      	lsrs	r3, r3, #6
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004be2:	2300      	movs	r3, #0
 8004be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bea:	4622      	mov	r2, r4
 8004bec:	462b      	mov	r3, r5
 8004bee:	f04f 0000 	mov.w	r0, #0
 8004bf2:	f04f 0100 	mov.w	r1, #0
 8004bf6:	0159      	lsls	r1, r3, #5
 8004bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bfc:	0150      	lsls	r0, r2, #5
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4621      	mov	r1, r4
 8004c04:	1a51      	subs	r1, r2, r1
 8004c06:	6139      	str	r1, [r7, #16]
 8004c08:	4629      	mov	r1, r5
 8004c0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	018b      	lsls	r3, r1, #6
 8004c20:	4651      	mov	r1, sl
 8004c22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c26:	4651      	mov	r1, sl
 8004c28:	018a      	lsls	r2, r1, #6
 8004c2a:	4651      	mov	r1, sl
 8004c2c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c30:	4659      	mov	r1, fp
 8004c32:	eb63 0901 	sbc.w	r9, r3, r1
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c4a:	4690      	mov	r8, r2
 8004c4c:	4699      	mov	r9, r3
 8004c4e:	4623      	mov	r3, r4
 8004c50:	eb18 0303 	adds.w	r3, r8, r3
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	462b      	mov	r3, r5
 8004c58:	eb49 0303 	adc.w	r3, r9, r3
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	024b      	lsls	r3, r1, #9
 8004c6e:	4621      	mov	r1, r4
 8004c70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c74:	4621      	mov	r1, r4
 8004c76:	024a      	lsls	r2, r1, #9
 8004c78:	4610      	mov	r0, r2
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c7e:	2200      	movs	r2, #0
 8004c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c88:	f7fb faf2 	bl	8000270 <__aeabi_uldivmod>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4613      	mov	r3, r2
 8004c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c94:	e058      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c96:	4b38      	ldr	r3, [pc, #224]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	099b      	lsrs	r3, r3, #6
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ca6:	623b      	str	r3, [r7, #32]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	f04f 0000 	mov.w	r0, #0
 8004cb8:	f04f 0100 	mov.w	r1, #0
 8004cbc:	0159      	lsls	r1, r3, #5
 8004cbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cc2:	0150      	lsls	r0, r2, #5
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4641      	mov	r1, r8
 8004cca:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cce:	4649      	mov	r1, r9
 8004cd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ce0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ce4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ce8:	ebb2 040a 	subs.w	r4, r2, sl
 8004cec:	eb63 050b 	sbc.w	r5, r3, fp
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	00eb      	lsls	r3, r5, #3
 8004cfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cfe:	00e2      	lsls	r2, r4, #3
 8004d00:	4614      	mov	r4, r2
 8004d02:	461d      	mov	r5, r3
 8004d04:	4643      	mov	r3, r8
 8004d06:	18e3      	adds	r3, r4, r3
 8004d08:	603b      	str	r3, [r7, #0]
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	eb45 0303 	adc.w	r3, r5, r3
 8004d10:	607b      	str	r3, [r7, #4]
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d1e:	4629      	mov	r1, r5
 8004d20:	028b      	lsls	r3, r1, #10
 8004d22:	4621      	mov	r1, r4
 8004d24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d28:	4621      	mov	r1, r4
 8004d2a:	028a      	lsls	r2, r1, #10
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d32:	2200      	movs	r2, #0
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	61fa      	str	r2, [r7, #28]
 8004d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d3c:	f7fb fa98 	bl	8000270 <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4613      	mov	r3, r2
 8004d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d48:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	3301      	adds	r3, #1
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004d58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d62:	e002      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d64:	4b05      	ldr	r3, [pc, #20]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3750      	adds	r7, #80	@ 0x50
 8004d70:	46bd      	mov	sp, r7
 8004d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d76:	bf00      	nop
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	00f42400 	.word	0x00f42400
 8004d80:	007a1200 	.word	0x007a1200

08004d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d88:	4b03      	ldr	r3, [pc, #12]	@ (8004d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	2000001c 	.word	0x2000001c

08004d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004da0:	f7ff fff0 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4b05      	ldr	r3, [pc, #20]	@ (8004dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	0a9b      	lsrs	r3, r3, #10
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	4903      	ldr	r1, [pc, #12]	@ (8004dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db2:	5ccb      	ldrb	r3, [r1, r3]
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	0800af44 	.word	0x0800af44

08004dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dc8:	f7ff ffdc 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	0b5b      	lsrs	r3, r3, #13
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	4903      	ldr	r1, [pc, #12]	@ (8004de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dda:	5ccb      	ldrb	r3, [r1, r3]
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40023800 	.word	0x40023800
 8004de8:	0800af44 	.word	0x0800af44

08004dec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e07b      	b.n	8004ef6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d108      	bne.n	8004e18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e0e:	d009      	beq.n	8004e24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	61da      	str	r2, [r3, #28]
 8004e16:	e005      	b.n	8004e24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fd fb54 	bl	80024ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ea8:	ea42 0103 	orr.w	r1, r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	0c1b      	lsrs	r3, r3, #16
 8004ec2:	f003 0104 	and.w	r1, r3, #4
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	f003 0210 	and.w	r2, r3, #16
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ee4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b088      	sub	sp, #32
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_SPI_Transmit+0x22>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e126      	b.n	800516e <HAL_SPI_Transmit+0x270>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f28:	f7fd fe50 	bl	8002bcc <HAL_GetTick>
 8004f2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d002      	beq.n	8004f44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f42:	e10b      	b.n	800515c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_SPI_Transmit+0x52>
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f54:	e102      	b.n	800515c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2203      	movs	r2, #3
 8004f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	88fa      	ldrh	r2, [r7, #6]
 8004f6e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	88fa      	ldrh	r2, [r7, #6]
 8004f74:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f9c:	d10f      	bne.n	8004fbe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc8:	2b40      	cmp	r3, #64	@ 0x40
 8004fca:	d007      	beq.n	8004fdc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fe4:	d14b      	bne.n	800507e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <HAL_SPI_Transmit+0xf6>
 8004fee:	8afb      	ldrh	r3, [r7, #22]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d13e      	bne.n	8005072 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff8:	881a      	ldrh	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005004:	1c9a      	adds	r2, r3, #2
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005018:	e02b      	b.n	8005072 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b02      	cmp	r3, #2
 8005026:	d112      	bne.n	800504e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502c:	881a      	ldrh	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005038:	1c9a      	adds	r2, r3, #2
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800504c:	e011      	b.n	8005072 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800504e:	f7fd fdbd 	bl	8002bcc <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d803      	bhi.n	8005066 <HAL_SPI_Transmit+0x168>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d102      	bne.n	800506c <HAL_SPI_Transmit+0x16e>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d102      	bne.n	8005072 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005070:	e074      	b.n	800515c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005076:	b29b      	uxth	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1ce      	bne.n	800501a <HAL_SPI_Transmit+0x11c>
 800507c:	e04c      	b.n	8005118 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_SPI_Transmit+0x18e>
 8005086:	8afb      	ldrh	r3, [r7, #22]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d140      	bne.n	800510e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	330c      	adds	r3, #12
 8005096:	7812      	ldrb	r2, [r2, #0]
 8005098:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80050b2:	e02c      	b.n	800510e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d113      	bne.n	80050ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	330c      	adds	r3, #12
 80050cc:	7812      	ldrb	r2, [r2, #0]
 80050ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050e8:	e011      	b.n	800510e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ea:	f7fd fd6f 	bl	8002bcc <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d803      	bhi.n	8005102 <HAL_SPI_Transmit+0x204>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d102      	bne.n	8005108 <HAL_SPI_Transmit+0x20a>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d102      	bne.n	800510e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800510c:	e026      	b.n	800515c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1cd      	bne.n	80050b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	6839      	ldr	r1, [r7, #0]
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 fbcb 	bl	80058b8 <SPI_EndRxTxTransaction>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	77fb      	strb	r3, [r7, #31]
 8005158:	e000      	b.n	800515c <HAL_SPI_Transmit+0x25e>
  }

error:
 800515a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800516c:	7ffb      	ldrb	r3, [r7, #31]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b088      	sub	sp, #32
 800517a:	af02      	add	r7, sp, #8
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	603b      	str	r3, [r7, #0]
 8005182:	4613      	mov	r3, r2
 8005184:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005192:	d112      	bne.n	80051ba <HAL_SPI_Receive+0x44>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10e      	bne.n	80051ba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2204      	movs	r2, #4
 80051a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80051a4:	88fa      	ldrh	r2, [r7, #6]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	4613      	mov	r3, r2
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f8f1 	bl	8005398 <HAL_SPI_TransmitReceive>
 80051b6:	4603      	mov	r3, r0
 80051b8:	e0ea      	b.n	8005390 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_SPI_Receive+0x52>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e0e3      	b.n	8005390 <HAL_SPI_Receive+0x21a>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051d0:	f7fd fcfc 	bl	8002bcc <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d002      	beq.n	80051e8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
 80051e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051e6:	e0ca      	b.n	800537e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_SPI_Receive+0x7e>
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051f8:	e0c1      	b.n	800537e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2204      	movs	r2, #4
 80051fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	88fa      	ldrh	r2, [r7, #6]
 8005212:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	88fa      	ldrh	r2, [r7, #6]
 8005218:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005240:	d10f      	bne.n	8005262 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005250:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005260:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526c:	2b40      	cmp	r3, #64	@ 0x40
 800526e:	d007      	beq.n	8005280 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800527e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d162      	bne.n	800534e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005288:	e02e      	b.n	80052e8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d115      	bne.n	80052c4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f103 020c 	add.w	r2, r3, #12
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a4:	7812      	ldrb	r2, [r2, #0]
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052c2:	e011      	b.n	80052e8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052c4:	f7fd fc82 	bl	8002bcc <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d803      	bhi.n	80052dc <HAL_SPI_Receive+0x166>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052da:	d102      	bne.n	80052e2 <HAL_SPI_Receive+0x16c>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d102      	bne.n	80052e8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80052e6:	e04a      	b.n	800537e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1cb      	bne.n	800528a <HAL_SPI_Receive+0x114>
 80052f2:	e031      	b.n	8005358 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d113      	bne.n	800532a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530c:	b292      	uxth	r2, r2
 800530e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005314:	1c9a      	adds	r2, r3, #2
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005328:	e011      	b.n	800534e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800532a:	f7fd fc4f 	bl	8002bcc <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d803      	bhi.n	8005342 <HAL_SPI_Receive+0x1cc>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d102      	bne.n	8005348 <HAL_SPI_Receive+0x1d2>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d102      	bne.n	800534e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800534c:	e017      	b.n	800537e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1cd      	bne.n	80052f4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fa45 	bl	80057ec <SPI_EndRxTransaction>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	75fb      	strb	r3, [r7, #23]
 800537a:	e000      	b.n	800537e <HAL_SPI_Receive+0x208>
  }

error :
 800537c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800538e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08c      	sub	sp, #48	@ 0x30
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80053a6:	2301      	movs	r3, #1
 80053a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_SPI_TransmitReceive+0x26>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e18a      	b.n	80056d4 <HAL_SPI_TransmitReceive+0x33c>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053c6:	f7fd fc01 	bl	8002bcc <HAL_GetTick>
 80053ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80053dc:	887b      	ldrh	r3, [r7, #2]
 80053de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d00f      	beq.n	8005408 <HAL_SPI_TransmitReceive+0x70>
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053ee:	d107      	bne.n	8005400 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <HAL_SPI_TransmitReceive+0x68>
 80053f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d003      	beq.n	8005408 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005400:	2302      	movs	r3, #2
 8005402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005406:	e15b      	b.n	80056c0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_SPI_TransmitReceive+0x82>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <HAL_SPI_TransmitReceive+0x82>
 8005414:	887b      	ldrh	r3, [r7, #2]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d103      	bne.n	8005422 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005420:	e14e      	b.n	80056c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b04      	cmp	r3, #4
 800542c:	d003      	beq.n	8005436 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2205      	movs	r2, #5
 8005432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	887a      	ldrh	r2, [r7, #2]
 8005446:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	887a      	ldrh	r2, [r7, #2]
 800544c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	887a      	ldrh	r2, [r7, #2]
 8005458:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	887a      	ldrh	r2, [r7, #2]
 800545e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005476:	2b40      	cmp	r3, #64	@ 0x40
 8005478:	d007      	beq.n	800548a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005488:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005492:	d178      	bne.n	8005586 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_SPI_TransmitReceive+0x10a>
 800549c:	8b7b      	ldrh	r3, [r7, #26]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d166      	bne.n	8005570 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a6:	881a      	ldrh	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b2:	1c9a      	adds	r2, r3, #2
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c6:	e053      	b.n	8005570 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d11b      	bne.n	800550e <HAL_SPI_TransmitReceive+0x176>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d016      	beq.n	800550e <HAL_SPI_TransmitReceive+0x176>
 80054e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d113      	bne.n	800550e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ea:	881a      	ldrh	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f6:	1c9a      	adds	r2, r3, #2
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005500:	b29b      	uxth	r3, r3
 8005502:	3b01      	subs	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b01      	cmp	r3, #1
 800551a:	d119      	bne.n	8005550 <HAL_SPI_TransmitReceive+0x1b8>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d014      	beq.n	8005550 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005530:	b292      	uxth	r2, r2
 8005532:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005538:	1c9a      	adds	r2, r3, #2
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800554c:	2301      	movs	r3, #1
 800554e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005550:	f7fd fb3c 	bl	8002bcc <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800555c:	429a      	cmp	r2, r3
 800555e:	d807      	bhi.n	8005570 <HAL_SPI_TransmitReceive+0x1d8>
 8005560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005566:	d003      	beq.n	8005570 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800556e:	e0a7      	b.n	80056c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1a6      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x130>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1a1      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x130>
 8005584:	e07c      	b.n	8005680 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_SPI_TransmitReceive+0x1fc>
 800558e:	8b7b      	ldrh	r3, [r7, #26]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d16b      	bne.n	800566c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	7812      	ldrb	r2, [r2, #0]
 80055a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055ba:	e057      	b.n	800566c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d11c      	bne.n	8005604 <HAL_SPI_TransmitReceive+0x26c>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d017      	beq.n	8005604 <HAL_SPI_TransmitReceive+0x26c>
 80055d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d114      	bne.n	8005604 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	7812      	ldrb	r2, [r2, #0]
 80055e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b01      	cmp	r3, #1
 8005610:	d119      	bne.n	8005646 <HAL_SPI_TransmitReceive+0x2ae>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d014      	beq.n	8005646 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005642:	2301      	movs	r3, #1
 8005644:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005646:	f7fd fac1 	bl	8002bcc <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005652:	429a      	cmp	r2, r3
 8005654:	d803      	bhi.n	800565e <HAL_SPI_TransmitReceive+0x2c6>
 8005656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565c:	d102      	bne.n	8005664 <HAL_SPI_TransmitReceive+0x2cc>
 800565e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005660:	2b00      	cmp	r3, #0
 8005662:	d103      	bne.n	800566c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800566a:	e029      	b.n	80056c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1a2      	bne.n	80055bc <HAL_SPI_TransmitReceive+0x224>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d19d      	bne.n	80055bc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005682:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f917 	bl	80058b8 <SPI_EndRxTxTransaction>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d006      	beq.n	800569e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2220      	movs	r2, #32
 800569a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800569c:	e010      	b.n	80056c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	e000      	b.n	80056c0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80056be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80056d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3730      	adds	r7, #48	@ 0x30
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	4613      	mov	r3, r2
 80056ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056ec:	f7fd fa6e 	bl	8002bcc <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	4413      	add	r3, r2
 80056fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056fc:	f7fd fa66 	bl	8002bcc <HAL_GetTick>
 8005700:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005702:	4b39      	ldr	r3, [pc, #228]	@ (80057e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	015b      	lsls	r3, r3, #5
 8005708:	0d1b      	lsrs	r3, r3, #20
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	fb02 f303 	mul.w	r3, r2, r3
 8005710:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005712:	e054      	b.n	80057be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d050      	beq.n	80057be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800571c:	f7fd fa56 	bl	8002bcc <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	429a      	cmp	r2, r3
 800572a:	d902      	bls.n	8005732 <SPI_WaitFlagStateUntilTimeout+0x56>
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d13d      	bne.n	80057ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800574a:	d111      	bne.n	8005770 <SPI_WaitFlagStateUntilTimeout+0x94>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005754:	d004      	beq.n	8005760 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800575e:	d107      	bne.n	8005770 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800576e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005778:	d10f      	bne.n	800579a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e017      	b.n	80057de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4013      	ands	r3, r2
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	bf0c      	ite	eq
 80057ce:	2301      	moveq	r3, #1
 80057d0:	2300      	movne	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d19b      	bne.n	8005714 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	2000001c 	.word	0x2000001c

080057ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005800:	d111      	bne.n	8005826 <SPI_EndRxTransaction+0x3a>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800580a:	d004      	beq.n	8005816 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005814:	d107      	bne.n	8005826 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005824:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800582e:	d12a      	bne.n	8005886 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005838:	d012      	beq.n	8005860 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2200      	movs	r2, #0
 8005842:	2180      	movs	r1, #128	@ 0x80
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7ff ff49 	bl	80056dc <SPI_WaitFlagStateUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d02d      	beq.n	80058ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005854:	f043 0220 	orr.w	r2, r3, #32
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e026      	b.n	80058ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2200      	movs	r2, #0
 8005868:	2101      	movs	r1, #1
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f7ff ff36 	bl	80056dc <SPI_WaitFlagStateUntilTimeout>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01a      	beq.n	80058ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587a:	f043 0220 	orr.w	r2, r3, #32
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e013      	b.n	80058ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2200      	movs	r2, #0
 800588e:	2101      	movs	r1, #1
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f7ff ff23 	bl	80056dc <SPI_WaitFlagStateUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e000      	b.n	80058ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005934 <SPI_EndRxTxTransaction+0x7c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005938 <SPI_EndRxTxTransaction+0x80>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	0d5b      	lsrs	r3, r3, #21
 80058d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
 80058d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058e2:	d112      	bne.n	800590a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2200      	movs	r2, #0
 80058ec:	2180      	movs	r1, #128	@ 0x80
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f7ff fef4 	bl	80056dc <SPI_WaitFlagStateUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d016      	beq.n	8005928 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fe:	f043 0220 	orr.w	r2, r3, #32
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e00f      	b.n	800592a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	3b01      	subs	r3, #1
 8005914:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005920:	2b80      	cmp	r3, #128	@ 0x80
 8005922:	d0f2      	beq.n	800590a <SPI_EndRxTxTransaction+0x52>
 8005924:	e000      	b.n	8005928 <SPI_EndRxTxTransaction+0x70>
        break;
 8005926:	bf00      	nop
  }

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	2000001c 	.word	0x2000001c
 8005938:	165e9f81 	.word	0x165e9f81

0800593c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e034      	b.n	80059bc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f7fb f802 	bl	8000970 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3308      	adds	r3, #8
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f001 fd1a 	bl	80073b0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	461a      	mov	r2, r3
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	f001 fd64 	bl	8007454 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6858      	ldr	r0, [r3, #4]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	f001 fd99 	bl	80074d0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	6892      	ldr	r2, [r2, #8]
 80059a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	6892      	ldr	r2, [r2, #8]
 80059b2:	f041 0101 	orr.w	r1, r1, #1
 80059b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e041      	b.n	8005a5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fc fec6 	bl	800277c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3304      	adds	r3, #4
 8005a00:	4619      	mov	r1, r3
 8005a02:	4610      	mov	r0, r2
 8005a04:	f000 fa96 	bl	8005f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d001      	beq.n	8005a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e04e      	b.n	8005b1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a23      	ldr	r2, [pc, #140]	@ (8005b28 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d022      	beq.n	8005ae4 <HAL_TIM_Base_Start_IT+0x80>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa6:	d01d      	beq.n	8005ae4 <HAL_TIM_Base_Start_IT+0x80>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1f      	ldr	r2, [pc, #124]	@ (8005b2c <HAL_TIM_Base_Start_IT+0xc8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d018      	beq.n	8005ae4 <HAL_TIM_Base_Start_IT+0x80>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8005b30 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d013      	beq.n	8005ae4 <HAL_TIM_Base_Start_IT+0x80>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b34 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00e      	beq.n	8005ae4 <HAL_TIM_Base_Start_IT+0x80>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1b      	ldr	r2, [pc, #108]	@ (8005b38 <HAL_TIM_Base_Start_IT+0xd4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d009      	beq.n	8005ae4 <HAL_TIM_Base_Start_IT+0x80>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a19      	ldr	r2, [pc, #100]	@ (8005b3c <HAL_TIM_Base_Start_IT+0xd8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d004      	beq.n	8005ae4 <HAL_TIM_Base_Start_IT+0x80>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a18      	ldr	r2, [pc, #96]	@ (8005b40 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d111      	bne.n	8005b08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b06      	cmp	r3, #6
 8005af4:	d010      	beq.n	8005b18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0201 	orr.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b06:	e007      	b.n	8005b18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40010400 	.word	0x40010400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	40001800 	.word	0x40001800

08005b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d122      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d11b      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0202 	mvn.w	r2, #2
 8005b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f9b5 	bl	8005ef6 <HAL_TIM_IC_CaptureCallback>
 8005b8c:	e005      	b.n	8005b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9a7 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f9b8 	bl	8005f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d122      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d11b      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0204 	mvn.w	r2, #4
 8005bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f98b 	bl	8005ef6 <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f97d 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f98e 	bl	8005f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d122      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d11b      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0208 	mvn.w	r2, #8
 8005c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f961 	bl	8005ef6 <HAL_TIM_IC_CaptureCallback>
 8005c34:	e005      	b.n	8005c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f953 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f964 	bl	8005f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0310 	and.w	r3, r3, #16
 8005c52:	2b10      	cmp	r3, #16
 8005c54:	d122      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d11b      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0210 	mvn.w	r2, #16
 8005c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2208      	movs	r2, #8
 8005c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f937 	bl	8005ef6 <HAL_TIM_IC_CaptureCallback>
 8005c88:	e005      	b.n	8005c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f929 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f93a 	bl	8005f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d10e      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d107      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0201 	mvn.w	r2, #1
 8005cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fc fb96 	bl	80023f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd2:	2b80      	cmp	r3, #128	@ 0x80
 8005cd4:	d10e      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce0:	2b80      	cmp	r3, #128	@ 0x80
 8005ce2:	d107      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fae0 	bl	80062b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfe:	2b40      	cmp	r3, #64	@ 0x40
 8005d00:	d10e      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0c:	2b40      	cmp	r3, #64	@ 0x40
 8005d0e:	d107      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f8ff 	bl	8005f1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d10e      	bne.n	8005d4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d107      	bne.n	8005d4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0220 	mvn.w	r2, #32
 8005d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 faaa 	bl	80062a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_TIM_ConfigClockSource+0x1c>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e0b4      	b.n	8005eda <HAL_TIM_ConfigClockSource+0x186>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005da8:	d03e      	beq.n	8005e28 <HAL_TIM_ConfigClockSource+0xd4>
 8005daa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dae:	f200 8087 	bhi.w	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005db6:	f000 8086 	beq.w	8005ec6 <HAL_TIM_ConfigClockSource+0x172>
 8005dba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dbe:	d87f      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc0:	2b70      	cmp	r3, #112	@ 0x70
 8005dc2:	d01a      	beq.n	8005dfa <HAL_TIM_ConfigClockSource+0xa6>
 8005dc4:	2b70      	cmp	r3, #112	@ 0x70
 8005dc6:	d87b      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc8:	2b60      	cmp	r3, #96	@ 0x60
 8005dca:	d050      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x11a>
 8005dcc:	2b60      	cmp	r3, #96	@ 0x60
 8005dce:	d877      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd0:	2b50      	cmp	r3, #80	@ 0x50
 8005dd2:	d03c      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0xfa>
 8005dd4:	2b50      	cmp	r3, #80	@ 0x50
 8005dd6:	d873      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd8:	2b40      	cmp	r3, #64	@ 0x40
 8005dda:	d058      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x13a>
 8005ddc:	2b40      	cmp	r3, #64	@ 0x40
 8005dde:	d86f      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005de0:	2b30      	cmp	r3, #48	@ 0x30
 8005de2:	d064      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x15a>
 8005de4:	2b30      	cmp	r3, #48	@ 0x30
 8005de6:	d86b      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	d060      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x15a>
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d867      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d05c      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x15a>
 8005df4:	2b10      	cmp	r3, #16
 8005df6:	d05a      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x15a>
 8005df8:	e062      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	6899      	ldr	r1, [r3, #8]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f000 f9ad 	bl	8006168 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	609a      	str	r2, [r3, #8]
      break;
 8005e26:	e04f      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	6899      	ldr	r1, [r3, #8]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f000 f996 	bl	8006168 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e4a:	609a      	str	r2, [r3, #8]
      break;
 8005e4c:	e03c      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6859      	ldr	r1, [r3, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f000 f90a 	bl	8006074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2150      	movs	r1, #80	@ 0x50
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 f963 	bl	8006132 <TIM_ITRx_SetConfig>
      break;
 8005e6c:	e02c      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6859      	ldr	r1, [r3, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f000 f929 	bl	80060d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2160      	movs	r1, #96	@ 0x60
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 f953 	bl	8006132 <TIM_ITRx_SetConfig>
      break;
 8005e8c:	e01c      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6859      	ldr	r1, [r3, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f000 f8ea 	bl	8006074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2140      	movs	r1, #64	@ 0x40
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 f943 	bl	8006132 <TIM_ITRx_SetConfig>
      break;
 8005eac:	e00c      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4610      	mov	r0, r2
 8005eba:	f000 f93a 	bl	8006132 <TIM_ITRx_SetConfig>
      break;
 8005ebe:	e003      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ec4:	e000      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ec6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
	...

08005f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a40      	ldr	r2, [pc, #256]	@ (8006048 <TIM_Base_SetConfig+0x114>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d013      	beq.n	8005f74 <TIM_Base_SetConfig+0x40>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f52:	d00f      	beq.n	8005f74 <TIM_Base_SetConfig+0x40>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a3d      	ldr	r2, [pc, #244]	@ (800604c <TIM_Base_SetConfig+0x118>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00b      	beq.n	8005f74 <TIM_Base_SetConfig+0x40>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a3c      	ldr	r2, [pc, #240]	@ (8006050 <TIM_Base_SetConfig+0x11c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d007      	beq.n	8005f74 <TIM_Base_SetConfig+0x40>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a3b      	ldr	r2, [pc, #236]	@ (8006054 <TIM_Base_SetConfig+0x120>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d003      	beq.n	8005f74 <TIM_Base_SetConfig+0x40>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a3a      	ldr	r2, [pc, #232]	@ (8006058 <TIM_Base_SetConfig+0x124>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d108      	bne.n	8005f86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a2f      	ldr	r2, [pc, #188]	@ (8006048 <TIM_Base_SetConfig+0x114>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d02b      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f94:	d027      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a2c      	ldr	r2, [pc, #176]	@ (800604c <TIM_Base_SetConfig+0x118>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d023      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8006050 <TIM_Base_SetConfig+0x11c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01f      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8006054 <TIM_Base_SetConfig+0x120>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d01b      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a29      	ldr	r2, [pc, #164]	@ (8006058 <TIM_Base_SetConfig+0x124>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d017      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a28      	ldr	r2, [pc, #160]	@ (800605c <TIM_Base_SetConfig+0x128>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d013      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a27      	ldr	r2, [pc, #156]	@ (8006060 <TIM_Base_SetConfig+0x12c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00f      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a26      	ldr	r2, [pc, #152]	@ (8006064 <TIM_Base_SetConfig+0x130>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00b      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a25      	ldr	r2, [pc, #148]	@ (8006068 <TIM_Base_SetConfig+0x134>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d007      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a24      	ldr	r2, [pc, #144]	@ (800606c <TIM_Base_SetConfig+0x138>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a23      	ldr	r2, [pc, #140]	@ (8006070 <TIM_Base_SetConfig+0x13c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d108      	bne.n	8005ff8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a0a      	ldr	r2, [pc, #40]	@ (8006048 <TIM_Base_SetConfig+0x114>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <TIM_Base_SetConfig+0xf8>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a0c      	ldr	r2, [pc, #48]	@ (8006058 <TIM_Base_SetConfig+0x124>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d103      	bne.n	8006034 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	615a      	str	r2, [r3, #20]
}
 800603a:	bf00      	nop
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40010000 	.word	0x40010000
 800604c:	40000400 	.word	0x40000400
 8006050:	40000800 	.word	0x40000800
 8006054:	40000c00 	.word	0x40000c00
 8006058:	40010400 	.word	0x40010400
 800605c:	40014000 	.word	0x40014000
 8006060:	40014400 	.word	0x40014400
 8006064:	40014800 	.word	0x40014800
 8006068:	40001800 	.word	0x40001800
 800606c:	40001c00 	.word	0x40001c00
 8006070:	40002000 	.word	0x40002000

08006074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	f023 0201 	bic.w	r2, r3, #1
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800609e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f023 030a 	bic.w	r3, r3, #10
 80060b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b087      	sub	sp, #28
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0210 	bic.w	r2, r3, #16
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	031b      	lsls	r3, r3, #12
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800610e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	621a      	str	r2, [r3, #32]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006132:	b480      	push	{r7}
 8006134:	b085      	sub	sp, #20
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	f043 0307 	orr.w	r3, r3, #7
 8006154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	609a      	str	r2, [r3, #8]
}
 800615c:	bf00      	nop
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	021a      	lsls	r2, r3, #8
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	431a      	orrs	r2, r3
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4313      	orrs	r3, r2
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	4313      	orrs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	609a      	str	r2, [r3, #8]
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061bc:	2302      	movs	r3, #2
 80061be:	e05a      	b.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a21      	ldr	r2, [pc, #132]	@ (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d022      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800620c:	d01d      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1d      	ldr	r2, [pc, #116]	@ (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d018      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1b      	ldr	r2, [pc, #108]	@ (800628c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d013      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1a      	ldr	r2, [pc, #104]	@ (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00e      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a18      	ldr	r2, [pc, #96]	@ (8006294 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d009      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a17      	ldr	r2, [pc, #92]	@ (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d004      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a15      	ldr	r2, [pc, #84]	@ (800629c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d10c      	bne.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	4313      	orrs	r3, r2
 800625a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40010000 	.word	0x40010000
 8006288:	40000400 	.word	0x40000400
 800628c:	40000800 	.word	0x40000800
 8006290:	40000c00 	.word	0x40000c00
 8006294:	40010400 	.word	0x40010400
 8006298:	40014000 	.word	0x40014000
 800629c:	40001800 	.word	0x40001800

080062a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e03f      	b.n	800635a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fc fb4e 	bl	8002990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2224      	movs	r2, #36	@ 0x24
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800630a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fddb 	bl	8006ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695a      	ldr	r2, [r3, #20]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2220      	movs	r2, #32
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b08a      	sub	sp, #40	@ 0x28
 8006366:	af02      	add	r7, sp, #8
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	603b      	str	r3, [r7, #0]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b20      	cmp	r3, #32
 8006380:	d17c      	bne.n	800647c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <HAL_UART_Transmit+0x2c>
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e075      	b.n	800647e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_UART_Transmit+0x3e>
 800639c:	2302      	movs	r3, #2
 800639e:	e06e      	b.n	800647e <HAL_UART_Transmit+0x11c>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2221      	movs	r2, #33	@ 0x21
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063b6:	f7fc fc09 	bl	8002bcc <HAL_GetTick>
 80063ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	88fa      	ldrh	r2, [r7, #6]
 80063c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	88fa      	ldrh	r2, [r7, #6]
 80063c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d0:	d108      	bne.n	80063e4 <HAL_UART_Transmit+0x82>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	61bb      	str	r3, [r7, #24]
 80063e2:	e003      	b.n	80063ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80063f4:	e02a      	b.n	800644c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2200      	movs	r2, #0
 80063fe:	2180      	movs	r1, #128	@ 0x80
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 fb1f 	bl	8006a44 <UART_WaitOnFlagUntilTimeout>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e036      	b.n	800647e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10b      	bne.n	800642e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006424:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	3302      	adds	r3, #2
 800642a:	61bb      	str	r3, [r7, #24]
 800642c:	e007      	b.n	800643e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	781a      	ldrb	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	3301      	adds	r3, #1
 800643c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1cf      	bne.n	80063f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2200      	movs	r2, #0
 800645e:	2140      	movs	r1, #64	@ 0x40
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 faef 	bl	8006a44 <UART_WaitOnFlagUntilTimeout>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e006      	b.n	800647e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2220      	movs	r2, #32
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e000      	b.n	800647e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	3720      	adds	r7, #32
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	4613      	mov	r3, r2
 8006492:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b20      	cmp	r3, #32
 800649e:	d11d      	bne.n	80064dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <HAL_UART_Receive_IT+0x26>
 80064a6:	88fb      	ldrh	r3, [r7, #6]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e016      	b.n	80064de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_UART_Receive_IT+0x38>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e00f      	b.n	80064de <HAL_UART_Receive_IT+0x58>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	461a      	mov	r2, r3
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fb24 	bl	8006b20 <UART_Start_Receive_IT>
 80064d8:	4603      	mov	r3, r0
 80064da:	e000      	b.n	80064de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80064dc:	2302      	movs	r3, #2
  }
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b0ba      	sub	sp, #232	@ 0xe8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800650e:	2300      	movs	r3, #0
 8006510:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006514:	2300      	movs	r3, #0
 8006516:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800651a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10f      	bne.n	800654e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <HAL_UART_IRQHandler+0x66>
 800653a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fc03 	bl	8006d52 <UART_Receive_IT>
      return;
 800654c:	e256      	b.n	80069fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800654e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 80de 	beq.w	8006714 <HAL_UART_IRQHandler+0x22c>
 8006558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006568:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 80d1 	beq.w	8006714 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00b      	beq.n	8006596 <HAL_UART_IRQHandler+0xae>
 800657e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00b      	beq.n	80065ba <HAL_UART_IRQHandler+0xd2>
 80065a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b2:	f043 0202 	orr.w	r2, r3, #2
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00b      	beq.n	80065de <HAL_UART_IRQHandler+0xf6>
 80065c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d6:	f043 0204 	orr.w	r2, r3, #4
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d011      	beq.n	800660e <HAL_UART_IRQHandler+0x126>
 80065ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d105      	bne.n	8006602 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d005      	beq.n	800660e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006606:	f043 0208 	orr.w	r2, r3, #8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 81ed 	beq.w	80069f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	d008      	beq.n	8006636 <HAL_UART_IRQHandler+0x14e>
 8006624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fb8e 	bl	8006d52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006640:	2b40      	cmp	r3, #64	@ 0x40
 8006642:	bf0c      	ite	eq
 8006644:	2301      	moveq	r3, #1
 8006646:	2300      	movne	r3, #0
 8006648:	b2db      	uxtb	r3, r3
 800664a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d103      	bne.n	8006662 <HAL_UART_IRQHandler+0x17a>
 800665a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d04f      	beq.n	8006702 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa96 	bl	8006b94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006672:	2b40      	cmp	r3, #64	@ 0x40
 8006674:	d141      	bne.n	80066fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3314      	adds	r3, #20
 800667c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800668c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3314      	adds	r3, #20
 800669e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80066ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1d9      	bne.n	8006676 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d013      	beq.n	80066f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ce:	4a7d      	ldr	r2, [pc, #500]	@ (80068c4 <HAL_UART_IRQHandler+0x3dc>)
 80066d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fc fc29 	bl	8002f2e <HAL_DMA_Abort_IT>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d016      	beq.n	8006710 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80066ec:	4610      	mov	r0, r2
 80066ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f0:	e00e      	b.n	8006710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f990 	bl	8006a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f8:	e00a      	b.n	8006710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f98c 	bl	8006a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006700:	e006      	b.n	8006710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f988 	bl	8006a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800670e:	e170      	b.n	80069f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006710:	bf00      	nop
    return;
 8006712:	e16e      	b.n	80069f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006718:	2b01      	cmp	r3, #1
 800671a:	f040 814a 	bne.w	80069b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800671e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8143 	beq.w	80069b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800672c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006730:	f003 0310 	and.w	r3, r3, #16
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 813c 	beq.w	80069b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800673a:	2300      	movs	r3, #0
 800673c:	60bb      	str	r3, [r7, #8]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	60bb      	str	r3, [r7, #8]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	60bb      	str	r3, [r7, #8]
 800674e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675a:	2b40      	cmp	r3, #64	@ 0x40
 800675c:	f040 80b4 	bne.w	80068c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800676c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8140 	beq.w	80069f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800677a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800677e:	429a      	cmp	r2, r3
 8006780:	f080 8139 	bcs.w	80069f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800678a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006796:	f000 8088 	beq.w	80068aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	330c      	adds	r3, #12
 80067a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80067b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	330c      	adds	r3, #12
 80067c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80067c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1d9      	bne.n	800679a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3314      	adds	r3, #20
 80067ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80067f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3314      	adds	r3, #20
 8006806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800680a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800680e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006812:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800681c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e1      	bne.n	80067e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3314      	adds	r3, #20
 8006828:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3314      	adds	r3, #20
 8006842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006846:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006848:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800684c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e3      	bne.n	8006822 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	330c      	adds	r3, #12
 800686e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006872:	e853 3f00 	ldrex	r3, [r3]
 8006876:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800687a:	f023 0310 	bic.w	r3, r3, #16
 800687e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	330c      	adds	r3, #12
 8006888:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800688c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800688e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006890:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006892:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006894:	e841 2300 	strex	r3, r2, [r1]
 8006898:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800689a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1e3      	bne.n	8006868 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fc fad2 	bl	8002e4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f8b6 	bl	8006a2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068c0:	e099      	b.n	80069f6 <HAL_UART_IRQHandler+0x50e>
 80068c2:	bf00      	nop
 80068c4:	08006c5b 	.word	0x08006c5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 808b 	beq.w	80069fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80068e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 8086 	beq.w	80069fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	330c      	adds	r3, #12
 80068f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006904:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	330c      	adds	r3, #12
 800690e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006912:	647a      	str	r2, [r7, #68]	@ 0x44
 8006914:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006918:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e3      	bne.n	80068ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3314      	adds	r3, #20
 800692c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	623b      	str	r3, [r7, #32]
   return(result);
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3314      	adds	r3, #20
 8006946:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800694a:	633a      	str	r2, [r7, #48]	@ 0x30
 800694c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e3      	bne.n	8006926 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	330c      	adds	r3, #12
 8006972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	e853 3f00 	ldrex	r3, [r3]
 800697a:	60fb      	str	r3, [r7, #12]
   return(result);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0310 	bic.w	r3, r3, #16
 8006982:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	330c      	adds	r3, #12
 800698c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006990:	61fa      	str	r2, [r7, #28]
 8006992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	69b9      	ldr	r1, [r7, #24]
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	e841 2300 	strex	r3, r2, [r1]
 800699c:	617b      	str	r3, [r7, #20]
   return(result);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e3      	bne.n	800696c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f83e 	bl	8006a2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069b0:	e023      	b.n	80069fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d009      	beq.n	80069d2 <HAL_UART_IRQHandler+0x4ea>
 80069be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f959 	bl	8006c82 <UART_Transmit_IT>
    return;
 80069d0:	e014      	b.n	80069fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00e      	beq.n	80069fc <HAL_UART_IRQHandler+0x514>
 80069de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d008      	beq.n	80069fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f999 	bl	8006d22 <UART_EndTransmit_IT>
    return;
 80069f0:	e004      	b.n	80069fc <HAL_UART_IRQHandler+0x514>
    return;
 80069f2:	bf00      	nop
 80069f4:	e002      	b.n	80069fc <HAL_UART_IRQHandler+0x514>
      return;
 80069f6:	bf00      	nop
 80069f8:	e000      	b.n	80069fc <HAL_UART_IRQHandler+0x514>
      return;
 80069fa:	bf00      	nop
  }
}
 80069fc:	37e8      	adds	r7, #232	@ 0xe8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop

08006a04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b090      	sub	sp, #64	@ 0x40
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	4613      	mov	r3, r2
 8006a52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a54:	e050      	b.n	8006af8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5c:	d04c      	beq.n	8006af8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d007      	beq.n	8006a74 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a64:	f7fc f8b2 	bl	8002bcc <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d241      	bcs.n	8006af8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	330c      	adds	r3, #12
 8006a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a94:	637a      	str	r2, [r7, #52]	@ 0x34
 8006a96:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e5      	bne.n	8006a74 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3314      	adds	r3, #20
 8006aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f023 0301 	bic.w	r3, r3, #1
 8006abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3314      	adds	r3, #20
 8006ac6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ac8:	623a      	str	r2, [r7, #32]
 8006aca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	69f9      	ldr	r1, [r7, #28]
 8006ace:	6a3a      	ldr	r2, [r7, #32]
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e5      	bne.n	8006aa8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e00f      	b.n	8006b18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	4013      	ands	r3, r2
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	bf0c      	ite	eq
 8006b08:	2301      	moveq	r3, #1
 8006b0a:	2300      	movne	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d09f      	beq.n	8006a56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3740      	adds	r7, #64	@ 0x40
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	88fa      	ldrh	r2, [r7, #6]
 8006b38:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	88fa      	ldrh	r2, [r7, #6]
 8006b3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2222      	movs	r2, #34	@ 0x22
 8006b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b64:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695a      	ldr	r2, [r3, #20]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0201 	orr.w	r2, r2, #1
 8006b74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f042 0220 	orr.w	r2, r2, #32
 8006b84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b095      	sub	sp, #84	@ 0x54
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	330c      	adds	r3, #12
 8006ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	330c      	adds	r3, #12
 8006bba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bbc:	643a      	str	r2, [r7, #64]	@ 0x40
 8006bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bc4:	e841 2300 	strex	r3, r2, [r1]
 8006bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e5      	bne.n	8006b9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3314      	adds	r3, #20
 8006bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	e853 3f00 	ldrex	r3, [r3]
 8006bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f023 0301 	bic.w	r3, r3, #1
 8006be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3314      	adds	r3, #20
 8006bee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e5      	bne.n	8006bd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d119      	bne.n	8006c40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	330c      	adds	r3, #12
 8006c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f023 0310 	bic.w	r3, r3, #16
 8006c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	330c      	adds	r3, #12
 8006c2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c2c:	61ba      	str	r2, [r7, #24]
 8006c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6979      	ldr	r1, [r7, #20]
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	613b      	str	r3, [r7, #16]
   return(result);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e5      	bne.n	8006c0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c4e:	bf00      	nop
 8006c50:	3754      	adds	r7, #84	@ 0x54
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f7ff fecf 	bl	8006a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c7a:	bf00      	nop
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b21      	cmp	r3, #33	@ 0x21
 8006c94:	d13e      	bne.n	8006d14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c9e:	d114      	bne.n	8006cca <UART_Transmit_IT+0x48>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d110      	bne.n	8006cca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	1c9a      	adds	r2, r3, #2
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	621a      	str	r2, [r3, #32]
 8006cc8:	e008      	b.n	8006cdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	1c59      	adds	r1, r3, #1
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	6211      	str	r1, [r2, #32]
 8006cd4:	781a      	ldrb	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10f      	bne.n	8006d10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d14:	2302      	movs	r3, #2
  }
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68da      	ldr	r2, [r3, #12]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff fe5e 	bl	8006a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b08c      	sub	sp, #48	@ 0x30
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b22      	cmp	r3, #34	@ 0x22
 8006d64:	f040 80ab 	bne.w	8006ebe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d70:	d117      	bne.n	8006da2 <UART_Receive_IT+0x50>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d113      	bne.n	8006da2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d82:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9a:	1c9a      	adds	r2, r3, #2
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006da0:	e026      	b.n	8006df0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006da8:	2300      	movs	r3, #0
 8006daa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006db4:	d007      	beq.n	8006dc6 <UART_Receive_IT+0x74>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <UART_Receive_IT+0x82>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d106      	bne.n	8006dd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	e008      	b.n	8006de6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d15a      	bne.n	8006eba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0220 	bic.w	r2, r2, #32
 8006e12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	695a      	ldr	r2, [r3, #20]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0201 	bic.w	r2, r2, #1
 8006e32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d135      	bne.n	8006eb0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	330c      	adds	r3, #12
 8006e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f023 0310 	bic.w	r3, r3, #16
 8006e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	330c      	adds	r3, #12
 8006e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e6a:	623a      	str	r2, [r7, #32]
 8006e6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	69f9      	ldr	r1, [r7, #28]
 8006e70:	6a3a      	ldr	r2, [r7, #32]
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e5      	bne.n	8006e4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0310 	and.w	r3, r3, #16
 8006e88:	2b10      	cmp	r3, #16
 8006e8a:	d10a      	bne.n	8006ea2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff fdbf 	bl	8006a2c <HAL_UARTEx_RxEventCallback>
 8006eae:	e002      	b.n	8006eb6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7fb fd07 	bl	80028c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e002      	b.n	8006ec0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e000      	b.n	8006ec0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006ebe:	2302      	movs	r3, #2
  }
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3730      	adds	r7, #48	@ 0x30
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ecc:	b0c0      	sub	sp, #256	@ 0x100
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee4:	68d9      	ldr	r1, [r3, #12]
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	ea40 0301 	orr.w	r3, r0, r1
 8006ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f20:	f021 010c 	bic.w	r1, r1, #12
 8006f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f42:	6999      	ldr	r1, [r3, #24]
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	ea40 0301 	orr.w	r3, r0, r1
 8006f4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4b8f      	ldr	r3, [pc, #572]	@ (8007194 <UART_SetConfig+0x2cc>)
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d005      	beq.n	8006f68 <UART_SetConfig+0xa0>
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b8d      	ldr	r3, [pc, #564]	@ (8007198 <UART_SetConfig+0x2d0>)
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d104      	bne.n	8006f72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f68:	f7fd ff2c 	bl	8004dc4 <HAL_RCC_GetPCLK2Freq>
 8006f6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f70:	e003      	b.n	8006f7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f72:	f7fd ff13 	bl	8004d9c <HAL_RCC_GetPCLK1Freq>
 8006f76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f84:	f040 810c 	bne.w	80071a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	1891      	adds	r1, r2, r2
 8006fa0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006fa2:	415b      	adcs	r3, r3
 8006fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006faa:	4621      	mov	r1, r4
 8006fac:	eb12 0801 	adds.w	r8, r2, r1
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	eb43 0901 	adc.w	r9, r3, r1
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fca:	4690      	mov	r8, r2
 8006fcc:	4699      	mov	r9, r3
 8006fce:	4623      	mov	r3, r4
 8006fd0:	eb18 0303 	adds.w	r3, r8, r3
 8006fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fd8:	462b      	mov	r3, r5
 8006fda:	eb49 0303 	adc.w	r3, r9, r3
 8006fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	18db      	adds	r3, r3, r3
 8006ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	eb42 0303 	adc.w	r3, r2, r3
 8007002:	657b      	str	r3, [r7, #84]	@ 0x54
 8007004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007008:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800700c:	f7f9 f930 	bl	8000270 <__aeabi_uldivmod>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4b61      	ldr	r3, [pc, #388]	@ (800719c <UART_SetConfig+0x2d4>)
 8007016:	fba3 2302 	umull	r2, r3, r3, r2
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	011c      	lsls	r4, r3, #4
 800701e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007022:	2200      	movs	r2, #0
 8007024:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007028:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800702c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007030:	4642      	mov	r2, r8
 8007032:	464b      	mov	r3, r9
 8007034:	1891      	adds	r1, r2, r2
 8007036:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007038:	415b      	adcs	r3, r3
 800703a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800703c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007040:	4641      	mov	r1, r8
 8007042:	eb12 0a01 	adds.w	sl, r2, r1
 8007046:	4649      	mov	r1, r9
 8007048:	eb43 0b01 	adc.w	fp, r3, r1
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007058:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800705c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007060:	4692      	mov	sl, r2
 8007062:	469b      	mov	fp, r3
 8007064:	4643      	mov	r3, r8
 8007066:	eb1a 0303 	adds.w	r3, sl, r3
 800706a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800706e:	464b      	mov	r3, r9
 8007070:	eb4b 0303 	adc.w	r3, fp, r3
 8007074:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007084:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007088:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800708c:	460b      	mov	r3, r1
 800708e:	18db      	adds	r3, r3, r3
 8007090:	643b      	str	r3, [r7, #64]	@ 0x40
 8007092:	4613      	mov	r3, r2
 8007094:	eb42 0303 	adc.w	r3, r2, r3
 8007098:	647b      	str	r3, [r7, #68]	@ 0x44
 800709a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800709e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80070a2:	f7f9 f8e5 	bl	8000270 <__aeabi_uldivmod>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4611      	mov	r1, r2
 80070ac:	4b3b      	ldr	r3, [pc, #236]	@ (800719c <UART_SetConfig+0x2d4>)
 80070ae:	fba3 2301 	umull	r2, r3, r3, r1
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	2264      	movs	r2, #100	@ 0x64
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
 80070ba:	1acb      	subs	r3, r1, r3
 80070bc:	00db      	lsls	r3, r3, #3
 80070be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80070c2:	4b36      	ldr	r3, [pc, #216]	@ (800719c <UART_SetConfig+0x2d4>)
 80070c4:	fba3 2302 	umull	r2, r3, r3, r2
 80070c8:	095b      	lsrs	r3, r3, #5
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80070d0:	441c      	add	r4, r3
 80070d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070e4:	4642      	mov	r2, r8
 80070e6:	464b      	mov	r3, r9
 80070e8:	1891      	adds	r1, r2, r2
 80070ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070ec:	415b      	adcs	r3, r3
 80070ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070f4:	4641      	mov	r1, r8
 80070f6:	1851      	adds	r1, r2, r1
 80070f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80070fa:	4649      	mov	r1, r9
 80070fc:	414b      	adcs	r3, r1
 80070fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800710c:	4659      	mov	r1, fp
 800710e:	00cb      	lsls	r3, r1, #3
 8007110:	4651      	mov	r1, sl
 8007112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007116:	4651      	mov	r1, sl
 8007118:	00ca      	lsls	r2, r1, #3
 800711a:	4610      	mov	r0, r2
 800711c:	4619      	mov	r1, r3
 800711e:	4603      	mov	r3, r0
 8007120:	4642      	mov	r2, r8
 8007122:	189b      	adds	r3, r3, r2
 8007124:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007128:	464b      	mov	r3, r9
 800712a:	460a      	mov	r2, r1
 800712c:	eb42 0303 	adc.w	r3, r2, r3
 8007130:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007140:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007148:	460b      	mov	r3, r1
 800714a:	18db      	adds	r3, r3, r3
 800714c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800714e:	4613      	mov	r3, r2
 8007150:	eb42 0303 	adc.w	r3, r2, r3
 8007154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800715a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800715e:	f7f9 f887 	bl	8000270 <__aeabi_uldivmod>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4b0d      	ldr	r3, [pc, #52]	@ (800719c <UART_SetConfig+0x2d4>)
 8007168:	fba3 1302 	umull	r1, r3, r3, r2
 800716c:	095b      	lsrs	r3, r3, #5
 800716e:	2164      	movs	r1, #100	@ 0x64
 8007170:	fb01 f303 	mul.w	r3, r1, r3
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	3332      	adds	r3, #50	@ 0x32
 800717a:	4a08      	ldr	r2, [pc, #32]	@ (800719c <UART_SetConfig+0x2d4>)
 800717c:	fba2 2303 	umull	r2, r3, r2, r3
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	f003 0207 	and.w	r2, r3, #7
 8007186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4422      	add	r2, r4
 800718e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007190:	e106      	b.n	80073a0 <UART_SetConfig+0x4d8>
 8007192:	bf00      	nop
 8007194:	40011000 	.word	0x40011000
 8007198:	40011400 	.word	0x40011400
 800719c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80071ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80071b2:	4642      	mov	r2, r8
 80071b4:	464b      	mov	r3, r9
 80071b6:	1891      	adds	r1, r2, r2
 80071b8:	6239      	str	r1, [r7, #32]
 80071ba:	415b      	adcs	r3, r3
 80071bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80071be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071c2:	4641      	mov	r1, r8
 80071c4:	1854      	adds	r4, r2, r1
 80071c6:	4649      	mov	r1, r9
 80071c8:	eb43 0501 	adc.w	r5, r3, r1
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	00eb      	lsls	r3, r5, #3
 80071d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071da:	00e2      	lsls	r2, r4, #3
 80071dc:	4614      	mov	r4, r2
 80071de:	461d      	mov	r5, r3
 80071e0:	4643      	mov	r3, r8
 80071e2:	18e3      	adds	r3, r4, r3
 80071e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071e8:	464b      	mov	r3, r9
 80071ea:	eb45 0303 	adc.w	r3, r5, r3
 80071ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800720e:	4629      	mov	r1, r5
 8007210:	008b      	lsls	r3, r1, #2
 8007212:	4621      	mov	r1, r4
 8007214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007218:	4621      	mov	r1, r4
 800721a:	008a      	lsls	r2, r1, #2
 800721c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007220:	f7f9 f826 	bl	8000270 <__aeabi_uldivmod>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4b60      	ldr	r3, [pc, #384]	@ (80073ac <UART_SetConfig+0x4e4>)
 800722a:	fba3 2302 	umull	r2, r3, r3, r2
 800722e:	095b      	lsrs	r3, r3, #5
 8007230:	011c      	lsls	r4, r3, #4
 8007232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007236:	2200      	movs	r2, #0
 8007238:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800723c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007240:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	1891      	adds	r1, r2, r2
 800724a:	61b9      	str	r1, [r7, #24]
 800724c:	415b      	adcs	r3, r3
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007254:	4641      	mov	r1, r8
 8007256:	1851      	adds	r1, r2, r1
 8007258:	6139      	str	r1, [r7, #16]
 800725a:	4649      	mov	r1, r9
 800725c:	414b      	adcs	r3, r1
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800726c:	4659      	mov	r1, fp
 800726e:	00cb      	lsls	r3, r1, #3
 8007270:	4651      	mov	r1, sl
 8007272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007276:	4651      	mov	r1, sl
 8007278:	00ca      	lsls	r2, r1, #3
 800727a:	4610      	mov	r0, r2
 800727c:	4619      	mov	r1, r3
 800727e:	4603      	mov	r3, r0
 8007280:	4642      	mov	r2, r8
 8007282:	189b      	adds	r3, r3, r2
 8007284:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007288:	464b      	mov	r3, r9
 800728a:	460a      	mov	r2, r1
 800728c:	eb42 0303 	adc.w	r3, r2, r3
 8007290:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800729e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	f04f 0300 	mov.w	r3, #0
 80072a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80072ac:	4649      	mov	r1, r9
 80072ae:	008b      	lsls	r3, r1, #2
 80072b0:	4641      	mov	r1, r8
 80072b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072b6:	4641      	mov	r1, r8
 80072b8:	008a      	lsls	r2, r1, #2
 80072ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80072be:	f7f8 ffd7 	bl	8000270 <__aeabi_uldivmod>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	4b38      	ldr	r3, [pc, #224]	@ (80073ac <UART_SetConfig+0x4e4>)
 80072ca:	fba3 2301 	umull	r2, r3, r3, r1
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	2264      	movs	r2, #100	@ 0x64
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	1acb      	subs	r3, r1, r3
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	3332      	adds	r3, #50	@ 0x32
 80072dc:	4a33      	ldr	r2, [pc, #204]	@ (80073ac <UART_SetConfig+0x4e4>)
 80072de:	fba2 2303 	umull	r2, r3, r2, r3
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072e8:	441c      	add	r4, r3
 80072ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ee:	2200      	movs	r2, #0
 80072f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80072f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80072f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072f8:	4642      	mov	r2, r8
 80072fa:	464b      	mov	r3, r9
 80072fc:	1891      	adds	r1, r2, r2
 80072fe:	60b9      	str	r1, [r7, #8]
 8007300:	415b      	adcs	r3, r3
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007308:	4641      	mov	r1, r8
 800730a:	1851      	adds	r1, r2, r1
 800730c:	6039      	str	r1, [r7, #0]
 800730e:	4649      	mov	r1, r9
 8007310:	414b      	adcs	r3, r1
 8007312:	607b      	str	r3, [r7, #4]
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007320:	4659      	mov	r1, fp
 8007322:	00cb      	lsls	r3, r1, #3
 8007324:	4651      	mov	r1, sl
 8007326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800732a:	4651      	mov	r1, sl
 800732c:	00ca      	lsls	r2, r1, #3
 800732e:	4610      	mov	r0, r2
 8007330:	4619      	mov	r1, r3
 8007332:	4603      	mov	r3, r0
 8007334:	4642      	mov	r2, r8
 8007336:	189b      	adds	r3, r3, r2
 8007338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800733a:	464b      	mov	r3, r9
 800733c:	460a      	mov	r2, r1
 800733e:	eb42 0303 	adc.w	r3, r2, r3
 8007342:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	663b      	str	r3, [r7, #96]	@ 0x60
 800734e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	f04f 0300 	mov.w	r3, #0
 8007358:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800735c:	4649      	mov	r1, r9
 800735e:	008b      	lsls	r3, r1, #2
 8007360:	4641      	mov	r1, r8
 8007362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007366:	4641      	mov	r1, r8
 8007368:	008a      	lsls	r2, r1, #2
 800736a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800736e:	f7f8 ff7f 	bl	8000270 <__aeabi_uldivmod>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	4b0d      	ldr	r3, [pc, #52]	@ (80073ac <UART_SetConfig+0x4e4>)
 8007378:	fba3 1302 	umull	r1, r3, r3, r2
 800737c:	095b      	lsrs	r3, r3, #5
 800737e:	2164      	movs	r1, #100	@ 0x64
 8007380:	fb01 f303 	mul.w	r3, r1, r3
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	3332      	adds	r3, #50	@ 0x32
 800738a:	4a08      	ldr	r2, [pc, #32]	@ (80073ac <UART_SetConfig+0x4e4>)
 800738c:	fba2 2303 	umull	r2, r3, r2, r3
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	f003 020f 	and.w	r2, r3, #15
 8007396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4422      	add	r2, r4
 800739e:	609a      	str	r2, [r3, #8]
}
 80073a0:	bf00      	nop
 80073a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80073a6:	46bd      	mov	sp, r7
 80073a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ac:	51eb851f 	.word	0x51eb851f

080073b0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4b20      	ldr	r3, [pc, #128]	@ (8007450 <FSMC_NORSRAM_Init+0xa0>)
 80073ce:	4013      	ands	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80073da:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80073e0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80073e6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80073ec:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80073f2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80073f8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80073fe:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8007404:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 800740a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8007410:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 8007416:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 800741c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	4313      	orrs	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	2b08      	cmp	r3, #8
 800742a:	d103      	bne.n	8007434 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007432:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68f9      	ldr	r1, [r7, #12]
 800743c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	fff00080 	.word	0xfff00080

08007454 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007476:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007482:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800748a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007492:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	3b01      	subs	r3, #1
 800749a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800749c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	3b02      	subs	r3, #2
 80074a4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80074a6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80074ac:	4313      	orrs	r3, r2
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6979      	ldr	r1, [r7, #20]
 80074bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
	...

080074d0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
 80074dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074e8:	d122      	bne.n	8007530 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	4b15      	ldr	r3, [pc, #84]	@ (800754c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007506:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800750e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007516:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800751c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4313      	orrs	r3, r2
 8007522:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	6979      	ldr	r1, [r7, #20]
 800752a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800752e:	e005      	b.n	800753c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8007538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	cff00000 	.word	0xcff00000

08007550 <siprintf>:
 8007550:	b40e      	push	{r1, r2, r3}
 8007552:	b500      	push	{lr}
 8007554:	b09c      	sub	sp, #112	@ 0x70
 8007556:	ab1d      	add	r3, sp, #116	@ 0x74
 8007558:	9002      	str	r0, [sp, #8]
 800755a:	9006      	str	r0, [sp, #24]
 800755c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007560:	4809      	ldr	r0, [pc, #36]	@ (8007588 <siprintf+0x38>)
 8007562:	9107      	str	r1, [sp, #28]
 8007564:	9104      	str	r1, [sp, #16]
 8007566:	4909      	ldr	r1, [pc, #36]	@ (800758c <siprintf+0x3c>)
 8007568:	f853 2b04 	ldr.w	r2, [r3], #4
 800756c:	9105      	str	r1, [sp, #20]
 800756e:	6800      	ldr	r0, [r0, #0]
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	a902      	add	r1, sp, #8
 8007574:	f000 f994 	bl	80078a0 <_svfiprintf_r>
 8007578:	9b02      	ldr	r3, [sp, #8]
 800757a:	2200      	movs	r2, #0
 800757c:	701a      	strb	r2, [r3, #0]
 800757e:	b01c      	add	sp, #112	@ 0x70
 8007580:	f85d eb04 	ldr.w	lr, [sp], #4
 8007584:	b003      	add	sp, #12
 8007586:	4770      	bx	lr
 8007588:	20000028 	.word	0x20000028
 800758c:	ffff0208 	.word	0xffff0208

08007590 <memset>:
 8007590:	4402      	add	r2, r0
 8007592:	4603      	mov	r3, r0
 8007594:	4293      	cmp	r3, r2
 8007596:	d100      	bne.n	800759a <memset+0xa>
 8007598:	4770      	bx	lr
 800759a:	f803 1b01 	strb.w	r1, [r3], #1
 800759e:	e7f9      	b.n	8007594 <memset+0x4>

080075a0 <__errno>:
 80075a0:	4b01      	ldr	r3, [pc, #4]	@ (80075a8 <__errno+0x8>)
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20000028 	.word	0x20000028

080075ac <__libc_init_array>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4d0d      	ldr	r5, [pc, #52]	@ (80075e4 <__libc_init_array+0x38>)
 80075b0:	4c0d      	ldr	r4, [pc, #52]	@ (80075e8 <__libc_init_array+0x3c>)
 80075b2:	1b64      	subs	r4, r4, r5
 80075b4:	10a4      	asrs	r4, r4, #2
 80075b6:	2600      	movs	r6, #0
 80075b8:	42a6      	cmp	r6, r4
 80075ba:	d109      	bne.n	80075d0 <__libc_init_array+0x24>
 80075bc:	4d0b      	ldr	r5, [pc, #44]	@ (80075ec <__libc_init_array+0x40>)
 80075be:	4c0c      	ldr	r4, [pc, #48]	@ (80075f0 <__libc_init_array+0x44>)
 80075c0:	f000 fc66 	bl	8007e90 <_init>
 80075c4:	1b64      	subs	r4, r4, r5
 80075c6:	10a4      	asrs	r4, r4, #2
 80075c8:	2600      	movs	r6, #0
 80075ca:	42a6      	cmp	r6, r4
 80075cc:	d105      	bne.n	80075da <__libc_init_array+0x2e>
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d4:	4798      	blx	r3
 80075d6:	3601      	adds	r6, #1
 80075d8:	e7ee      	b.n	80075b8 <__libc_init_array+0xc>
 80075da:	f855 3b04 	ldr.w	r3, [r5], #4
 80075de:	4798      	blx	r3
 80075e0:	3601      	adds	r6, #1
 80075e2:	e7f2      	b.n	80075ca <__libc_init_array+0x1e>
 80075e4:	0800af88 	.word	0x0800af88
 80075e8:	0800af88 	.word	0x0800af88
 80075ec:	0800af88 	.word	0x0800af88
 80075f0:	0800af8c 	.word	0x0800af8c

080075f4 <__retarget_lock_acquire_recursive>:
 80075f4:	4770      	bx	lr

080075f6 <__retarget_lock_release_recursive>:
 80075f6:	4770      	bx	lr

080075f8 <_free_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4605      	mov	r5, r0
 80075fc:	2900      	cmp	r1, #0
 80075fe:	d041      	beq.n	8007684 <_free_r+0x8c>
 8007600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007604:	1f0c      	subs	r4, r1, #4
 8007606:	2b00      	cmp	r3, #0
 8007608:	bfb8      	it	lt
 800760a:	18e4      	addlt	r4, r4, r3
 800760c:	f000 f8e0 	bl	80077d0 <__malloc_lock>
 8007610:	4a1d      	ldr	r2, [pc, #116]	@ (8007688 <_free_r+0x90>)
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	b933      	cbnz	r3, 8007624 <_free_r+0x2c>
 8007616:	6063      	str	r3, [r4, #4]
 8007618:	6014      	str	r4, [r2, #0]
 800761a:	4628      	mov	r0, r5
 800761c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007620:	f000 b8dc 	b.w	80077dc <__malloc_unlock>
 8007624:	42a3      	cmp	r3, r4
 8007626:	d908      	bls.n	800763a <_free_r+0x42>
 8007628:	6820      	ldr	r0, [r4, #0]
 800762a:	1821      	adds	r1, r4, r0
 800762c:	428b      	cmp	r3, r1
 800762e:	bf01      	itttt	eq
 8007630:	6819      	ldreq	r1, [r3, #0]
 8007632:	685b      	ldreq	r3, [r3, #4]
 8007634:	1809      	addeq	r1, r1, r0
 8007636:	6021      	streq	r1, [r4, #0]
 8007638:	e7ed      	b.n	8007616 <_free_r+0x1e>
 800763a:	461a      	mov	r2, r3
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	b10b      	cbz	r3, 8007644 <_free_r+0x4c>
 8007640:	42a3      	cmp	r3, r4
 8007642:	d9fa      	bls.n	800763a <_free_r+0x42>
 8007644:	6811      	ldr	r1, [r2, #0]
 8007646:	1850      	adds	r0, r2, r1
 8007648:	42a0      	cmp	r0, r4
 800764a:	d10b      	bne.n	8007664 <_free_r+0x6c>
 800764c:	6820      	ldr	r0, [r4, #0]
 800764e:	4401      	add	r1, r0
 8007650:	1850      	adds	r0, r2, r1
 8007652:	4283      	cmp	r3, r0
 8007654:	6011      	str	r1, [r2, #0]
 8007656:	d1e0      	bne.n	800761a <_free_r+0x22>
 8007658:	6818      	ldr	r0, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	6053      	str	r3, [r2, #4]
 800765e:	4408      	add	r0, r1
 8007660:	6010      	str	r0, [r2, #0]
 8007662:	e7da      	b.n	800761a <_free_r+0x22>
 8007664:	d902      	bls.n	800766c <_free_r+0x74>
 8007666:	230c      	movs	r3, #12
 8007668:	602b      	str	r3, [r5, #0]
 800766a:	e7d6      	b.n	800761a <_free_r+0x22>
 800766c:	6820      	ldr	r0, [r4, #0]
 800766e:	1821      	adds	r1, r4, r0
 8007670:	428b      	cmp	r3, r1
 8007672:	bf04      	itt	eq
 8007674:	6819      	ldreq	r1, [r3, #0]
 8007676:	685b      	ldreq	r3, [r3, #4]
 8007678:	6063      	str	r3, [r4, #4]
 800767a:	bf04      	itt	eq
 800767c:	1809      	addeq	r1, r1, r0
 800767e:	6021      	streq	r1, [r4, #0]
 8007680:	6054      	str	r4, [r2, #4]
 8007682:	e7ca      	b.n	800761a <_free_r+0x22>
 8007684:	bd38      	pop	{r3, r4, r5, pc}
 8007686:	bf00      	nop
 8007688:	20000458 	.word	0x20000458

0800768c <sbrk_aligned>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	4e0f      	ldr	r6, [pc, #60]	@ (80076cc <sbrk_aligned+0x40>)
 8007690:	460c      	mov	r4, r1
 8007692:	6831      	ldr	r1, [r6, #0]
 8007694:	4605      	mov	r5, r0
 8007696:	b911      	cbnz	r1, 800769e <sbrk_aligned+0x12>
 8007698:	f000 fba6 	bl	8007de8 <_sbrk_r>
 800769c:	6030      	str	r0, [r6, #0]
 800769e:	4621      	mov	r1, r4
 80076a0:	4628      	mov	r0, r5
 80076a2:	f000 fba1 	bl	8007de8 <_sbrk_r>
 80076a6:	1c43      	adds	r3, r0, #1
 80076a8:	d103      	bne.n	80076b2 <sbrk_aligned+0x26>
 80076aa:	f04f 34ff 	mov.w	r4, #4294967295
 80076ae:	4620      	mov	r0, r4
 80076b0:	bd70      	pop	{r4, r5, r6, pc}
 80076b2:	1cc4      	adds	r4, r0, #3
 80076b4:	f024 0403 	bic.w	r4, r4, #3
 80076b8:	42a0      	cmp	r0, r4
 80076ba:	d0f8      	beq.n	80076ae <sbrk_aligned+0x22>
 80076bc:	1a21      	subs	r1, r4, r0
 80076be:	4628      	mov	r0, r5
 80076c0:	f000 fb92 	bl	8007de8 <_sbrk_r>
 80076c4:	3001      	adds	r0, #1
 80076c6:	d1f2      	bne.n	80076ae <sbrk_aligned+0x22>
 80076c8:	e7ef      	b.n	80076aa <sbrk_aligned+0x1e>
 80076ca:	bf00      	nop
 80076cc:	20000454 	.word	0x20000454

080076d0 <_malloc_r>:
 80076d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d4:	1ccd      	adds	r5, r1, #3
 80076d6:	f025 0503 	bic.w	r5, r5, #3
 80076da:	3508      	adds	r5, #8
 80076dc:	2d0c      	cmp	r5, #12
 80076de:	bf38      	it	cc
 80076e0:	250c      	movcc	r5, #12
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	4606      	mov	r6, r0
 80076e6:	db01      	blt.n	80076ec <_malloc_r+0x1c>
 80076e8:	42a9      	cmp	r1, r5
 80076ea:	d904      	bls.n	80076f6 <_malloc_r+0x26>
 80076ec:	230c      	movs	r3, #12
 80076ee:	6033      	str	r3, [r6, #0]
 80076f0:	2000      	movs	r0, #0
 80076f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077cc <_malloc_r+0xfc>
 80076fa:	f000 f869 	bl	80077d0 <__malloc_lock>
 80076fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007702:	461c      	mov	r4, r3
 8007704:	bb44      	cbnz	r4, 8007758 <_malloc_r+0x88>
 8007706:	4629      	mov	r1, r5
 8007708:	4630      	mov	r0, r6
 800770a:	f7ff ffbf 	bl	800768c <sbrk_aligned>
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	4604      	mov	r4, r0
 8007712:	d158      	bne.n	80077c6 <_malloc_r+0xf6>
 8007714:	f8d8 4000 	ldr.w	r4, [r8]
 8007718:	4627      	mov	r7, r4
 800771a:	2f00      	cmp	r7, #0
 800771c:	d143      	bne.n	80077a6 <_malloc_r+0xd6>
 800771e:	2c00      	cmp	r4, #0
 8007720:	d04b      	beq.n	80077ba <_malloc_r+0xea>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	4639      	mov	r1, r7
 8007726:	4630      	mov	r0, r6
 8007728:	eb04 0903 	add.w	r9, r4, r3
 800772c:	f000 fb5c 	bl	8007de8 <_sbrk_r>
 8007730:	4581      	cmp	r9, r0
 8007732:	d142      	bne.n	80077ba <_malloc_r+0xea>
 8007734:	6821      	ldr	r1, [r4, #0]
 8007736:	1a6d      	subs	r5, r5, r1
 8007738:	4629      	mov	r1, r5
 800773a:	4630      	mov	r0, r6
 800773c:	f7ff ffa6 	bl	800768c <sbrk_aligned>
 8007740:	3001      	adds	r0, #1
 8007742:	d03a      	beq.n	80077ba <_malloc_r+0xea>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	442b      	add	r3, r5
 8007748:	6023      	str	r3, [r4, #0]
 800774a:	f8d8 3000 	ldr.w	r3, [r8]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	bb62      	cbnz	r2, 80077ac <_malloc_r+0xdc>
 8007752:	f8c8 7000 	str.w	r7, [r8]
 8007756:	e00f      	b.n	8007778 <_malloc_r+0xa8>
 8007758:	6822      	ldr	r2, [r4, #0]
 800775a:	1b52      	subs	r2, r2, r5
 800775c:	d420      	bmi.n	80077a0 <_malloc_r+0xd0>
 800775e:	2a0b      	cmp	r2, #11
 8007760:	d917      	bls.n	8007792 <_malloc_r+0xc2>
 8007762:	1961      	adds	r1, r4, r5
 8007764:	42a3      	cmp	r3, r4
 8007766:	6025      	str	r5, [r4, #0]
 8007768:	bf18      	it	ne
 800776a:	6059      	strne	r1, [r3, #4]
 800776c:	6863      	ldr	r3, [r4, #4]
 800776e:	bf08      	it	eq
 8007770:	f8c8 1000 	streq.w	r1, [r8]
 8007774:	5162      	str	r2, [r4, r5]
 8007776:	604b      	str	r3, [r1, #4]
 8007778:	4630      	mov	r0, r6
 800777a:	f000 f82f 	bl	80077dc <__malloc_unlock>
 800777e:	f104 000b 	add.w	r0, r4, #11
 8007782:	1d23      	adds	r3, r4, #4
 8007784:	f020 0007 	bic.w	r0, r0, #7
 8007788:	1ac2      	subs	r2, r0, r3
 800778a:	bf1c      	itt	ne
 800778c:	1a1b      	subne	r3, r3, r0
 800778e:	50a3      	strne	r3, [r4, r2]
 8007790:	e7af      	b.n	80076f2 <_malloc_r+0x22>
 8007792:	6862      	ldr	r2, [r4, #4]
 8007794:	42a3      	cmp	r3, r4
 8007796:	bf0c      	ite	eq
 8007798:	f8c8 2000 	streq.w	r2, [r8]
 800779c:	605a      	strne	r2, [r3, #4]
 800779e:	e7eb      	b.n	8007778 <_malloc_r+0xa8>
 80077a0:	4623      	mov	r3, r4
 80077a2:	6864      	ldr	r4, [r4, #4]
 80077a4:	e7ae      	b.n	8007704 <_malloc_r+0x34>
 80077a6:	463c      	mov	r4, r7
 80077a8:	687f      	ldr	r7, [r7, #4]
 80077aa:	e7b6      	b.n	800771a <_malloc_r+0x4a>
 80077ac:	461a      	mov	r2, r3
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	d1fb      	bne.n	80077ac <_malloc_r+0xdc>
 80077b4:	2300      	movs	r3, #0
 80077b6:	6053      	str	r3, [r2, #4]
 80077b8:	e7de      	b.n	8007778 <_malloc_r+0xa8>
 80077ba:	230c      	movs	r3, #12
 80077bc:	6033      	str	r3, [r6, #0]
 80077be:	4630      	mov	r0, r6
 80077c0:	f000 f80c 	bl	80077dc <__malloc_unlock>
 80077c4:	e794      	b.n	80076f0 <_malloc_r+0x20>
 80077c6:	6005      	str	r5, [r0, #0]
 80077c8:	e7d6      	b.n	8007778 <_malloc_r+0xa8>
 80077ca:	bf00      	nop
 80077cc:	20000458 	.word	0x20000458

080077d0 <__malloc_lock>:
 80077d0:	4801      	ldr	r0, [pc, #4]	@ (80077d8 <__malloc_lock+0x8>)
 80077d2:	f7ff bf0f 	b.w	80075f4 <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	20000450 	.word	0x20000450

080077dc <__malloc_unlock>:
 80077dc:	4801      	ldr	r0, [pc, #4]	@ (80077e4 <__malloc_unlock+0x8>)
 80077de:	f7ff bf0a 	b.w	80075f6 <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	20000450 	.word	0x20000450

080077e8 <__ssputs_r>:
 80077e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ec:	688e      	ldr	r6, [r1, #8]
 80077ee:	461f      	mov	r7, r3
 80077f0:	42be      	cmp	r6, r7
 80077f2:	680b      	ldr	r3, [r1, #0]
 80077f4:	4682      	mov	sl, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	4690      	mov	r8, r2
 80077fa:	d82d      	bhi.n	8007858 <__ssputs_r+0x70>
 80077fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007800:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007804:	d026      	beq.n	8007854 <__ssputs_r+0x6c>
 8007806:	6965      	ldr	r5, [r4, #20]
 8007808:	6909      	ldr	r1, [r1, #16]
 800780a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800780e:	eba3 0901 	sub.w	r9, r3, r1
 8007812:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007816:	1c7b      	adds	r3, r7, #1
 8007818:	444b      	add	r3, r9
 800781a:	106d      	asrs	r5, r5, #1
 800781c:	429d      	cmp	r5, r3
 800781e:	bf38      	it	cc
 8007820:	461d      	movcc	r5, r3
 8007822:	0553      	lsls	r3, r2, #21
 8007824:	d527      	bpl.n	8007876 <__ssputs_r+0x8e>
 8007826:	4629      	mov	r1, r5
 8007828:	f7ff ff52 	bl	80076d0 <_malloc_r>
 800782c:	4606      	mov	r6, r0
 800782e:	b360      	cbz	r0, 800788a <__ssputs_r+0xa2>
 8007830:	6921      	ldr	r1, [r4, #16]
 8007832:	464a      	mov	r2, r9
 8007834:	f000 fae8 	bl	8007e08 <memcpy>
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800783e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007842:	81a3      	strh	r3, [r4, #12]
 8007844:	6126      	str	r6, [r4, #16]
 8007846:	6165      	str	r5, [r4, #20]
 8007848:	444e      	add	r6, r9
 800784a:	eba5 0509 	sub.w	r5, r5, r9
 800784e:	6026      	str	r6, [r4, #0]
 8007850:	60a5      	str	r5, [r4, #8]
 8007852:	463e      	mov	r6, r7
 8007854:	42be      	cmp	r6, r7
 8007856:	d900      	bls.n	800785a <__ssputs_r+0x72>
 8007858:	463e      	mov	r6, r7
 800785a:	6820      	ldr	r0, [r4, #0]
 800785c:	4632      	mov	r2, r6
 800785e:	4641      	mov	r1, r8
 8007860:	f000 faa8 	bl	8007db4 <memmove>
 8007864:	68a3      	ldr	r3, [r4, #8]
 8007866:	1b9b      	subs	r3, r3, r6
 8007868:	60a3      	str	r3, [r4, #8]
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	4433      	add	r3, r6
 800786e:	6023      	str	r3, [r4, #0]
 8007870:	2000      	movs	r0, #0
 8007872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007876:	462a      	mov	r2, r5
 8007878:	f000 fad4 	bl	8007e24 <_realloc_r>
 800787c:	4606      	mov	r6, r0
 800787e:	2800      	cmp	r0, #0
 8007880:	d1e0      	bne.n	8007844 <__ssputs_r+0x5c>
 8007882:	6921      	ldr	r1, [r4, #16]
 8007884:	4650      	mov	r0, sl
 8007886:	f7ff feb7 	bl	80075f8 <_free_r>
 800788a:	230c      	movs	r3, #12
 800788c:	f8ca 3000 	str.w	r3, [sl]
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007896:	81a3      	strh	r3, [r4, #12]
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	e7e9      	b.n	8007872 <__ssputs_r+0x8a>
	...

080078a0 <_svfiprintf_r>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	4698      	mov	r8, r3
 80078a6:	898b      	ldrh	r3, [r1, #12]
 80078a8:	061b      	lsls	r3, r3, #24
 80078aa:	b09d      	sub	sp, #116	@ 0x74
 80078ac:	4607      	mov	r7, r0
 80078ae:	460d      	mov	r5, r1
 80078b0:	4614      	mov	r4, r2
 80078b2:	d510      	bpl.n	80078d6 <_svfiprintf_r+0x36>
 80078b4:	690b      	ldr	r3, [r1, #16]
 80078b6:	b973      	cbnz	r3, 80078d6 <_svfiprintf_r+0x36>
 80078b8:	2140      	movs	r1, #64	@ 0x40
 80078ba:	f7ff ff09 	bl	80076d0 <_malloc_r>
 80078be:	6028      	str	r0, [r5, #0]
 80078c0:	6128      	str	r0, [r5, #16]
 80078c2:	b930      	cbnz	r0, 80078d2 <_svfiprintf_r+0x32>
 80078c4:	230c      	movs	r3, #12
 80078c6:	603b      	str	r3, [r7, #0]
 80078c8:	f04f 30ff 	mov.w	r0, #4294967295
 80078cc:	b01d      	add	sp, #116	@ 0x74
 80078ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d2:	2340      	movs	r3, #64	@ 0x40
 80078d4:	616b      	str	r3, [r5, #20]
 80078d6:	2300      	movs	r3, #0
 80078d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80078da:	2320      	movs	r3, #32
 80078dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80078e4:	2330      	movs	r3, #48	@ 0x30
 80078e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a84 <_svfiprintf_r+0x1e4>
 80078ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078ee:	f04f 0901 	mov.w	r9, #1
 80078f2:	4623      	mov	r3, r4
 80078f4:	469a      	mov	sl, r3
 80078f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078fa:	b10a      	cbz	r2, 8007900 <_svfiprintf_r+0x60>
 80078fc:	2a25      	cmp	r2, #37	@ 0x25
 80078fe:	d1f9      	bne.n	80078f4 <_svfiprintf_r+0x54>
 8007900:	ebba 0b04 	subs.w	fp, sl, r4
 8007904:	d00b      	beq.n	800791e <_svfiprintf_r+0x7e>
 8007906:	465b      	mov	r3, fp
 8007908:	4622      	mov	r2, r4
 800790a:	4629      	mov	r1, r5
 800790c:	4638      	mov	r0, r7
 800790e:	f7ff ff6b 	bl	80077e8 <__ssputs_r>
 8007912:	3001      	adds	r0, #1
 8007914:	f000 80a7 	beq.w	8007a66 <_svfiprintf_r+0x1c6>
 8007918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800791a:	445a      	add	r2, fp
 800791c:	9209      	str	r2, [sp, #36]	@ 0x24
 800791e:	f89a 3000 	ldrb.w	r3, [sl]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 809f 	beq.w	8007a66 <_svfiprintf_r+0x1c6>
 8007928:	2300      	movs	r3, #0
 800792a:	f04f 32ff 	mov.w	r2, #4294967295
 800792e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007932:	f10a 0a01 	add.w	sl, sl, #1
 8007936:	9304      	str	r3, [sp, #16]
 8007938:	9307      	str	r3, [sp, #28]
 800793a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800793e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007940:	4654      	mov	r4, sl
 8007942:	2205      	movs	r2, #5
 8007944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007948:	484e      	ldr	r0, [pc, #312]	@ (8007a84 <_svfiprintf_r+0x1e4>)
 800794a:	f7f8 fc41 	bl	80001d0 <memchr>
 800794e:	9a04      	ldr	r2, [sp, #16]
 8007950:	b9d8      	cbnz	r0, 800798a <_svfiprintf_r+0xea>
 8007952:	06d0      	lsls	r0, r2, #27
 8007954:	bf44      	itt	mi
 8007956:	2320      	movmi	r3, #32
 8007958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800795c:	0711      	lsls	r1, r2, #28
 800795e:	bf44      	itt	mi
 8007960:	232b      	movmi	r3, #43	@ 0x2b
 8007962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007966:	f89a 3000 	ldrb.w	r3, [sl]
 800796a:	2b2a      	cmp	r3, #42	@ 0x2a
 800796c:	d015      	beq.n	800799a <_svfiprintf_r+0xfa>
 800796e:	9a07      	ldr	r2, [sp, #28]
 8007970:	4654      	mov	r4, sl
 8007972:	2000      	movs	r0, #0
 8007974:	f04f 0c0a 	mov.w	ip, #10
 8007978:	4621      	mov	r1, r4
 800797a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800797e:	3b30      	subs	r3, #48	@ 0x30
 8007980:	2b09      	cmp	r3, #9
 8007982:	d94b      	bls.n	8007a1c <_svfiprintf_r+0x17c>
 8007984:	b1b0      	cbz	r0, 80079b4 <_svfiprintf_r+0x114>
 8007986:	9207      	str	r2, [sp, #28]
 8007988:	e014      	b.n	80079b4 <_svfiprintf_r+0x114>
 800798a:	eba0 0308 	sub.w	r3, r0, r8
 800798e:	fa09 f303 	lsl.w	r3, r9, r3
 8007992:	4313      	orrs	r3, r2
 8007994:	9304      	str	r3, [sp, #16]
 8007996:	46a2      	mov	sl, r4
 8007998:	e7d2      	b.n	8007940 <_svfiprintf_r+0xa0>
 800799a:	9b03      	ldr	r3, [sp, #12]
 800799c:	1d19      	adds	r1, r3, #4
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	9103      	str	r1, [sp, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bfbb      	ittet	lt
 80079a6:	425b      	neglt	r3, r3
 80079a8:	f042 0202 	orrlt.w	r2, r2, #2
 80079ac:	9307      	strge	r3, [sp, #28]
 80079ae:	9307      	strlt	r3, [sp, #28]
 80079b0:	bfb8      	it	lt
 80079b2:	9204      	strlt	r2, [sp, #16]
 80079b4:	7823      	ldrb	r3, [r4, #0]
 80079b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80079b8:	d10a      	bne.n	80079d0 <_svfiprintf_r+0x130>
 80079ba:	7863      	ldrb	r3, [r4, #1]
 80079bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80079be:	d132      	bne.n	8007a26 <_svfiprintf_r+0x186>
 80079c0:	9b03      	ldr	r3, [sp, #12]
 80079c2:	1d1a      	adds	r2, r3, #4
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	9203      	str	r2, [sp, #12]
 80079c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079cc:	3402      	adds	r4, #2
 80079ce:	9305      	str	r3, [sp, #20]
 80079d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a94 <_svfiprintf_r+0x1f4>
 80079d4:	7821      	ldrb	r1, [r4, #0]
 80079d6:	2203      	movs	r2, #3
 80079d8:	4650      	mov	r0, sl
 80079da:	f7f8 fbf9 	bl	80001d0 <memchr>
 80079de:	b138      	cbz	r0, 80079f0 <_svfiprintf_r+0x150>
 80079e0:	9b04      	ldr	r3, [sp, #16]
 80079e2:	eba0 000a 	sub.w	r0, r0, sl
 80079e6:	2240      	movs	r2, #64	@ 0x40
 80079e8:	4082      	lsls	r2, r0
 80079ea:	4313      	orrs	r3, r2
 80079ec:	3401      	adds	r4, #1
 80079ee:	9304      	str	r3, [sp, #16]
 80079f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f4:	4824      	ldr	r0, [pc, #144]	@ (8007a88 <_svfiprintf_r+0x1e8>)
 80079f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079fa:	2206      	movs	r2, #6
 80079fc:	f7f8 fbe8 	bl	80001d0 <memchr>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d036      	beq.n	8007a72 <_svfiprintf_r+0x1d2>
 8007a04:	4b21      	ldr	r3, [pc, #132]	@ (8007a8c <_svfiprintf_r+0x1ec>)
 8007a06:	bb1b      	cbnz	r3, 8007a50 <_svfiprintf_r+0x1b0>
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	3307      	adds	r3, #7
 8007a0c:	f023 0307 	bic.w	r3, r3, #7
 8007a10:	3308      	adds	r3, #8
 8007a12:	9303      	str	r3, [sp, #12]
 8007a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a16:	4433      	add	r3, r6
 8007a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a1a:	e76a      	b.n	80078f2 <_svfiprintf_r+0x52>
 8007a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a20:	460c      	mov	r4, r1
 8007a22:	2001      	movs	r0, #1
 8007a24:	e7a8      	b.n	8007978 <_svfiprintf_r+0xd8>
 8007a26:	2300      	movs	r3, #0
 8007a28:	3401      	adds	r4, #1
 8007a2a:	9305      	str	r3, [sp, #20]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	f04f 0c0a 	mov.w	ip, #10
 8007a32:	4620      	mov	r0, r4
 8007a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a38:	3a30      	subs	r2, #48	@ 0x30
 8007a3a:	2a09      	cmp	r2, #9
 8007a3c:	d903      	bls.n	8007a46 <_svfiprintf_r+0x1a6>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0c6      	beq.n	80079d0 <_svfiprintf_r+0x130>
 8007a42:	9105      	str	r1, [sp, #20]
 8007a44:	e7c4      	b.n	80079d0 <_svfiprintf_r+0x130>
 8007a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e7f0      	b.n	8007a32 <_svfiprintf_r+0x192>
 8007a50:	ab03      	add	r3, sp, #12
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	462a      	mov	r2, r5
 8007a56:	4b0e      	ldr	r3, [pc, #56]	@ (8007a90 <_svfiprintf_r+0x1f0>)
 8007a58:	a904      	add	r1, sp, #16
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	f3af 8000 	nop.w
 8007a60:	1c42      	adds	r2, r0, #1
 8007a62:	4606      	mov	r6, r0
 8007a64:	d1d6      	bne.n	8007a14 <_svfiprintf_r+0x174>
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	065b      	lsls	r3, r3, #25
 8007a6a:	f53f af2d 	bmi.w	80078c8 <_svfiprintf_r+0x28>
 8007a6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a70:	e72c      	b.n	80078cc <_svfiprintf_r+0x2c>
 8007a72:	ab03      	add	r3, sp, #12
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	462a      	mov	r2, r5
 8007a78:	4b05      	ldr	r3, [pc, #20]	@ (8007a90 <_svfiprintf_r+0x1f0>)
 8007a7a:	a904      	add	r1, sp, #16
 8007a7c:	4638      	mov	r0, r7
 8007a7e:	f000 f879 	bl	8007b74 <_printf_i>
 8007a82:	e7ed      	b.n	8007a60 <_svfiprintf_r+0x1c0>
 8007a84:	0800af4c 	.word	0x0800af4c
 8007a88:	0800af56 	.word	0x0800af56
 8007a8c:	00000000 	.word	0x00000000
 8007a90:	080077e9 	.word	0x080077e9
 8007a94:	0800af52 	.word	0x0800af52

08007a98 <_printf_common>:
 8007a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a9c:	4616      	mov	r6, r2
 8007a9e:	4698      	mov	r8, r3
 8007aa0:	688a      	ldr	r2, [r1, #8]
 8007aa2:	690b      	ldr	r3, [r1, #16]
 8007aa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	bfb8      	it	lt
 8007aac:	4613      	movlt	r3, r2
 8007aae:	6033      	str	r3, [r6, #0]
 8007ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ab4:	4607      	mov	r7, r0
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	b10a      	cbz	r2, 8007abe <_printf_common+0x26>
 8007aba:	3301      	adds	r3, #1
 8007abc:	6033      	str	r3, [r6, #0]
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	0699      	lsls	r1, r3, #26
 8007ac2:	bf42      	ittt	mi
 8007ac4:	6833      	ldrmi	r3, [r6, #0]
 8007ac6:	3302      	addmi	r3, #2
 8007ac8:	6033      	strmi	r3, [r6, #0]
 8007aca:	6825      	ldr	r5, [r4, #0]
 8007acc:	f015 0506 	ands.w	r5, r5, #6
 8007ad0:	d106      	bne.n	8007ae0 <_printf_common+0x48>
 8007ad2:	f104 0a19 	add.w	sl, r4, #25
 8007ad6:	68e3      	ldr	r3, [r4, #12]
 8007ad8:	6832      	ldr	r2, [r6, #0]
 8007ada:	1a9b      	subs	r3, r3, r2
 8007adc:	42ab      	cmp	r3, r5
 8007ade:	dc26      	bgt.n	8007b2e <_printf_common+0x96>
 8007ae0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ae4:	6822      	ldr	r2, [r4, #0]
 8007ae6:	3b00      	subs	r3, #0
 8007ae8:	bf18      	it	ne
 8007aea:	2301      	movne	r3, #1
 8007aec:	0692      	lsls	r2, r2, #26
 8007aee:	d42b      	bmi.n	8007b48 <_printf_common+0xb0>
 8007af0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007af4:	4641      	mov	r1, r8
 8007af6:	4638      	mov	r0, r7
 8007af8:	47c8      	blx	r9
 8007afa:	3001      	adds	r0, #1
 8007afc:	d01e      	beq.n	8007b3c <_printf_common+0xa4>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	6922      	ldr	r2, [r4, #16]
 8007b02:	f003 0306 	and.w	r3, r3, #6
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	bf02      	ittt	eq
 8007b0a:	68e5      	ldreq	r5, [r4, #12]
 8007b0c:	6833      	ldreq	r3, [r6, #0]
 8007b0e:	1aed      	subeq	r5, r5, r3
 8007b10:	68a3      	ldr	r3, [r4, #8]
 8007b12:	bf0c      	ite	eq
 8007b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b18:	2500      	movne	r5, #0
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	bfc4      	itt	gt
 8007b1e:	1a9b      	subgt	r3, r3, r2
 8007b20:	18ed      	addgt	r5, r5, r3
 8007b22:	2600      	movs	r6, #0
 8007b24:	341a      	adds	r4, #26
 8007b26:	42b5      	cmp	r5, r6
 8007b28:	d11a      	bne.n	8007b60 <_printf_common+0xc8>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e008      	b.n	8007b40 <_printf_common+0xa8>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4652      	mov	r2, sl
 8007b32:	4641      	mov	r1, r8
 8007b34:	4638      	mov	r0, r7
 8007b36:	47c8      	blx	r9
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d103      	bne.n	8007b44 <_printf_common+0xac>
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b44:	3501      	adds	r5, #1
 8007b46:	e7c6      	b.n	8007ad6 <_printf_common+0x3e>
 8007b48:	18e1      	adds	r1, r4, r3
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	2030      	movs	r0, #48	@ 0x30
 8007b4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b52:	4422      	add	r2, r4
 8007b54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b5c:	3302      	adds	r3, #2
 8007b5e:	e7c7      	b.n	8007af0 <_printf_common+0x58>
 8007b60:	2301      	movs	r3, #1
 8007b62:	4622      	mov	r2, r4
 8007b64:	4641      	mov	r1, r8
 8007b66:	4638      	mov	r0, r7
 8007b68:	47c8      	blx	r9
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d0e6      	beq.n	8007b3c <_printf_common+0xa4>
 8007b6e:	3601      	adds	r6, #1
 8007b70:	e7d9      	b.n	8007b26 <_printf_common+0x8e>
	...

08007b74 <_printf_i>:
 8007b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b78:	7e0f      	ldrb	r7, [r1, #24]
 8007b7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b7c:	2f78      	cmp	r7, #120	@ 0x78
 8007b7e:	4691      	mov	r9, r2
 8007b80:	4680      	mov	r8, r0
 8007b82:	460c      	mov	r4, r1
 8007b84:	469a      	mov	sl, r3
 8007b86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b8a:	d807      	bhi.n	8007b9c <_printf_i+0x28>
 8007b8c:	2f62      	cmp	r7, #98	@ 0x62
 8007b8e:	d80a      	bhi.n	8007ba6 <_printf_i+0x32>
 8007b90:	2f00      	cmp	r7, #0
 8007b92:	f000 80d2 	beq.w	8007d3a <_printf_i+0x1c6>
 8007b96:	2f58      	cmp	r7, #88	@ 0x58
 8007b98:	f000 80b9 	beq.w	8007d0e <_printf_i+0x19a>
 8007b9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ba0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ba4:	e03a      	b.n	8007c1c <_printf_i+0xa8>
 8007ba6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007baa:	2b15      	cmp	r3, #21
 8007bac:	d8f6      	bhi.n	8007b9c <_printf_i+0x28>
 8007bae:	a101      	add	r1, pc, #4	@ (adr r1, 8007bb4 <_printf_i+0x40>)
 8007bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bb4:	08007c0d 	.word	0x08007c0d
 8007bb8:	08007c21 	.word	0x08007c21
 8007bbc:	08007b9d 	.word	0x08007b9d
 8007bc0:	08007b9d 	.word	0x08007b9d
 8007bc4:	08007b9d 	.word	0x08007b9d
 8007bc8:	08007b9d 	.word	0x08007b9d
 8007bcc:	08007c21 	.word	0x08007c21
 8007bd0:	08007b9d 	.word	0x08007b9d
 8007bd4:	08007b9d 	.word	0x08007b9d
 8007bd8:	08007b9d 	.word	0x08007b9d
 8007bdc:	08007b9d 	.word	0x08007b9d
 8007be0:	08007d21 	.word	0x08007d21
 8007be4:	08007c4b 	.word	0x08007c4b
 8007be8:	08007cdb 	.word	0x08007cdb
 8007bec:	08007b9d 	.word	0x08007b9d
 8007bf0:	08007b9d 	.word	0x08007b9d
 8007bf4:	08007d43 	.word	0x08007d43
 8007bf8:	08007b9d 	.word	0x08007b9d
 8007bfc:	08007c4b 	.word	0x08007c4b
 8007c00:	08007b9d 	.word	0x08007b9d
 8007c04:	08007b9d 	.word	0x08007b9d
 8007c08:	08007ce3 	.word	0x08007ce3
 8007c0c:	6833      	ldr	r3, [r6, #0]
 8007c0e:	1d1a      	adds	r2, r3, #4
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6032      	str	r2, [r6, #0]
 8007c14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e09d      	b.n	8007d5c <_printf_i+0x1e8>
 8007c20:	6833      	ldr	r3, [r6, #0]
 8007c22:	6820      	ldr	r0, [r4, #0]
 8007c24:	1d19      	adds	r1, r3, #4
 8007c26:	6031      	str	r1, [r6, #0]
 8007c28:	0606      	lsls	r6, r0, #24
 8007c2a:	d501      	bpl.n	8007c30 <_printf_i+0xbc>
 8007c2c:	681d      	ldr	r5, [r3, #0]
 8007c2e:	e003      	b.n	8007c38 <_printf_i+0xc4>
 8007c30:	0645      	lsls	r5, r0, #25
 8007c32:	d5fb      	bpl.n	8007c2c <_printf_i+0xb8>
 8007c34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c38:	2d00      	cmp	r5, #0
 8007c3a:	da03      	bge.n	8007c44 <_printf_i+0xd0>
 8007c3c:	232d      	movs	r3, #45	@ 0x2d
 8007c3e:	426d      	negs	r5, r5
 8007c40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c44:	4859      	ldr	r0, [pc, #356]	@ (8007dac <_printf_i+0x238>)
 8007c46:	230a      	movs	r3, #10
 8007c48:	e011      	b.n	8007c6e <_printf_i+0xfa>
 8007c4a:	6821      	ldr	r1, [r4, #0]
 8007c4c:	6833      	ldr	r3, [r6, #0]
 8007c4e:	0608      	lsls	r0, r1, #24
 8007c50:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c54:	d402      	bmi.n	8007c5c <_printf_i+0xe8>
 8007c56:	0649      	lsls	r1, r1, #25
 8007c58:	bf48      	it	mi
 8007c5a:	b2ad      	uxthmi	r5, r5
 8007c5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c5e:	4853      	ldr	r0, [pc, #332]	@ (8007dac <_printf_i+0x238>)
 8007c60:	6033      	str	r3, [r6, #0]
 8007c62:	bf14      	ite	ne
 8007c64:	230a      	movne	r3, #10
 8007c66:	2308      	moveq	r3, #8
 8007c68:	2100      	movs	r1, #0
 8007c6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c6e:	6866      	ldr	r6, [r4, #4]
 8007c70:	60a6      	str	r6, [r4, #8]
 8007c72:	2e00      	cmp	r6, #0
 8007c74:	bfa2      	ittt	ge
 8007c76:	6821      	ldrge	r1, [r4, #0]
 8007c78:	f021 0104 	bicge.w	r1, r1, #4
 8007c7c:	6021      	strge	r1, [r4, #0]
 8007c7e:	b90d      	cbnz	r5, 8007c84 <_printf_i+0x110>
 8007c80:	2e00      	cmp	r6, #0
 8007c82:	d04b      	beq.n	8007d1c <_printf_i+0x1a8>
 8007c84:	4616      	mov	r6, r2
 8007c86:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c8a:	fb03 5711 	mls	r7, r3, r1, r5
 8007c8e:	5dc7      	ldrb	r7, [r0, r7]
 8007c90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c94:	462f      	mov	r7, r5
 8007c96:	42bb      	cmp	r3, r7
 8007c98:	460d      	mov	r5, r1
 8007c9a:	d9f4      	bls.n	8007c86 <_printf_i+0x112>
 8007c9c:	2b08      	cmp	r3, #8
 8007c9e:	d10b      	bne.n	8007cb8 <_printf_i+0x144>
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	07df      	lsls	r7, r3, #31
 8007ca4:	d508      	bpl.n	8007cb8 <_printf_i+0x144>
 8007ca6:	6923      	ldr	r3, [r4, #16]
 8007ca8:	6861      	ldr	r1, [r4, #4]
 8007caa:	4299      	cmp	r1, r3
 8007cac:	bfde      	ittt	le
 8007cae:	2330      	movle	r3, #48	@ 0x30
 8007cb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cb8:	1b92      	subs	r2, r2, r6
 8007cba:	6122      	str	r2, [r4, #16]
 8007cbc:	f8cd a000 	str.w	sl, [sp]
 8007cc0:	464b      	mov	r3, r9
 8007cc2:	aa03      	add	r2, sp, #12
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	f7ff fee6 	bl	8007a98 <_printf_common>
 8007ccc:	3001      	adds	r0, #1
 8007cce:	d14a      	bne.n	8007d66 <_printf_i+0x1f2>
 8007cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd4:	b004      	add	sp, #16
 8007cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	f043 0320 	orr.w	r3, r3, #32
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	4833      	ldr	r0, [pc, #204]	@ (8007db0 <_printf_i+0x23c>)
 8007ce4:	2778      	movs	r7, #120	@ 0x78
 8007ce6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cea:	6823      	ldr	r3, [r4, #0]
 8007cec:	6831      	ldr	r1, [r6, #0]
 8007cee:	061f      	lsls	r7, r3, #24
 8007cf0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cf4:	d402      	bmi.n	8007cfc <_printf_i+0x188>
 8007cf6:	065f      	lsls	r7, r3, #25
 8007cf8:	bf48      	it	mi
 8007cfa:	b2ad      	uxthmi	r5, r5
 8007cfc:	6031      	str	r1, [r6, #0]
 8007cfe:	07d9      	lsls	r1, r3, #31
 8007d00:	bf44      	itt	mi
 8007d02:	f043 0320 	orrmi.w	r3, r3, #32
 8007d06:	6023      	strmi	r3, [r4, #0]
 8007d08:	b11d      	cbz	r5, 8007d12 <_printf_i+0x19e>
 8007d0a:	2310      	movs	r3, #16
 8007d0c:	e7ac      	b.n	8007c68 <_printf_i+0xf4>
 8007d0e:	4827      	ldr	r0, [pc, #156]	@ (8007dac <_printf_i+0x238>)
 8007d10:	e7e9      	b.n	8007ce6 <_printf_i+0x172>
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	f023 0320 	bic.w	r3, r3, #32
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	e7f6      	b.n	8007d0a <_printf_i+0x196>
 8007d1c:	4616      	mov	r6, r2
 8007d1e:	e7bd      	b.n	8007c9c <_printf_i+0x128>
 8007d20:	6833      	ldr	r3, [r6, #0]
 8007d22:	6825      	ldr	r5, [r4, #0]
 8007d24:	6961      	ldr	r1, [r4, #20]
 8007d26:	1d18      	adds	r0, r3, #4
 8007d28:	6030      	str	r0, [r6, #0]
 8007d2a:	062e      	lsls	r6, r5, #24
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	d501      	bpl.n	8007d34 <_printf_i+0x1c0>
 8007d30:	6019      	str	r1, [r3, #0]
 8007d32:	e002      	b.n	8007d3a <_printf_i+0x1c6>
 8007d34:	0668      	lsls	r0, r5, #25
 8007d36:	d5fb      	bpl.n	8007d30 <_printf_i+0x1bc>
 8007d38:	8019      	strh	r1, [r3, #0]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	4616      	mov	r6, r2
 8007d40:	e7bc      	b.n	8007cbc <_printf_i+0x148>
 8007d42:	6833      	ldr	r3, [r6, #0]
 8007d44:	1d1a      	adds	r2, r3, #4
 8007d46:	6032      	str	r2, [r6, #0]
 8007d48:	681e      	ldr	r6, [r3, #0]
 8007d4a:	6862      	ldr	r2, [r4, #4]
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f7f8 fa3e 	bl	80001d0 <memchr>
 8007d54:	b108      	cbz	r0, 8007d5a <_printf_i+0x1e6>
 8007d56:	1b80      	subs	r0, r0, r6
 8007d58:	6060      	str	r0, [r4, #4]
 8007d5a:	6863      	ldr	r3, [r4, #4]
 8007d5c:	6123      	str	r3, [r4, #16]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d64:	e7aa      	b.n	8007cbc <_printf_i+0x148>
 8007d66:	6923      	ldr	r3, [r4, #16]
 8007d68:	4632      	mov	r2, r6
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	47d0      	blx	sl
 8007d70:	3001      	adds	r0, #1
 8007d72:	d0ad      	beq.n	8007cd0 <_printf_i+0x15c>
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	079b      	lsls	r3, r3, #30
 8007d78:	d413      	bmi.n	8007da2 <_printf_i+0x22e>
 8007d7a:	68e0      	ldr	r0, [r4, #12]
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	4298      	cmp	r0, r3
 8007d80:	bfb8      	it	lt
 8007d82:	4618      	movlt	r0, r3
 8007d84:	e7a6      	b.n	8007cd4 <_printf_i+0x160>
 8007d86:	2301      	movs	r3, #1
 8007d88:	4632      	mov	r2, r6
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	47d0      	blx	sl
 8007d90:	3001      	adds	r0, #1
 8007d92:	d09d      	beq.n	8007cd0 <_printf_i+0x15c>
 8007d94:	3501      	adds	r5, #1
 8007d96:	68e3      	ldr	r3, [r4, #12]
 8007d98:	9903      	ldr	r1, [sp, #12]
 8007d9a:	1a5b      	subs	r3, r3, r1
 8007d9c:	42ab      	cmp	r3, r5
 8007d9e:	dcf2      	bgt.n	8007d86 <_printf_i+0x212>
 8007da0:	e7eb      	b.n	8007d7a <_printf_i+0x206>
 8007da2:	2500      	movs	r5, #0
 8007da4:	f104 0619 	add.w	r6, r4, #25
 8007da8:	e7f5      	b.n	8007d96 <_printf_i+0x222>
 8007daa:	bf00      	nop
 8007dac:	0800af5d 	.word	0x0800af5d
 8007db0:	0800af6e 	.word	0x0800af6e

08007db4 <memmove>:
 8007db4:	4288      	cmp	r0, r1
 8007db6:	b510      	push	{r4, lr}
 8007db8:	eb01 0402 	add.w	r4, r1, r2
 8007dbc:	d902      	bls.n	8007dc4 <memmove+0x10>
 8007dbe:	4284      	cmp	r4, r0
 8007dc0:	4623      	mov	r3, r4
 8007dc2:	d807      	bhi.n	8007dd4 <memmove+0x20>
 8007dc4:	1e43      	subs	r3, r0, #1
 8007dc6:	42a1      	cmp	r1, r4
 8007dc8:	d008      	beq.n	8007ddc <memmove+0x28>
 8007dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dd2:	e7f8      	b.n	8007dc6 <memmove+0x12>
 8007dd4:	4402      	add	r2, r0
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	428a      	cmp	r2, r1
 8007dda:	d100      	bne.n	8007dde <memmove+0x2a>
 8007ddc:	bd10      	pop	{r4, pc}
 8007dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007de6:	e7f7      	b.n	8007dd8 <memmove+0x24>

08007de8 <_sbrk_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d06      	ldr	r5, [pc, #24]	@ (8007e04 <_sbrk_r+0x1c>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	602b      	str	r3, [r5, #0]
 8007df4:	f7fa fc2e 	bl	8002654 <_sbrk>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_sbrk_r+0x1a>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_sbrk_r+0x1a>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	2000044c 	.word	0x2000044c

08007e08 <memcpy>:
 8007e08:	440a      	add	r2, r1
 8007e0a:	4291      	cmp	r1, r2
 8007e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e10:	d100      	bne.n	8007e14 <memcpy+0xc>
 8007e12:	4770      	bx	lr
 8007e14:	b510      	push	{r4, lr}
 8007e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e1e:	4291      	cmp	r1, r2
 8007e20:	d1f9      	bne.n	8007e16 <memcpy+0xe>
 8007e22:	bd10      	pop	{r4, pc}

08007e24 <_realloc_r>:
 8007e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e28:	4680      	mov	r8, r0
 8007e2a:	4615      	mov	r5, r2
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	b921      	cbnz	r1, 8007e3a <_realloc_r+0x16>
 8007e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e34:	4611      	mov	r1, r2
 8007e36:	f7ff bc4b 	b.w	80076d0 <_malloc_r>
 8007e3a:	b92a      	cbnz	r2, 8007e48 <_realloc_r+0x24>
 8007e3c:	f7ff fbdc 	bl	80075f8 <_free_r>
 8007e40:	2400      	movs	r4, #0
 8007e42:	4620      	mov	r0, r4
 8007e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e48:	f000 f81a 	bl	8007e80 <_malloc_usable_size_r>
 8007e4c:	4285      	cmp	r5, r0
 8007e4e:	4606      	mov	r6, r0
 8007e50:	d802      	bhi.n	8007e58 <_realloc_r+0x34>
 8007e52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007e56:	d8f4      	bhi.n	8007e42 <_realloc_r+0x1e>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	f7ff fc38 	bl	80076d0 <_malloc_r>
 8007e60:	4607      	mov	r7, r0
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d0ec      	beq.n	8007e40 <_realloc_r+0x1c>
 8007e66:	42b5      	cmp	r5, r6
 8007e68:	462a      	mov	r2, r5
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	bf28      	it	cs
 8007e6e:	4632      	movcs	r2, r6
 8007e70:	f7ff ffca 	bl	8007e08 <memcpy>
 8007e74:	4621      	mov	r1, r4
 8007e76:	4640      	mov	r0, r8
 8007e78:	f7ff fbbe 	bl	80075f8 <_free_r>
 8007e7c:	463c      	mov	r4, r7
 8007e7e:	e7e0      	b.n	8007e42 <_realloc_r+0x1e>

08007e80 <_malloc_usable_size_r>:
 8007e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e84:	1f18      	subs	r0, r3, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bfbc      	itt	lt
 8007e8a:	580b      	ldrlt	r3, [r1, r0]
 8007e8c:	18c0      	addlt	r0, r0, r3
 8007e8e:	4770      	bx	lr

08007e90 <_init>:
 8007e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e92:	bf00      	nop
 8007e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e96:	bc08      	pop	{r3}
 8007e98:	469e      	mov	lr, r3
 8007e9a:	4770      	bx	lr

08007e9c <_fini>:
 8007e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9e:	bf00      	nop
 8007ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ea2:	bc08      	pop	{r3}
 8007ea4:	469e      	mov	lr, r3
 8007ea6:	4770      	bx	lr
